

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Thu Apr 12 01:15:38 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16F1619
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	idataBANK2,global,class=CODE,delta=2
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     8                           	psect	stringtext1,global,class=STRCODE,delta=2
     9                           	psect	stringtext2,global,class=STRCODE,delta=2
    10                           	psect	stringtext3,global,class=STRCODE,delta=2
    11                           	psect	cinit,global,class=CODE,merge=1,delta=2
    12                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    13                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    16                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    17                           	psect	inittext,global,class=CODE,delta=2
    18                           	psect	clrtext,global,class=CODE,delta=2
    19                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    20                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    21                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    22                           	psect	text1,local,class=CODE,merge=1,delta=2
    23                           	psect	text2,local,class=CODE,merge=1,delta=2
    24                           	psect	text3,local,class=CODE,merge=1,delta=2
    25                           	psect	text4,local,class=CODE,merge=1,delta=2
    26                           	psect	text5,local,class=CODE,merge=1,delta=2
    27                           	psect	text6,local,class=CODE,merge=1,delta=2
    28                           	psect	text7,local,class=CODE,merge=1,delta=2
    29                           	psect	text8,local,class=CODE,merge=1,delta=2
    30                           	psect	text9,local,class=CODE,merge=1,delta=2
    31                           	psect	text10,local,class=CODE,merge=1,delta=2
    32                           	psect	text11,local,class=CODE,merge=1,delta=2
    33                           	psect	text12,local,class=CODE,merge=1,delta=2
    34                           	psect	text13,local,class=CODE,merge=1,delta=2
    35                           	psect	text14,local,class=CODE,merge=1,delta=2
    36                           	psect	text15,local,class=CODE,merge=1,delta=2
    37                           	psect	text16,local,class=CODE,merge=1,delta=2
    38                           	psect	text17,local,class=CODE,merge=1,delta=2,group=1
    39                           	psect	text18,local,class=CODE,merge=1,delta=2
    40                           	psect	text19,local,class=CODE,merge=1,delta=2
    41                           	psect	text20,local,class=CODE,merge=1,delta=2
    42                           	psect	text21,local,class=CODE,merge=1,delta=2
    43                           	psect	text22,local,class=CODE,merge=1,delta=2,group=1
    44                           	psect	text23,local,class=CODE,merge=1,delta=2,group=1
    45                           	psect	text24,local,class=CODE,merge=1,delta=2,group=1
    46                           	psect	text25,local,class=CODE,merge=1,delta=2,group=1
    47                           	psect	text26,local,class=CODE,merge=1,delta=2
    48                           	psect	text27,local,class=CODE,merge=1,delta=2
    49                           	psect	text28,local,class=CODE,merge=1,delta=2
    50                           	psect	text29,local,class=CODE,merge=1,delta=2
    51                           	psect	intentry,global,class=CODE,delta=2
    52                           	psect	text31,local,class=CODE,merge=1,delta=2
    53                           	psect	text32,local,class=CODE,merge=1,delta=2
    54                           	psect	text33,local,class=CODE,merge=1,delta=2
    55                           	psect	text34,local,class=CODE,merge=1,delta=2
    56                           	psect	text35,local,class=CODE,merge=1,delta=2
    57                           	psect	text36,local,class=CODE,merge=1,delta=2
    58                           	psect	text37,local,class=CODE,merge=1,delta=2
    59                           	psect	text38,local,class=CODE,merge=1,delta=2
    60                           	psect	text39,local,class=CODE,merge=1,delta=2
    61                           	psect	text40,local,class=CODE,merge=1,delta=2
    62                           	psect	text41,local,class=CODE,merge=1,delta=2
    63                           	psect	text42,local,class=CODE,merge=1,delta=2
    64                           	psect	text43,local,class=CODE,merge=1,delta=2
    65                           	psect	text44,local,class=CODE,merge=1,delta=2
    66                           	psect	text45,local,class=CODE,merge=1,delta=2
    67                           	psect	text46,local,class=CODE,merge=1,delta=2
    68                           	dabs	1,0x7E,2
    69  0000                     
    70                           ; Version 1.45
    71                           ; Generated 16/11/2017 GMT
    72                           ; 
    73                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    74                           ; All rights reserved.
    75                           ; 
    76                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    77                           ; 
    78                           ; Redistribution and use in source and binary forms, with or without modification, are
    79                           ; permitted provided that the following conditions are met:
    80                           ; 
    81                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    82                           ;        conditions and the following disclaimer.
    83                           ; 
    84                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    85                           ;        of conditions and the following disclaimer in the documentation and/or other
    86                           ;        materials provided with the distribution.
    87                           ; 
    88                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    89                           ;        software without specific prior written permission.
    90                           ; 
    91                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    92                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    93                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    94                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    95                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    96                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    97                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    98                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    99                           ; 
   100                           ; 
   101                           ; Code-generator required, PIC16F1619 Definitions
   102                           ; 
   103                           ; SFR Addresses
   104  0000                     	;# 
   105  0001                     	;# 
   106  0002                     	;# 
   107  0003                     	;# 
   108  0004                     	;# 
   109  0005                     	;# 
   110  0006                     	;# 
   111  0007                     	;# 
   112  0008                     	;# 
   113  0009                     	;# 
   114  000A                     	;# 
   115  000B                     	;# 
   116  000C                     	;# 
   117  000D                     	;# 
   118  000E                     	;# 
   119  0010                     	;# 
   120  0011                     	;# 
   121  0012                     	;# 
   122  0013                     	;# 
   123  0014                     	;# 
   124  0015                     	;# 
   125  0016                     	;# 
   126  0016                     	;# 
   127  0017                     	;# 
   128  0018                     	;# 
   129  0019                     	;# 
   130  001A                     	;# 
   131  001A                     	;# 
   132  001B                     	;# 
   133  001B                     	;# 
   134  001C                     	;# 
   135  001D                     	;# 
   136  001E                     	;# 
   137  001F                     	;# 
   138  008C                     	;# 
   139  008D                     	;# 
   140  008E                     	;# 
   141  0090                     	;# 
   142  0091                     	;# 
   143  0092                     	;# 
   144  0093                     	;# 
   145  0094                     	;# 
   146  0095                     	;# 
   147  0096                     	;# 
   148  0098                     	;# 
   149  0099                     	;# 
   150  009A                     	;# 
   151  009B                     	;# 
   152  009B                     	;# 
   153  009C                     	;# 
   154  009D                     	;# 
   155  009E                     	;# 
   156  009F                     	;# 
   157  010C                     	;# 
   158  010D                     	;# 
   159  010E                     	;# 
   160  0111                     	;# 
   161  0112                     	;# 
   162  0113                     	;# 
   163  0114                     	;# 
   164  0115                     	;# 
   165  0116                     	;# 
   166  0117                     	;# 
   167  0118                     	;# 
   168  0119                     	;# 
   169  011C                     	;# 
   170  018C                     	;# 
   171  018D                     	;# 
   172  018E                     	;# 
   173  0191                     	;# 
   174  0191                     	;# 
   175  0192                     	;# 
   176  0193                     	;# 
   177  0193                     	;# 
   178  0194                     	;# 
   179  0195                     	;# 
   180  0196                     	;# 
   181  0197                     	;# 
   182  0199                     	;# 
   183  0199                     	;# 
   184  0199                     	;# 
   185  019A                     	;# 
   186  019A                     	;# 
   187  019A                     	;# 
   188  019B                     	;# 
   189  019B                     	;# 
   190  019B                     	;# 
   191  019B                     	;# 
   192  019B                     	;# 
   193  019C                     	;# 
   194  019C                     	;# 
   195  019C                     	;# 
   196  019D                     	;# 
   197  019D                     	;# 
   198  019D                     	;# 
   199  019E                     	;# 
   200  019E                     	;# 
   201  019E                     	;# 
   202  019F                     	;# 
   203  019F                     	;# 
   204  019F                     	;# 
   205  019F                     	;# 
   206  019F                     	;# 
   207  020C                     	;# 
   208  020D                     	;# 
   209  020E                     	;# 
   210  0211                     	;# 
   211  0211                     	;# 
   212  0212                     	;# 
   213  0212                     	;# 
   214  0213                     	;# 
   215  0213                     	;# 
   216  0214                     	;# 
   217  0214                     	;# 
   218  0215                     	;# 
   219  0215                     	;# 
   220  0215                     	;# 
   221  0215                     	;# 
   222  0216                     	;# 
   223  0216                     	;# 
   224  0217                     	;# 
   225  0217                     	;# 
   226  028C                     	;# 
   227  028D                     	;# 
   228  028E                     	;# 
   229  0291                     	;# 
   230  0291                     	;# 
   231  0292                     	;# 
   232  0293                     	;# 
   233  0294                     	;# 
   234  0298                     	;# 
   235  0298                     	;# 
   236  0299                     	;# 
   237  029A                     	;# 
   238  029B                     	;# 
   239  029E                     	;# 
   240  030C                     	;# 
   241  030D                     	;# 
   242  030E                     	;# 
   243  038C                     	;# 
   244  038D                     	;# 
   245  038E                     	;# 
   246  0391                     	;# 
   247  0392                     	;# 
   248  0393                     	;# 
   249  0394                     	;# 
   250  0395                     	;# 
   251  0396                     	;# 
   252  0397                     	;# 
   253  0398                     	;# 
   254  0399                     	;# 
   255  040E                     	;# 
   256  0413                     	;# 
   257  0413                     	;# 
   258  0414                     	;# 
   259  0414                     	;# 
   260  0415                     	;# 
   261  0416                     	;# 
   262  0417                     	;# 
   263  0418                     	;# 
   264  041A                     	;# 
   265  041A                     	;# 
   266  041B                     	;# 
   267  041B                     	;# 
   268  041C                     	;# 
   269  041D                     	;# 
   270  041E                     	;# 
   271  041F                     	;# 
   272  0493                     	;# 
   273  0494                     	;# 
   274  0495                     	;# 
   275  0496                     	;# 
   276  049A                     	;# 
   277  049B                     	;# 
   278  049C                     	;# 
   279  049D                     	;# 
   280  058C                     	;# 
   281  058C                     	;# 
   282  058D                     	;# 
   283  058E                     	;# 
   284  058E                     	;# 
   285  058F                     	;# 
   286  0590                     	;# 
   287  0590                     	;# 
   288  0591                     	;# 
   289  0592                     	;# 
   290  0592                     	;# 
   291  0593                     	;# 
   292  0594                     	;# 
   293  0594                     	;# 
   294  0595                     	;# 
   295  0596                     	;# 
   296  0596                     	;# 
   297  0597                     	;# 
   298  0598                     	;# 
   299  0599                     	;# 
   300  059A                     	;# 
   301  059B                     	;# 
   302  059B                     	;# 
   303  059C                     	;# 
   304  059D                     	;# 
   305  060C                     	;# 
   306  060C                     	;# 
   307  060D                     	;# 
   308  060E                     	;# 
   309  060F                     	;# 
   310  060F                     	;# 
   311  0610                     	;# 
   312  0611                     	;# 
   313  0612                     	;# 
   314  0613                     	;# 
   315  0614                     	;# 
   316  0617                     	;# 
   317  0618                     	;# 
   318  0619                     	;# 
   319  061A                     	;# 
   320  061B                     	;# 
   321  061C                     	;# 
   322  0691                     	;# 
   323  0692                     	;# 
   324  0693                     	;# 
   325  0694                     	;# 
   326  0695                     	;# 
   327  0696                     	;# 
   328  0697                     	;# 
   329  0699                     	;# 
   330  069A                     	;# 
   331  0711                     	;# 
   332  0712                     	;# 
   333  0713                     	;# 
   334  0714                     	;# 
   335  0715                     	;# 
   336  0718                     	;# 
   337  0718                     	;# 
   338  0719                     	;# 
   339  071A                     	;# 
   340  071A                     	;# 
   341  071B                     	;# 
   342  071C                     	;# 
   343  071D                     	;# 
   344  0791                     	;# 
   345  0791                     	;# 
   346  0792                     	;# 
   347  0793                     	;# 
   348  0793                     	;# 
   349  0794                     	;# 
   350  0795                     	;# 
   351  0795                     	;# 
   352  0796                     	;# 
   353  0797                     	;# 
   354  0797                     	;# 
   355  0798                     	;# 
   356  0799                     	;# 
   357  079A                     	;# 
   358  080C                     	;# 
   359  080C                     	;# 
   360  080D                     	;# 
   361  080E                     	;# 
   362  080E                     	;# 
   363  080F                     	;# 
   364  0810                     	;# 
   365  0810                     	;# 
   366  0811                     	;# 
   367  0812                     	;# 
   368  0812                     	;# 
   369  0813                     	;# 
   370  0814                     	;# 
   371  0815                     	;# 
   372  0816                     	;# 
   373  0817                     	;# 
   374  0818                     	;# 
   375  0819                     	;# 
   376  081A                     	;# 
   377  081A                     	;# 
   378  081B                     	;# 
   379  081C                     	;# 
   380  081C                     	;# 
   381  081D                     	;# 
   382  088C                     	;# 
   383  088D                     	;# 
   384  088E                     	;# 
   385  088F                     	;# 
   386  088F                     	;# 
   387  0890                     	;# 
   388  0891                     	;# 
   389  0892                     	;# 
   390  0893                     	;# 
   391  0893                     	;# 
   392  0894                     	;# 
   393  0895                     	;# 
   394  0896                     	;# 
   395  0897                     	;# 
   396  0897                     	;# 
   397  0898                     	;# 
   398  0899                     	;# 
   399  0D8C                     	;# 
   400  0D8C                     	;# 
   401  0D8D                     	;# 
   402  0D8E                     	;# 
   403  0D8F                     	;# 
   404  0D8F                     	;# 
   405  0D90                     	;# 
   406  0D91                     	;# 
   407  0D92                     	;# 
   408  0D92                     	;# 
   409  0D93                     	;# 
   410  0D94                     	;# 
   411  0D95                     	;# 
   412  0D95                     	;# 
   413  0D96                     	;# 
   414  0D97                     	;# 
   415  0D98                     	;# 
   416  0D99                     	;# 
   417  0D9A                     	;# 
   418  0D9B                     	;# 
   419  0D9C                     	;# 
   420  0D9D                     	;# 
   421  0D9E                     	;# 
   422  0D9E                     	;# 
   423  0D9F                     	;# 
   424  0DA0                     	;# 
   425  0DA1                     	;# 
   426  0DA1                     	;# 
   427  0DA2                     	;# 
   428  0DA3                     	;# 
   429  0DA4                     	;# 
   430  0DA4                     	;# 
   431  0DA5                     	;# 
   432  0DA6                     	;# 
   433  0DA7                     	;# 
   434  0DA7                     	;# 
   435  0DA8                     	;# 
   436  0DA9                     	;# 
   437  0DAA                     	;# 
   438  0DAB                     	;# 
   439  0DAC                     	;# 
   440  0DAD                     	;# 
   441  0DAE                     	;# 
   442  0DAF                     	;# 
   443  0E0F                     	;# 
   444  0E10                     	;# 
   445  0E11                     	;# 
   446  0E12                     	;# 
   447  0E13                     	;# 
   448  0E14                     	;# 
   449  0E15                     	;# 
   450  0E16                     	;# 
   451  0E17                     	;# 
   452  0E18                     	;# 
   453  0E19                     	;# 
   454  0E1A                     	;# 
   455  0E1B                     	;# 
   456  0E1C                     	;# 
   457  0E1D                     	;# 
   458  0E1E                     	;# 
   459  0E1F                     	;# 
   460  0E20                     	;# 
   461  0E21                     	;# 
   462  0E22                     	;# 
   463  0E23                     	;# 
   464  0E24                     	;# 
   465  0E25                     	;# 
   466  0E26                     	;# 
   467  0E27                     	;# 
   468  0E28                     	;# 
   469  0E29                     	;# 
   470  0E2A                     	;# 
   471  0E2B                     	;# 
   472  0E2C                     	;# 
   473  0E2D                     	;# 
   474  0E2E                     	;# 
   475  0E90                     	;# 
   476  0E91                     	;# 
   477  0E92                     	;# 
   478  0E94                     	;# 
   479  0E95                     	;# 
   480  0E9C                     	;# 
   481  0E9D                     	;# 
   482  0E9E                     	;# 
   483  0E9F                     	;# 
   484  0EA0                     	;# 
   485  0EA1                     	;# 
   486  0EA2                     	;# 
   487  0EA3                     	;# 
   488  0EA4                     	;# 
   489  0EA5                     	;# 
   490  0EA6                     	;# 
   491  0EA7                     	;# 
   492  0F0F                     	;# 
   493  0F10                     	;# 
   494  0F11                     	;# 
   495  0F12                     	;# 
   496  0F13                     	;# 
   497  0F14                     	;# 
   498  0F15                     	;# 
   499  0F16                     	;# 
   500  0F17                     	;# 
   501  0F18                     	;# 
   502  0F19                     	;# 
   503  0F1A                     	;# 
   504  0F1B                     	;# 
   505  0F1C                     	;# 
   506  0F1D                     	;# 
   507  0F1E                     	;# 
   508  0F1F                     	;# 
   509  0F20                     	;# 
   510  0F21                     	;# 
   511  0F22                     	;# 
   512  0F23                     	;# 
   513  0F24                     	;# 
   514  0F25                     	;# 
   515  0F26                     	;# 
   516  0F27                     	;# 
   517  0F28                     	;# 
   518  0F29                     	;# 
   519  0F2A                     	;# 
   520  0F2B                     	;# 
   521  0F2C                     	;# 
   522  0F2D                     	;# 
   523  0F2E                     	;# 
   524  0F2F                     	;# 
   525  0F30                     	;# 
   526  0F31                     	;# 
   527  0F32                     	;# 
   528  0F33                     	;# 
   529  0F34                     	;# 
   530  0F35                     	;# 
   531  0F36                     	;# 
   532  0F37                     	;# 
   533  0FE4                     	;# 
   534  0FE5                     	;# 
   535  0FE6                     	;# 
   536  0FE7                     	;# 
   537  0FE8                     	;# 
   538  0FE9                     	;# 
   539  0FEA                     	;# 
   540  0FEB                     	;# 
   541  0FED                     	;# 
   542  0FEE                     	;# 
   543  0FEF                     	;# 
   544  0000                     	;# 
   545  0001                     	;# 
   546  0002                     	;# 
   547  0003                     	;# 
   548  0004                     	;# 
   549  0005                     	;# 
   550  0006                     	;# 
   551  0007                     	;# 
   552  0008                     	;# 
   553  0009                     	;# 
   554  000A                     	;# 
   555  000B                     	;# 
   556  000C                     	;# 
   557  000D                     	;# 
   558  000E                     	;# 
   559  0010                     	;# 
   560  0011                     	;# 
   561  0012                     	;# 
   562  0013                     	;# 
   563  0014                     	;# 
   564  0015                     	;# 
   565  0016                     	;# 
   566  0016                     	;# 
   567  0017                     	;# 
   568  0018                     	;# 
   569  0019                     	;# 
   570  001A                     	;# 
   571  001A                     	;# 
   572  001B                     	;# 
   573  001B                     	;# 
   574  001C                     	;# 
   575  001D                     	;# 
   576  001E                     	;# 
   577  001F                     	;# 
   578  008C                     	;# 
   579  008D                     	;# 
   580  008E                     	;# 
   581  0090                     	;# 
   582  0091                     	;# 
   583  0092                     	;# 
   584  0093                     	;# 
   585  0094                     	;# 
   586  0095                     	;# 
   587  0096                     	;# 
   588  0098                     	;# 
   589  0099                     	;# 
   590  009A                     	;# 
   591  009B                     	;# 
   592  009B                     	;# 
   593  009C                     	;# 
   594  009D                     	;# 
   595  009E                     	;# 
   596  009F                     	;# 
   597  010C                     	;# 
   598  010D                     	;# 
   599  010E                     	;# 
   600  0111                     	;# 
   601  0112                     	;# 
   602  0113                     	;# 
   603  0114                     	;# 
   604  0115                     	;# 
   605  0116                     	;# 
   606  0117                     	;# 
   607  0118                     	;# 
   608  0119                     	;# 
   609  011C                     	;# 
   610  018C                     	;# 
   611  018D                     	;# 
   612  018E                     	;# 
   613  0191                     	;# 
   614  0191                     	;# 
   615  0192                     	;# 
   616  0193                     	;# 
   617  0193                     	;# 
   618  0194                     	;# 
   619  0195                     	;# 
   620  0196                     	;# 
   621  0197                     	;# 
   622  0199                     	;# 
   623  0199                     	;# 
   624  0199                     	;# 
   625  019A                     	;# 
   626  019A                     	;# 
   627  019A                     	;# 
   628  019B                     	;# 
   629  019B                     	;# 
   630  019B                     	;# 
   631  019B                     	;# 
   632  019B                     	;# 
   633  019C                     	;# 
   634  019C                     	;# 
   635  019C                     	;# 
   636  019D                     	;# 
   637  019D                     	;# 
   638  019D                     	;# 
   639  019E                     	;# 
   640  019E                     	;# 
   641  019E                     	;# 
   642  019F                     	;# 
   643  019F                     	;# 
   644  019F                     	;# 
   645  019F                     	;# 
   646  019F                     	;# 
   647  020C                     	;# 
   648  020D                     	;# 
   649  020E                     	;# 
   650  0211                     	;# 
   651  0211                     	;# 
   652  0212                     	;# 
   653  0212                     	;# 
   654  0213                     	;# 
   655  0213                     	;# 
   656  0214                     	;# 
   657  0214                     	;# 
   658  0215                     	;# 
   659  0215                     	;# 
   660  0215                     	;# 
   661  0215                     	;# 
   662  0216                     	;# 
   663  0216                     	;# 
   664  0217                     	;# 
   665  0217                     	;# 
   666  028C                     	;# 
   667  028D                     	;# 
   668  028E                     	;# 
   669  0291                     	;# 
   670  0291                     	;# 
   671  0292                     	;# 
   672  0293                     	;# 
   673  0294                     	;# 
   674  0298                     	;# 
   675  0298                     	;# 
   676  0299                     	;# 
   677  029A                     	;# 
   678  029B                     	;# 
   679  029E                     	;# 
   680  030C                     	;# 
   681  030D                     	;# 
   682  030E                     	;# 
   683  038C                     	;# 
   684  038D                     	;# 
   685  038E                     	;# 
   686  0391                     	;# 
   687  0392                     	;# 
   688  0393                     	;# 
   689  0394                     	;# 
   690  0395                     	;# 
   691  0396                     	;# 
   692  0397                     	;# 
   693  0398                     	;# 
   694  0399                     	;# 
   695  040E                     	;# 
   696  0413                     	;# 
   697  0413                     	;# 
   698  0414                     	;# 
   699  0414                     	;# 
   700  0415                     	;# 
   701  0416                     	;# 
   702  0417                     	;# 
   703  0418                     	;# 
   704  041A                     	;# 
   705  041A                     	;# 
   706  041B                     	;# 
   707  041B                     	;# 
   708  041C                     	;# 
   709  041D                     	;# 
   710  041E                     	;# 
   711  041F                     	;# 
   712  0493                     	;# 
   713  0494                     	;# 
   714  0495                     	;# 
   715  0496                     	;# 
   716  049A                     	;# 
   717  049B                     	;# 
   718  049C                     	;# 
   719  049D                     	;# 
   720  058C                     	;# 
   721  058C                     	;# 
   722  058D                     	;# 
   723  058E                     	;# 
   724  058E                     	;# 
   725  058F                     	;# 
   726  0590                     	;# 
   727  0590                     	;# 
   728  0591                     	;# 
   729  0592                     	;# 
   730  0592                     	;# 
   731  0593                     	;# 
   732  0594                     	;# 
   733  0594                     	;# 
   734  0595                     	;# 
   735  0596                     	;# 
   736  0596                     	;# 
   737  0597                     	;# 
   738  0598                     	;# 
   739  0599                     	;# 
   740  059A                     	;# 
   741  059B                     	;# 
   742  059B                     	;# 
   743  059C                     	;# 
   744  059D                     	;# 
   745  060C                     	;# 
   746  060C                     	;# 
   747  060D                     	;# 
   748  060E                     	;# 
   749  060F                     	;# 
   750  060F                     	;# 
   751  0610                     	;# 
   752  0611                     	;# 
   753  0612                     	;# 
   754  0613                     	;# 
   755  0614                     	;# 
   756  0617                     	;# 
   757  0618                     	;# 
   758  0619                     	;# 
   759  061A                     	;# 
   760  061B                     	;# 
   761  061C                     	;# 
   762  0691                     	;# 
   763  0692                     	;# 
   764  0693                     	;# 
   765  0694                     	;# 
   766  0695                     	;# 
   767  0696                     	;# 
   768  0697                     	;# 
   769  0699                     	;# 
   770  069A                     	;# 
   771  0711                     	;# 
   772  0712                     	;# 
   773  0713                     	;# 
   774  0714                     	;# 
   775  0715                     	;# 
   776  0718                     	;# 
   777  0718                     	;# 
   778  0719                     	;# 
   779  071A                     	;# 
   780  071A                     	;# 
   781  071B                     	;# 
   782  071C                     	;# 
   783  071D                     	;# 
   784  0791                     	;# 
   785  0791                     	;# 
   786  0792                     	;# 
   787  0793                     	;# 
   788  0793                     	;# 
   789  0794                     	;# 
   790  0795                     	;# 
   791  0795                     	;# 
   792  0796                     	;# 
   793  0797                     	;# 
   794  0797                     	;# 
   795  0798                     	;# 
   796  0799                     	;# 
   797  079A                     	;# 
   798  080C                     	;# 
   799  080C                     	;# 
   800  080D                     	;# 
   801  080E                     	;# 
   802  080E                     	;# 
   803  080F                     	;# 
   804  0810                     	;# 
   805  0810                     	;# 
   806  0811                     	;# 
   807  0812                     	;# 
   808  0812                     	;# 
   809  0813                     	;# 
   810  0814                     	;# 
   811  0815                     	;# 
   812  0816                     	;# 
   813  0817                     	;# 
   814  0818                     	;# 
   815  0819                     	;# 
   816  081A                     	;# 
   817  081A                     	;# 
   818  081B                     	;# 
   819  081C                     	;# 
   820  081C                     	;# 
   821  081D                     	;# 
   822  088C                     	;# 
   823  088D                     	;# 
   824  088E                     	;# 
   825  088F                     	;# 
   826  088F                     	;# 
   827  0890                     	;# 
   828  0891                     	;# 
   829  0892                     	;# 
   830  0893                     	;# 
   831  0893                     	;# 
   832  0894                     	;# 
   833  0895                     	;# 
   834  0896                     	;# 
   835  0897                     	;# 
   836  0897                     	;# 
   837  0898                     	;# 
   838  0899                     	;# 
   839  0D8C                     	;# 
   840  0D8C                     	;# 
   841  0D8D                     	;# 
   842  0D8E                     	;# 
   843  0D8F                     	;# 
   844  0D8F                     	;# 
   845  0D90                     	;# 
   846  0D91                     	;# 
   847  0D92                     	;# 
   848  0D92                     	;# 
   849  0D93                     	;# 
   850  0D94                     	;# 
   851  0D95                     	;# 
   852  0D95                     	;# 
   853  0D96                     	;# 
   854  0D97                     	;# 
   855  0D98                     	;# 
   856  0D99                     	;# 
   857  0D9A                     	;# 
   858  0D9B                     	;# 
   859  0D9C                     	;# 
   860  0D9D                     	;# 
   861  0D9E                     	;# 
   862  0D9E                     	;# 
   863  0D9F                     	;# 
   864  0DA0                     	;# 
   865  0DA1                     	;# 
   866  0DA1                     	;# 
   867  0DA2                     	;# 
   868  0DA3                     	;# 
   869  0DA4                     	;# 
   870  0DA4                     	;# 
   871  0DA5                     	;# 
   872  0DA6                     	;# 
   873  0DA7                     	;# 
   874  0DA7                     	;# 
   875  0DA8                     	;# 
   876  0DA9                     	;# 
   877  0DAA                     	;# 
   878  0DAB                     	;# 
   879  0DAC                     	;# 
   880  0DAD                     	;# 
   881  0DAE                     	;# 
   882  0DAF                     	;# 
   883  0E0F                     	;# 
   884  0E10                     	;# 
   885  0E11                     	;# 
   886  0E12                     	;# 
   887  0E13                     	;# 
   888  0E14                     	;# 
   889  0E15                     	;# 
   890  0E16                     	;# 
   891  0E17                     	;# 
   892  0E18                     	;# 
   893  0E19                     	;# 
   894  0E1A                     	;# 
   895  0E1B                     	;# 
   896  0E1C                     	;# 
   897  0E1D                     	;# 
   898  0E1E                     	;# 
   899  0E1F                     	;# 
   900  0E20                     	;# 
   901  0E21                     	;# 
   902  0E22                     	;# 
   903  0E23                     	;# 
   904  0E24                     	;# 
   905  0E25                     	;# 
   906  0E26                     	;# 
   907  0E27                     	;# 
   908  0E28                     	;# 
   909  0E29                     	;# 
   910  0E2A                     	;# 
   911  0E2B                     	;# 
   912  0E2C                     	;# 
   913  0E2D                     	;# 
   914  0E2E                     	;# 
   915  0E90                     	;# 
   916  0E91                     	;# 
   917  0E92                     	;# 
   918  0E94                     	;# 
   919  0E95                     	;# 
   920  0E9C                     	;# 
   921  0E9D                     	;# 
   922  0E9E                     	;# 
   923  0E9F                     	;# 
   924  0EA0                     	;# 
   925  0EA1                     	;# 
   926  0EA2                     	;# 
   927  0EA3                     	;# 
   928  0EA4                     	;# 
   929  0EA5                     	;# 
   930  0EA6                     	;# 
   931  0EA7                     	;# 
   932  0F0F                     	;# 
   933  0F10                     	;# 
   934  0F11                     	;# 
   935  0F12                     	;# 
   936  0F13                     	;# 
   937  0F14                     	;# 
   938  0F15                     	;# 
   939  0F16                     	;# 
   940  0F17                     	;# 
   941  0F18                     	;# 
   942  0F19                     	;# 
   943  0F1A                     	;# 
   944  0F1B                     	;# 
   945  0F1C                     	;# 
   946  0F1D                     	;# 
   947  0F1E                     	;# 
   948  0F1F                     	;# 
   949  0F20                     	;# 
   950  0F21                     	;# 
   951  0F22                     	;# 
   952  0F23                     	;# 
   953  0F24                     	;# 
   954  0F25                     	;# 
   955  0F26                     	;# 
   956  0F27                     	;# 
   957  0F28                     	;# 
   958  0F29                     	;# 
   959  0F2A                     	;# 
   960  0F2B                     	;# 
   961  0F2C                     	;# 
   962  0F2D                     	;# 
   963  0F2E                     	;# 
   964  0F2F                     	;# 
   965  0F30                     	;# 
   966  0F31                     	;# 
   967  0F32                     	;# 
   968  0F33                     	;# 
   969  0F34                     	;# 
   970  0F35                     	;# 
   971  0F36                     	;# 
   972  0F37                     	;# 
   973  0FE4                     	;# 
   974  0FE5                     	;# 
   975  0FE6                     	;# 
   976  0FE7                     	;# 
   977  0FE8                     	;# 
   978  0FE9                     	;# 
   979  0FEA                     	;# 
   980  0FEB                     	;# 
   981  0FED                     	;# 
   982  0FEE                     	;# 
   983  0FEF                     	;# 
   984  0000                     	;# 
   985  0001                     	;# 
   986  0002                     	;# 
   987  0003                     	;# 
   988  0004                     	;# 
   989  0005                     	;# 
   990  0006                     	;# 
   991  0007                     	;# 
   992  0008                     	;# 
   993  0009                     	;# 
   994  000A                     	;# 
   995  000B                     	;# 
   996  000C                     	;# 
   997  000D                     	;# 
   998  000E                     	;# 
   999  0010                     	;# 
  1000  0011                     	;# 
  1001  0012                     	;# 
  1002  0013                     	;# 
  1003  0014                     	;# 
  1004  0015                     	;# 
  1005  0016                     	;# 
  1006  0016                     	;# 
  1007  0017                     	;# 
  1008  0018                     	;# 
  1009  0019                     	;# 
  1010  001A                     	;# 
  1011  001A                     	;# 
  1012  001B                     	;# 
  1013  001B                     	;# 
  1014  001C                     	;# 
  1015  001D                     	;# 
  1016  001E                     	;# 
  1017  001F                     	;# 
  1018  008C                     	;# 
  1019  008D                     	;# 
  1020  008E                     	;# 
  1021  0090                     	;# 
  1022  0091                     	;# 
  1023  0092                     	;# 
  1024  0093                     	;# 
  1025  0094                     	;# 
  1026  0095                     	;# 
  1027  0096                     	;# 
  1028  0098                     	;# 
  1029  0099                     	;# 
  1030  009A                     	;# 
  1031  009B                     	;# 
  1032  009B                     	;# 
  1033  009C                     	;# 
  1034  009D                     	;# 
  1035  009E                     	;# 
  1036  009F                     	;# 
  1037  010C                     	;# 
  1038  010D                     	;# 
  1039  010E                     	;# 
  1040  0111                     	;# 
  1041  0112                     	;# 
  1042  0113                     	;# 
  1043  0114                     	;# 
  1044  0115                     	;# 
  1045  0116                     	;# 
  1046  0117                     	;# 
  1047  0118                     	;# 
  1048  0119                     	;# 
  1049  011C                     	;# 
  1050  018C                     	;# 
  1051  018D                     	;# 
  1052  018E                     	;# 
  1053  0191                     	;# 
  1054  0191                     	;# 
  1055  0192                     	;# 
  1056  0193                     	;# 
  1057  0193                     	;# 
  1058  0194                     	;# 
  1059  0195                     	;# 
  1060  0196                     	;# 
  1061  0197                     	;# 
  1062  0199                     	;# 
  1063  0199                     	;# 
  1064  0199                     	;# 
  1065  019A                     	;# 
  1066  019A                     	;# 
  1067  019A                     	;# 
  1068  019B                     	;# 
  1069  019B                     	;# 
  1070  019B                     	;# 
  1071  019B                     	;# 
  1072  019B                     	;# 
  1073  019C                     	;# 
  1074  019C                     	;# 
  1075  019C                     	;# 
  1076  019D                     	;# 
  1077  019D                     	;# 
  1078  019D                     	;# 
  1079  019E                     	;# 
  1080  019E                     	;# 
  1081  019E                     	;# 
  1082  019F                     	;# 
  1083  019F                     	;# 
  1084  019F                     	;# 
  1085  019F                     	;# 
  1086  019F                     	;# 
  1087  020C                     	;# 
  1088  020D                     	;# 
  1089  020E                     	;# 
  1090  0211                     	;# 
  1091  0211                     	;# 
  1092  0212                     	;# 
  1093  0212                     	;# 
  1094  0213                     	;# 
  1095  0213                     	;# 
  1096  0214                     	;# 
  1097  0214                     	;# 
  1098  0215                     	;# 
  1099  0215                     	;# 
  1100  0215                     	;# 
  1101  0215                     	;# 
  1102  0216                     	;# 
  1103  0216                     	;# 
  1104  0217                     	;# 
  1105  0217                     	;# 
  1106  028C                     	;# 
  1107  028D                     	;# 
  1108  028E                     	;# 
  1109  0291                     	;# 
  1110  0291                     	;# 
  1111  0292                     	;# 
  1112  0293                     	;# 
  1113  0294                     	;# 
  1114  0298                     	;# 
  1115  0298                     	;# 
  1116  0299                     	;# 
  1117  029A                     	;# 
  1118  029B                     	;# 
  1119  029E                     	;# 
  1120  030C                     	;# 
  1121  030D                     	;# 
  1122  030E                     	;# 
  1123  038C                     	;# 
  1124  038D                     	;# 
  1125  038E                     	;# 
  1126  0391                     	;# 
  1127  0392                     	;# 
  1128  0393                     	;# 
  1129  0394                     	;# 
  1130  0395                     	;# 
  1131  0396                     	;# 
  1132  0397                     	;# 
  1133  0398                     	;# 
  1134  0399                     	;# 
  1135  040E                     	;# 
  1136  0413                     	;# 
  1137  0413                     	;# 
  1138  0414                     	;# 
  1139  0414                     	;# 
  1140  0415                     	;# 
  1141  0416                     	;# 
  1142  0417                     	;# 
  1143  0418                     	;# 
  1144  041A                     	;# 
  1145  041A                     	;# 
  1146  041B                     	;# 
  1147  041B                     	;# 
  1148  041C                     	;# 
  1149  041D                     	;# 
  1150  041E                     	;# 
  1151  041F                     	;# 
  1152  0493                     	;# 
  1153  0494                     	;# 
  1154  0495                     	;# 
  1155  0496                     	;# 
  1156  049A                     	;# 
  1157  049B                     	;# 
  1158  049C                     	;# 
  1159  049D                     	;# 
  1160  058C                     	;# 
  1161  058C                     	;# 
  1162  058D                     	;# 
  1163  058E                     	;# 
  1164  058E                     	;# 
  1165  058F                     	;# 
  1166  0590                     	;# 
  1167  0590                     	;# 
  1168  0591                     	;# 
  1169  0592                     	;# 
  1170  0592                     	;# 
  1171  0593                     	;# 
  1172  0594                     	;# 
  1173  0594                     	;# 
  1174  0595                     	;# 
  1175  0596                     	;# 
  1176  0596                     	;# 
  1177  0597                     	;# 
  1178  0598                     	;# 
  1179  0599                     	;# 
  1180  059A                     	;# 
  1181  059B                     	;# 
  1182  059B                     	;# 
  1183  059C                     	;# 
  1184  059D                     	;# 
  1185  060C                     	;# 
  1186  060C                     	;# 
  1187  060D                     	;# 
  1188  060E                     	;# 
  1189  060F                     	;# 
  1190  060F                     	;# 
  1191  0610                     	;# 
  1192  0611                     	;# 
  1193  0612                     	;# 
  1194  0613                     	;# 
  1195  0614                     	;# 
  1196  0617                     	;# 
  1197  0618                     	;# 
  1198  0619                     	;# 
  1199  061A                     	;# 
  1200  061B                     	;# 
  1201  061C                     	;# 
  1202  0691                     	;# 
  1203  0692                     	;# 
  1204  0693                     	;# 
  1205  0694                     	;# 
  1206  0695                     	;# 
  1207  0696                     	;# 
  1208  0697                     	;# 
  1209  0699                     	;# 
  1210  069A                     	;# 
  1211  0711                     	;# 
  1212  0712                     	;# 
  1213  0713                     	;# 
  1214  0714                     	;# 
  1215  0715                     	;# 
  1216  0718                     	;# 
  1217  0718                     	;# 
  1218  0719                     	;# 
  1219  071A                     	;# 
  1220  071A                     	;# 
  1221  071B                     	;# 
  1222  071C                     	;# 
  1223  071D                     	;# 
  1224  0791                     	;# 
  1225  0791                     	;# 
  1226  0792                     	;# 
  1227  0793                     	;# 
  1228  0793                     	;# 
  1229  0794                     	;# 
  1230  0795                     	;# 
  1231  0795                     	;# 
  1232  0796                     	;# 
  1233  0797                     	;# 
  1234  0797                     	;# 
  1235  0798                     	;# 
  1236  0799                     	;# 
  1237  079A                     	;# 
  1238  080C                     	;# 
  1239  080C                     	;# 
  1240  080D                     	;# 
  1241  080E                     	;# 
  1242  080E                     	;# 
  1243  080F                     	;# 
  1244  0810                     	;# 
  1245  0810                     	;# 
  1246  0811                     	;# 
  1247  0812                     	;# 
  1248  0812                     	;# 
  1249  0813                     	;# 
  1250  0814                     	;# 
  1251  0815                     	;# 
  1252  0816                     	;# 
  1253  0817                     	;# 
  1254  0818                     	;# 
  1255  0819                     	;# 
  1256  081A                     	;# 
  1257  081A                     	;# 
  1258  081B                     	;# 
  1259  081C                     	;# 
  1260  081C                     	;# 
  1261  081D                     	;# 
  1262  088C                     	;# 
  1263  088D                     	;# 
  1264  088E                     	;# 
  1265  088F                     	;# 
  1266  088F                     	;# 
  1267  0890                     	;# 
  1268  0891                     	;# 
  1269  0892                     	;# 
  1270  0893                     	;# 
  1271  0893                     	;# 
  1272  0894                     	;# 
  1273  0895                     	;# 
  1274  0896                     	;# 
  1275  0897                     	;# 
  1276  0897                     	;# 
  1277  0898                     	;# 
  1278  0899                     	;# 
  1279  0D8C                     	;# 
  1280  0D8C                     	;# 
  1281  0D8D                     	;# 
  1282  0D8E                     	;# 
  1283  0D8F                     	;# 
  1284  0D8F                     	;# 
  1285  0D90                     	;# 
  1286  0D91                     	;# 
  1287  0D92                     	;# 
  1288  0D92                     	;# 
  1289  0D93                     	;# 
  1290  0D94                     	;# 
  1291  0D95                     	;# 
  1292  0D95                     	;# 
  1293  0D96                     	;# 
  1294  0D97                     	;# 
  1295  0D98                     	;# 
  1296  0D99                     	;# 
  1297  0D9A                     	;# 
  1298  0D9B                     	;# 
  1299  0D9C                     	;# 
  1300  0D9D                     	;# 
  1301  0D9E                     	;# 
  1302  0D9E                     	;# 
  1303  0D9F                     	;# 
  1304  0DA0                     	;# 
  1305  0DA1                     	;# 
  1306  0DA1                     	;# 
  1307  0DA2                     	;# 
  1308  0DA3                     	;# 
  1309  0DA4                     	;# 
  1310  0DA4                     	;# 
  1311  0DA5                     	;# 
  1312  0DA6                     	;# 
  1313  0DA7                     	;# 
  1314  0DA7                     	;# 
  1315  0DA8                     	;# 
  1316  0DA9                     	;# 
  1317  0DAA                     	;# 
  1318  0DAB                     	;# 
  1319  0DAC                     	;# 
  1320  0DAD                     	;# 
  1321  0DAE                     	;# 
  1322  0DAF                     	;# 
  1323  0E0F                     	;# 
  1324  0E10                     	;# 
  1325  0E11                     	;# 
  1326  0E12                     	;# 
  1327  0E13                     	;# 
  1328  0E14                     	;# 
  1329  0E15                     	;# 
  1330  0E16                     	;# 
  1331  0E17                     	;# 
  1332  0E18                     	;# 
  1333  0E19                     	;# 
  1334  0E1A                     	;# 
  1335  0E1B                     	;# 
  1336  0E1C                     	;# 
  1337  0E1D                     	;# 
  1338  0E1E                     	;# 
  1339  0E1F                     	;# 
  1340  0E20                     	;# 
  1341  0E21                     	;# 
  1342  0E22                     	;# 
  1343  0E23                     	;# 
  1344  0E24                     	;# 
  1345  0E25                     	;# 
  1346  0E26                     	;# 
  1347  0E27                     	;# 
  1348  0E28                     	;# 
  1349  0E29                     	;# 
  1350  0E2A                     	;# 
  1351  0E2B                     	;# 
  1352  0E2C                     	;# 
  1353  0E2D                     	;# 
  1354  0E2E                     	;# 
  1355  0E90                     	;# 
  1356  0E91                     	;# 
  1357  0E92                     	;# 
  1358  0E94                     	;# 
  1359  0E95                     	;# 
  1360  0E9C                     	;# 
  1361  0E9D                     	;# 
  1362  0E9E                     	;# 
  1363  0E9F                     	;# 
  1364  0EA0                     	;# 
  1365  0EA1                     	;# 
  1366  0EA2                     	;# 
  1367  0EA3                     	;# 
  1368  0EA4                     	;# 
  1369  0EA5                     	;# 
  1370  0EA6                     	;# 
  1371  0EA7                     	;# 
  1372  0F0F                     	;# 
  1373  0F10                     	;# 
  1374  0F11                     	;# 
  1375  0F12                     	;# 
  1376  0F13                     	;# 
  1377  0F14                     	;# 
  1378  0F15                     	;# 
  1379  0F16                     	;# 
  1380  0F17                     	;# 
  1381  0F18                     	;# 
  1382  0F19                     	;# 
  1383  0F1A                     	;# 
  1384  0F1B                     	;# 
  1385  0F1C                     	;# 
  1386  0F1D                     	;# 
  1387  0F1E                     	;# 
  1388  0F1F                     	;# 
  1389  0F20                     	;# 
  1390  0F21                     	;# 
  1391  0F22                     	;# 
  1392  0F23                     	;# 
  1393  0F24                     	;# 
  1394  0F25                     	;# 
  1395  0F26                     	;# 
  1396  0F27                     	;# 
  1397  0F28                     	;# 
  1398  0F29                     	;# 
  1399  0F2A                     	;# 
  1400  0F2B                     	;# 
  1401  0F2C                     	;# 
  1402  0F2D                     	;# 
  1403  0F2E                     	;# 
  1404  0F2F                     	;# 
  1405  0F30                     	;# 
  1406  0F31                     	;# 
  1407  0F32                     	;# 
  1408  0F33                     	;# 
  1409  0F34                     	;# 
  1410  0F35                     	;# 
  1411  0F36                     	;# 
  1412  0F37                     	;# 
  1413  0FE4                     	;# 
  1414  0FE5                     	;# 
  1415  0FE6                     	;# 
  1416  0FE7                     	;# 
  1417  0FE8                     	;# 
  1418  0FE9                     	;# 
  1419  0FEA                     	;# 
  1420  0FEB                     	;# 
  1421  0FED                     	;# 
  1422  0FEE                     	;# 
  1423  0FEF                     	;# 
  1424  0000                     	;# 
  1425  0001                     	;# 
  1426  0002                     	;# 
  1427  0003                     	;# 
  1428  0004                     	;# 
  1429  0005                     	;# 
  1430  0006                     	;# 
  1431  0007                     	;# 
  1432  0008                     	;# 
  1433  0009                     	;# 
  1434  000A                     	;# 
  1435  000B                     	;# 
  1436  000C                     	;# 
  1437  000D                     	;# 
  1438  000E                     	;# 
  1439  0010                     	;# 
  1440  0011                     	;# 
  1441  0012                     	;# 
  1442  0013                     	;# 
  1443  0014                     	;# 
  1444  0015                     	;# 
  1445  0016                     	;# 
  1446  0016                     	;# 
  1447  0017                     	;# 
  1448  0018                     	;# 
  1449  0019                     	;# 
  1450  001A                     	;# 
  1451  001A                     	;# 
  1452  001B                     	;# 
  1453  001B                     	;# 
  1454  001C                     	;# 
  1455  001D                     	;# 
  1456  001E                     	;# 
  1457  001F                     	;# 
  1458  008C                     	;# 
  1459  008D                     	;# 
  1460  008E                     	;# 
  1461  0090                     	;# 
  1462  0091                     	;# 
  1463  0092                     	;# 
  1464  0093                     	;# 
  1465  0094                     	;# 
  1466  0095                     	;# 
  1467  0096                     	;# 
  1468  0098                     	;# 
  1469  0099                     	;# 
  1470  009A                     	;# 
  1471  009B                     	;# 
  1472  009B                     	;# 
  1473  009C                     	;# 
  1474  009D                     	;# 
  1475  009E                     	;# 
  1476  009F                     	;# 
  1477  010C                     	;# 
  1478  010D                     	;# 
  1479  010E                     	;# 
  1480  0111                     	;# 
  1481  0112                     	;# 
  1482  0113                     	;# 
  1483  0114                     	;# 
  1484  0115                     	;# 
  1485  0116                     	;# 
  1486  0117                     	;# 
  1487  0118                     	;# 
  1488  0119                     	;# 
  1489  011C                     	;# 
  1490  018C                     	;# 
  1491  018D                     	;# 
  1492  018E                     	;# 
  1493  0191                     	;# 
  1494  0191                     	;# 
  1495  0192                     	;# 
  1496  0193                     	;# 
  1497  0193                     	;# 
  1498  0194                     	;# 
  1499  0195                     	;# 
  1500  0196                     	;# 
  1501  0197                     	;# 
  1502  0199                     	;# 
  1503  0199                     	;# 
  1504  0199                     	;# 
  1505  019A                     	;# 
  1506  019A                     	;# 
  1507  019A                     	;# 
  1508  019B                     	;# 
  1509  019B                     	;# 
  1510  019B                     	;# 
  1511  019B                     	;# 
  1512  019B                     	;# 
  1513  019C                     	;# 
  1514  019C                     	;# 
  1515  019C                     	;# 
  1516  019D                     	;# 
  1517  019D                     	;# 
  1518  019D                     	;# 
  1519  019E                     	;# 
  1520  019E                     	;# 
  1521  019E                     	;# 
  1522  019F                     	;# 
  1523  019F                     	;# 
  1524  019F                     	;# 
  1525  019F                     	;# 
  1526  019F                     	;# 
  1527  020C                     	;# 
  1528  020D                     	;# 
  1529  020E                     	;# 
  1530  0211                     	;# 
  1531  0211                     	;# 
  1532  0212                     	;# 
  1533  0212                     	;# 
  1534  0213                     	;# 
  1535  0213                     	;# 
  1536  0214                     	;# 
  1537  0214                     	;# 
  1538  0215                     	;# 
  1539  0215                     	;# 
  1540  0215                     	;# 
  1541  0215                     	;# 
  1542  0216                     	;# 
  1543  0216                     	;# 
  1544  0217                     	;# 
  1545  0217                     	;# 
  1546  028C                     	;# 
  1547  028D                     	;# 
  1548  028E                     	;# 
  1549  0291                     	;# 
  1550  0291                     	;# 
  1551  0292                     	;# 
  1552  0293                     	;# 
  1553  0294                     	;# 
  1554  0298                     	;# 
  1555  0298                     	;# 
  1556  0299                     	;# 
  1557  029A                     	;# 
  1558  029B                     	;# 
  1559  029E                     	;# 
  1560  030C                     	;# 
  1561  030D                     	;# 
  1562  030E                     	;# 
  1563  038C                     	;# 
  1564  038D                     	;# 
  1565  038E                     	;# 
  1566  0391                     	;# 
  1567  0392                     	;# 
  1568  0393                     	;# 
  1569  0394                     	;# 
  1570  0395                     	;# 
  1571  0396                     	;# 
  1572  0397                     	;# 
  1573  0398                     	;# 
  1574  0399                     	;# 
  1575  040E                     	;# 
  1576  0413                     	;# 
  1577  0413                     	;# 
  1578  0414                     	;# 
  1579  0414                     	;# 
  1580  0415                     	;# 
  1581  0416                     	;# 
  1582  0417                     	;# 
  1583  0418                     	;# 
  1584  041A                     	;# 
  1585  041A                     	;# 
  1586  041B                     	;# 
  1587  041B                     	;# 
  1588  041C                     	;# 
  1589  041D                     	;# 
  1590  041E                     	;# 
  1591  041F                     	;# 
  1592  0493                     	;# 
  1593  0494                     	;# 
  1594  0495                     	;# 
  1595  0496                     	;# 
  1596  049A                     	;# 
  1597  049B                     	;# 
  1598  049C                     	;# 
  1599  049D                     	;# 
  1600  058C                     	;# 
  1601  058C                     	;# 
  1602  058D                     	;# 
  1603  058E                     	;# 
  1604  058E                     	;# 
  1605  058F                     	;# 
  1606  0590                     	;# 
  1607  0590                     	;# 
  1608  0591                     	;# 
  1609  0592                     	;# 
  1610  0592                     	;# 
  1611  0593                     	;# 
  1612  0594                     	;# 
  1613  0594                     	;# 
  1614  0595                     	;# 
  1615  0596                     	;# 
  1616  0596                     	;# 
  1617  0597                     	;# 
  1618  0598                     	;# 
  1619  0599                     	;# 
  1620  059A                     	;# 
  1621  059B                     	;# 
  1622  059B                     	;# 
  1623  059C                     	;# 
  1624  059D                     	;# 
  1625  060C                     	;# 
  1626  060C                     	;# 
  1627  060D                     	;# 
  1628  060E                     	;# 
  1629  060F                     	;# 
  1630  060F                     	;# 
  1631  0610                     	;# 
  1632  0611                     	;# 
  1633  0612                     	;# 
  1634  0613                     	;# 
  1635  0614                     	;# 
  1636  0617                     	;# 
  1637  0618                     	;# 
  1638  0619                     	;# 
  1639  061A                     	;# 
  1640  061B                     	;# 
  1641  061C                     	;# 
  1642  0691                     	;# 
  1643  0692                     	;# 
  1644  0693                     	;# 
  1645  0694                     	;# 
  1646  0695                     	;# 
  1647  0696                     	;# 
  1648  0697                     	;# 
  1649  0699                     	;# 
  1650  069A                     	;# 
  1651  0711                     	;# 
  1652  0712                     	;# 
  1653  0713                     	;# 
  1654  0714                     	;# 
  1655  0715                     	;# 
  1656  0718                     	;# 
  1657  0718                     	;# 
  1658  0719                     	;# 
  1659  071A                     	;# 
  1660  071A                     	;# 
  1661  071B                     	;# 
  1662  071C                     	;# 
  1663  071D                     	;# 
  1664  0791                     	;# 
  1665  0791                     	;# 
  1666  0792                     	;# 
  1667  0793                     	;# 
  1668  0793                     	;# 
  1669  0794                     	;# 
  1670  0795                     	;# 
  1671  0795                     	;# 
  1672  0796                     	;# 
  1673  0797                     	;# 
  1674  0797                     	;# 
  1675  0798                     	;# 
  1676  0799                     	;# 
  1677  079A                     	;# 
  1678  080C                     	;# 
  1679  080C                     	;# 
  1680  080D                     	;# 
  1681  080E                     	;# 
  1682  080E                     	;# 
  1683  080F                     	;# 
  1684  0810                     	;# 
  1685  0810                     	;# 
  1686  0811                     	;# 
  1687  0812                     	;# 
  1688  0812                     	;# 
  1689  0813                     	;# 
  1690  0814                     	;# 
  1691  0815                     	;# 
  1692  0816                     	;# 
  1693  0817                     	;# 
  1694  0818                     	;# 
  1695  0819                     	;# 
  1696  081A                     	;# 
  1697  081A                     	;# 
  1698  081B                     	;# 
  1699  081C                     	;# 
  1700  081C                     	;# 
  1701  081D                     	;# 
  1702  088C                     	;# 
  1703  088D                     	;# 
  1704  088E                     	;# 
  1705  088F                     	;# 
  1706  088F                     	;# 
  1707  0890                     	;# 
  1708  0891                     	;# 
  1709  0892                     	;# 
  1710  0893                     	;# 
  1711  0893                     	;# 
  1712  0894                     	;# 
  1713  0895                     	;# 
  1714  0896                     	;# 
  1715  0897                     	;# 
  1716  0897                     	;# 
  1717  0898                     	;# 
  1718  0899                     	;# 
  1719  0D8C                     	;# 
  1720  0D8C                     	;# 
  1721  0D8D                     	;# 
  1722  0D8E                     	;# 
  1723  0D8F                     	;# 
  1724  0D8F                     	;# 
  1725  0D90                     	;# 
  1726  0D91                     	;# 
  1727  0D92                     	;# 
  1728  0D92                     	;# 
  1729  0D93                     	;# 
  1730  0D94                     	;# 
  1731  0D95                     	;# 
  1732  0D95                     	;# 
  1733  0D96                     	;# 
  1734  0D97                     	;# 
  1735  0D98                     	;# 
  1736  0D99                     	;# 
  1737  0D9A                     	;# 
  1738  0D9B                     	;# 
  1739  0D9C                     	;# 
  1740  0D9D                     	;# 
  1741  0D9E                     	;# 
  1742  0D9E                     	;# 
  1743  0D9F                     	;# 
  1744  0DA0                     	;# 
  1745  0DA1                     	;# 
  1746  0DA1                     	;# 
  1747  0DA2                     	;# 
  1748  0DA3                     	;# 
  1749  0DA4                     	;# 
  1750  0DA4                     	;# 
  1751  0DA5                     	;# 
  1752  0DA6                     	;# 
  1753  0DA7                     	;# 
  1754  0DA7                     	;# 
  1755  0DA8                     	;# 
  1756  0DA9                     	;# 
  1757  0DAA                     	;# 
  1758  0DAB                     	;# 
  1759  0DAC                     	;# 
  1760  0DAD                     	;# 
  1761  0DAE                     	;# 
  1762  0DAF                     	;# 
  1763  0E0F                     	;# 
  1764  0E10                     	;# 
  1765  0E11                     	;# 
  1766  0E12                     	;# 
  1767  0E13                     	;# 
  1768  0E14                     	;# 
  1769  0E15                     	;# 
  1770  0E16                     	;# 
  1771  0E17                     	;# 
  1772  0E18                     	;# 
  1773  0E19                     	;# 
  1774  0E1A                     	;# 
  1775  0E1B                     	;# 
  1776  0E1C                     	;# 
  1777  0E1D                     	;# 
  1778  0E1E                     	;# 
  1779  0E1F                     	;# 
  1780  0E20                     	;# 
  1781  0E21                     	;# 
  1782  0E22                     	;# 
  1783  0E23                     	;# 
  1784  0E24                     	;# 
  1785  0E25                     	;# 
  1786  0E26                     	;# 
  1787  0E27                     	;# 
  1788  0E28                     	;# 
  1789  0E29                     	;# 
  1790  0E2A                     	;# 
  1791  0E2B                     	;# 
  1792  0E2C                     	;# 
  1793  0E2D                     	;# 
  1794  0E2E                     	;# 
  1795  0E90                     	;# 
  1796  0E91                     	;# 
  1797  0E92                     	;# 
  1798  0E94                     	;# 
  1799  0E95                     	;# 
  1800  0E9C                     	;# 
  1801  0E9D                     	;# 
  1802  0E9E                     	;# 
  1803  0E9F                     	;# 
  1804  0EA0                     	;# 
  1805  0EA1                     	;# 
  1806  0EA2                     	;# 
  1807  0EA3                     	;# 
  1808  0EA4                     	;# 
  1809  0EA5                     	;# 
  1810  0EA6                     	;# 
  1811  0EA7                     	;# 
  1812  0F0F                     	;# 
  1813  0F10                     	;# 
  1814  0F11                     	;# 
  1815  0F12                     	;# 
  1816  0F13                     	;# 
  1817  0F14                     	;# 
  1818  0F15                     	;# 
  1819  0F16                     	;# 
  1820  0F17                     	;# 
  1821  0F18                     	;# 
  1822  0F19                     	;# 
  1823  0F1A                     	;# 
  1824  0F1B                     	;# 
  1825  0F1C                     	;# 
  1826  0F1D                     	;# 
  1827  0F1E                     	;# 
  1828  0F1F                     	;# 
  1829  0F20                     	;# 
  1830  0F21                     	;# 
  1831  0F22                     	;# 
  1832  0F23                     	;# 
  1833  0F24                     	;# 
  1834  0F25                     	;# 
  1835  0F26                     	;# 
  1836  0F27                     	;# 
  1837  0F28                     	;# 
  1838  0F29                     	;# 
  1839  0F2A                     	;# 
  1840  0F2B                     	;# 
  1841  0F2C                     	;# 
  1842  0F2D                     	;# 
  1843  0F2E                     	;# 
  1844  0F2F                     	;# 
  1845  0F30                     	;# 
  1846  0F31                     	;# 
  1847  0F32                     	;# 
  1848  0F33                     	;# 
  1849  0F34                     	;# 
  1850  0F35                     	;# 
  1851  0F36                     	;# 
  1852  0F37                     	;# 
  1853  0FE4                     	;# 
  1854  0FE5                     	;# 
  1855  0FE6                     	;# 
  1856  0FE7                     	;# 
  1857  0FE8                     	;# 
  1858  0FE9                     	;# 
  1859  0FEA                     	;# 
  1860  0FEB                     	;# 
  1861  0FED                     	;# 
  1862  0FEE                     	;# 
  1863  0FEF                     	;# 
  1864  0000                     	;# 
  1865  0001                     	;# 
  1866  0002                     	;# 
  1867  0003                     	;# 
  1868  0004                     	;# 
  1869  0005                     	;# 
  1870  0006                     	;# 
  1871  0007                     	;# 
  1872  0008                     	;# 
  1873  0009                     	;# 
  1874  000A                     	;# 
  1875  000B                     	;# 
  1876  000C                     	;# 
  1877  000D                     	;# 
  1878  000E                     	;# 
  1879  0010                     	;# 
  1880  0011                     	;# 
  1881  0012                     	;# 
  1882  0013                     	;# 
  1883  0014                     	;# 
  1884  0015                     	;# 
  1885  0016                     	;# 
  1886  0016                     	;# 
  1887  0017                     	;# 
  1888  0018                     	;# 
  1889  0019                     	;# 
  1890  001A                     	;# 
  1891  001A                     	;# 
  1892  001B                     	;# 
  1893  001B                     	;# 
  1894  001C                     	;# 
  1895  001D                     	;# 
  1896  001E                     	;# 
  1897  001F                     	;# 
  1898  008C                     	;# 
  1899  008D                     	;# 
  1900  008E                     	;# 
  1901  0090                     	;# 
  1902  0091                     	;# 
  1903  0092                     	;# 
  1904  0093                     	;# 
  1905  0094                     	;# 
  1906  0095                     	;# 
  1907  0096                     	;# 
  1908  0098                     	;# 
  1909  0099                     	;# 
  1910  009A                     	;# 
  1911  009B                     	;# 
  1912  009B                     	;# 
  1913  009C                     	;# 
  1914  009D                     	;# 
  1915  009E                     	;# 
  1916  009F                     	;# 
  1917  010C                     	;# 
  1918  010D                     	;# 
  1919  010E                     	;# 
  1920  0111                     	;# 
  1921  0112                     	;# 
  1922  0113                     	;# 
  1923  0114                     	;# 
  1924  0115                     	;# 
  1925  0116                     	;# 
  1926  0117                     	;# 
  1927  0118                     	;# 
  1928  0119                     	;# 
  1929  011C                     	;# 
  1930  018C                     	;# 
  1931  018D                     	;# 
  1932  018E                     	;# 
  1933  0191                     	;# 
  1934  0191                     	;# 
  1935  0192                     	;# 
  1936  0193                     	;# 
  1937  0193                     	;# 
  1938  0194                     	;# 
  1939  0195                     	;# 
  1940  0196                     	;# 
  1941  0197                     	;# 
  1942  0199                     	;# 
  1943  0199                     	;# 
  1944  0199                     	;# 
  1945  019A                     	;# 
  1946  019A                     	;# 
  1947  019A                     	;# 
  1948  019B                     	;# 
  1949  019B                     	;# 
  1950  019B                     	;# 
  1951  019B                     	;# 
  1952  019B                     	;# 
  1953  019C                     	;# 
  1954  019C                     	;# 
  1955  019C                     	;# 
  1956  019D                     	;# 
  1957  019D                     	;# 
  1958  019D                     	;# 
  1959  019E                     	;# 
  1960  019E                     	;# 
  1961  019E                     	;# 
  1962  019F                     	;# 
  1963  019F                     	;# 
  1964  019F                     	;# 
  1965  019F                     	;# 
  1966  019F                     	;# 
  1967  020C                     	;# 
  1968  020D                     	;# 
  1969  020E                     	;# 
  1970  0211                     	;# 
  1971  0211                     	;# 
  1972  0212                     	;# 
  1973  0212                     	;# 
  1974  0213                     	;# 
  1975  0213                     	;# 
  1976  0214                     	;# 
  1977  0214                     	;# 
  1978  0215                     	;# 
  1979  0215                     	;# 
  1980  0215                     	;# 
  1981  0215                     	;# 
  1982  0216                     	;# 
  1983  0216                     	;# 
  1984  0217                     	;# 
  1985  0217                     	;# 
  1986  028C                     	;# 
  1987  028D                     	;# 
  1988  028E                     	;# 
  1989  0291                     	;# 
  1990  0291                     	;# 
  1991  0292                     	;# 
  1992  0293                     	;# 
  1993  0294                     	;# 
  1994  0298                     	;# 
  1995  0298                     	;# 
  1996  0299                     	;# 
  1997  029A                     	;# 
  1998  029B                     	;# 
  1999  029E                     	;# 
  2000  030C                     	;# 
  2001  030D                     	;# 
  2002  030E                     	;# 
  2003  038C                     	;# 
  2004  038D                     	;# 
  2005  038E                     	;# 
  2006  0391                     	;# 
  2007  0392                     	;# 
  2008  0393                     	;# 
  2009  0394                     	;# 
  2010  0395                     	;# 
  2011  0396                     	;# 
  2012  0397                     	;# 
  2013  0398                     	;# 
  2014  0399                     	;# 
  2015  040E                     	;# 
  2016  0413                     	;# 
  2017  0413                     	;# 
  2018  0414                     	;# 
  2019  0414                     	;# 
  2020  0415                     	;# 
  2021  0416                     	;# 
  2022  0417                     	;# 
  2023  0418                     	;# 
  2024  041A                     	;# 
  2025  041A                     	;# 
  2026  041B                     	;# 
  2027  041B                     	;# 
  2028  041C                     	;# 
  2029  041D                     	;# 
  2030  041E                     	;# 
  2031  041F                     	;# 
  2032  0493                     	;# 
  2033  0494                     	;# 
  2034  0495                     	;# 
  2035  0496                     	;# 
  2036  049A                     	;# 
  2037  049B                     	;# 
  2038  049C                     	;# 
  2039  049D                     	;# 
  2040  058C                     	;# 
  2041  058C                     	;# 
  2042  058D                     	;# 
  2043  058E                     	;# 
  2044  058E                     	;# 
  2045  058F                     	;# 
  2046  0590                     	;# 
  2047  0590                     	;# 
  2048  0591                     	;# 
  2049  0592                     	;# 
  2050  0592                     	;# 
  2051  0593                     	;# 
  2052  0594                     	;# 
  2053  0594                     	;# 
  2054  0595                     	;# 
  2055  0596                     	;# 
  2056  0596                     	;# 
  2057  0597                     	;# 
  2058  0598                     	;# 
  2059  0599                     	;# 
  2060  059A                     	;# 
  2061  059B                     	;# 
  2062  059B                     	;# 
  2063  059C                     	;# 
  2064  059D                     	;# 
  2065  060C                     	;# 
  2066  060C                     	;# 
  2067  060D                     	;# 
  2068  060E                     	;# 
  2069  060F                     	;# 
  2070  060F                     	;# 
  2071  0610                     	;# 
  2072  0611                     	;# 
  2073  0612                     	;# 
  2074  0613                     	;# 
  2075  0614                     	;# 
  2076  0617                     	;# 
  2077  0618                     	;# 
  2078  0619                     	;# 
  2079  061A                     	;# 
  2080  061B                     	;# 
  2081  061C                     	;# 
  2082  0691                     	;# 
  2083  0692                     	;# 
  2084  0693                     	;# 
  2085  0694                     	;# 
  2086  0695                     	;# 
  2087  0696                     	;# 
  2088  0697                     	;# 
  2089  0699                     	;# 
  2090  069A                     	;# 
  2091  0711                     	;# 
  2092  0712                     	;# 
  2093  0713                     	;# 
  2094  0714                     	;# 
  2095  0715                     	;# 
  2096  0718                     	;# 
  2097  0718                     	;# 
  2098  0719                     	;# 
  2099  071A                     	;# 
  2100  071A                     	;# 
  2101  071B                     	;# 
  2102  071C                     	;# 
  2103  071D                     	;# 
  2104  0791                     	;# 
  2105  0791                     	;# 
  2106  0792                     	;# 
  2107  0793                     	;# 
  2108  0793                     	;# 
  2109  0794                     	;# 
  2110  0795                     	;# 
  2111  0795                     	;# 
  2112  0796                     	;# 
  2113  0797                     	;# 
  2114  0797                     	;# 
  2115  0798                     	;# 
  2116  0799                     	;# 
  2117  079A                     	;# 
  2118  080C                     	;# 
  2119  080C                     	;# 
  2120  080D                     	;# 
  2121  080E                     	;# 
  2122  080E                     	;# 
  2123  080F                     	;# 
  2124  0810                     	;# 
  2125  0810                     	;# 
  2126  0811                     	;# 
  2127  0812                     	;# 
  2128  0812                     	;# 
  2129  0813                     	;# 
  2130  0814                     	;# 
  2131  0815                     	;# 
  2132  0816                     	;# 
  2133  0817                     	;# 
  2134  0818                     	;# 
  2135  0819                     	;# 
  2136  081A                     	;# 
  2137  081A                     	;# 
  2138  081B                     	;# 
  2139  081C                     	;# 
  2140  081C                     	;# 
  2141  081D                     	;# 
  2142  088C                     	;# 
  2143  088D                     	;# 
  2144  088E                     	;# 
  2145  088F                     	;# 
  2146  088F                     	;# 
  2147  0890                     	;# 
  2148  0891                     	;# 
  2149  0892                     	;# 
  2150  0893                     	;# 
  2151  0893                     	;# 
  2152  0894                     	;# 
  2153  0895                     	;# 
  2154  0896                     	;# 
  2155  0897                     	;# 
  2156  0897                     	;# 
  2157  0898                     	;# 
  2158  0899                     	;# 
  2159  0D8C                     	;# 
  2160  0D8C                     	;# 
  2161  0D8D                     	;# 
  2162  0D8E                     	;# 
  2163  0D8F                     	;# 
  2164  0D8F                     	;# 
  2165  0D90                     	;# 
  2166  0D91                     	;# 
  2167  0D92                     	;# 
  2168  0D92                     	;# 
  2169  0D93                     	;# 
  2170  0D94                     	;# 
  2171  0D95                     	;# 
  2172  0D95                     	;# 
  2173  0D96                     	;# 
  2174  0D97                     	;# 
  2175  0D98                     	;# 
  2176  0D99                     	;# 
  2177  0D9A                     	;# 
  2178  0D9B                     	;# 
  2179  0D9C                     	;# 
  2180  0D9D                     	;# 
  2181  0D9E                     	;# 
  2182  0D9E                     	;# 
  2183  0D9F                     	;# 
  2184  0DA0                     	;# 
  2185  0DA1                     	;# 
  2186  0DA1                     	;# 
  2187  0DA2                     	;# 
  2188  0DA3                     	;# 
  2189  0DA4                     	;# 
  2190  0DA4                     	;# 
  2191  0DA5                     	;# 
  2192  0DA6                     	;# 
  2193  0DA7                     	;# 
  2194  0DA7                     	;# 
  2195  0DA8                     	;# 
  2196  0DA9                     	;# 
  2197  0DAA                     	;# 
  2198  0DAB                     	;# 
  2199  0DAC                     	;# 
  2200  0DAD                     	;# 
  2201  0DAE                     	;# 
  2202  0DAF                     	;# 
  2203  0E0F                     	;# 
  2204  0E10                     	;# 
  2205  0E11                     	;# 
  2206  0E12                     	;# 
  2207  0E13                     	;# 
  2208  0E14                     	;# 
  2209  0E15                     	;# 
  2210  0E16                     	;# 
  2211  0E17                     	;# 
  2212  0E18                     	;# 
  2213  0E19                     	;# 
  2214  0E1A                     	;# 
  2215  0E1B                     	;# 
  2216  0E1C                     	;# 
  2217  0E1D                     	;# 
  2218  0E1E                     	;# 
  2219  0E1F                     	;# 
  2220  0E20                     	;# 
  2221  0E21                     	;# 
  2222  0E22                     	;# 
  2223  0E23                     	;# 
  2224  0E24                     	;# 
  2225  0E25                     	;# 
  2226  0E26                     	;# 
  2227  0E27                     	;# 
  2228  0E28                     	;# 
  2229  0E29                     	;# 
  2230  0E2A                     	;# 
  2231  0E2B                     	;# 
  2232  0E2C                     	;# 
  2233  0E2D                     	;# 
  2234  0E2E                     	;# 
  2235  0E90                     	;# 
  2236  0E91                     	;# 
  2237  0E92                     	;# 
  2238  0E94                     	;# 
  2239  0E95                     	;# 
  2240  0E9C                     	;# 
  2241  0E9D                     	;# 
  2242  0E9E                     	;# 
  2243  0E9F                     	;# 
  2244  0EA0                     	;# 
  2245  0EA1                     	;# 
  2246  0EA2                     	;# 
  2247  0EA3                     	;# 
  2248  0EA4                     	;# 
  2249  0EA5                     	;# 
  2250  0EA6                     	;# 
  2251  0EA7                     	;# 
  2252  0F0F                     	;# 
  2253  0F10                     	;# 
  2254  0F11                     	;# 
  2255  0F12                     	;# 
  2256  0F13                     	;# 
  2257  0F14                     	;# 
  2258  0F15                     	;# 
  2259  0F16                     	;# 
  2260  0F17                     	;# 
  2261  0F18                     	;# 
  2262  0F19                     	;# 
  2263  0F1A                     	;# 
  2264  0F1B                     	;# 
  2265  0F1C                     	;# 
  2266  0F1D                     	;# 
  2267  0F1E                     	;# 
  2268  0F1F                     	;# 
  2269  0F20                     	;# 
  2270  0F21                     	;# 
  2271  0F22                     	;# 
  2272  0F23                     	;# 
  2273  0F24                     	;# 
  2274  0F25                     	;# 
  2275  0F26                     	;# 
  2276  0F27                     	;# 
  2277  0F28                     	;# 
  2278  0F29                     	;# 
  2279  0F2A                     	;# 
  2280  0F2B                     	;# 
  2281  0F2C                     	;# 
  2282  0F2D                     	;# 
  2283  0F2E                     	;# 
  2284  0F2F                     	;# 
  2285  0F30                     	;# 
  2286  0F31                     	;# 
  2287  0F32                     	;# 
  2288  0F33                     	;# 
  2289  0F34                     	;# 
  2290  0F35                     	;# 
  2291  0F36                     	;# 
  2292  0F37                     	;# 
  2293  0FE4                     	;# 
  2294  0FE5                     	;# 
  2295  0FE6                     	;# 
  2296  0FE7                     	;# 
  2297  0FE8                     	;# 
  2298  0FE9                     	;# 
  2299  0FEA                     	;# 
  2300  0FEB                     	;# 
  2301  0FED                     	;# 
  2302  0FEE                     	;# 
  2303  0FEF                     	;# 
  2304  0000                     	;# 
  2305  0001                     	;# 
  2306  0002                     	;# 
  2307  0003                     	;# 
  2308  0004                     	;# 
  2309  0005                     	;# 
  2310  0006                     	;# 
  2311  0007                     	;# 
  2312  0008                     	;# 
  2313  0009                     	;# 
  2314  000A                     	;# 
  2315  000B                     	;# 
  2316  000C                     	;# 
  2317  000D                     	;# 
  2318  000E                     	;# 
  2319  0010                     	;# 
  2320  0011                     	;# 
  2321  0012                     	;# 
  2322  0013                     	;# 
  2323  0014                     	;# 
  2324  0015                     	;# 
  2325  0016                     	;# 
  2326  0016                     	;# 
  2327  0017                     	;# 
  2328  0018                     	;# 
  2329  0019                     	;# 
  2330  001A                     	;# 
  2331  001A                     	;# 
  2332  001B                     	;# 
  2333  001B                     	;# 
  2334  001C                     	;# 
  2335  001D                     	;# 
  2336  001E                     	;# 
  2337  001F                     	;# 
  2338  008C                     	;# 
  2339  008D                     	;# 
  2340  008E                     	;# 
  2341  0090                     	;# 
  2342  0091                     	;# 
  2343  0092                     	;# 
  2344  0093                     	;# 
  2345  0094                     	;# 
  2346  0095                     	;# 
  2347  0096                     	;# 
  2348  0098                     	;# 
  2349  0099                     	;# 
  2350  009A                     	;# 
  2351  009B                     	;# 
  2352  009B                     	;# 
  2353  009C                     	;# 
  2354  009D                     	;# 
  2355  009E                     	;# 
  2356  009F                     	;# 
  2357  010C                     	;# 
  2358  010D                     	;# 
  2359  010E                     	;# 
  2360  0111                     	;# 
  2361  0112                     	;# 
  2362  0113                     	;# 
  2363  0114                     	;# 
  2364  0115                     	;# 
  2365  0116                     	;# 
  2366  0117                     	;# 
  2367  0118                     	;# 
  2368  0119                     	;# 
  2369  011C                     	;# 
  2370  018C                     	;# 
  2371  018D                     	;# 
  2372  018E                     	;# 
  2373  0191                     	;# 
  2374  0191                     	;# 
  2375  0192                     	;# 
  2376  0193                     	;# 
  2377  0193                     	;# 
  2378  0194                     	;# 
  2379  0195                     	;# 
  2380  0196                     	;# 
  2381  0197                     	;# 
  2382  0199                     	;# 
  2383  0199                     	;# 
  2384  0199                     	;# 
  2385  019A                     	;# 
  2386  019A                     	;# 
  2387  019A                     	;# 
  2388  019B                     	;# 
  2389  019B                     	;# 
  2390  019B                     	;# 
  2391  019B                     	;# 
  2392  019B                     	;# 
  2393  019C                     	;# 
  2394  019C                     	;# 
  2395  019C                     	;# 
  2396  019D                     	;# 
  2397  019D                     	;# 
  2398  019D                     	;# 
  2399  019E                     	;# 
  2400  019E                     	;# 
  2401  019E                     	;# 
  2402  019F                     	;# 
  2403  019F                     	;# 
  2404  019F                     	;# 
  2405  019F                     	;# 
  2406  019F                     	;# 
  2407  020C                     	;# 
  2408  020D                     	;# 
  2409  020E                     	;# 
  2410  0211                     	;# 
  2411  0211                     	;# 
  2412  0212                     	;# 
  2413  0212                     	;# 
  2414  0213                     	;# 
  2415  0213                     	;# 
  2416  0214                     	;# 
  2417  0214                     	;# 
  2418  0215                     	;# 
  2419  0215                     	;# 
  2420  0215                     	;# 
  2421  0215                     	;# 
  2422  0216                     	;# 
  2423  0216                     	;# 
  2424  0217                     	;# 
  2425  0217                     	;# 
  2426  028C                     	;# 
  2427  028D                     	;# 
  2428  028E                     	;# 
  2429  0291                     	;# 
  2430  0291                     	;# 
  2431  0292                     	;# 
  2432  0293                     	;# 
  2433  0294                     	;# 
  2434  0298                     	;# 
  2435  0298                     	;# 
  2436  0299                     	;# 
  2437  029A                     	;# 
  2438  029B                     	;# 
  2439  029E                     	;# 
  2440  030C                     	;# 
  2441  030D                     	;# 
  2442  030E                     	;# 
  2443  038C                     	;# 
  2444  038D                     	;# 
  2445  038E                     	;# 
  2446  0391                     	;# 
  2447  0392                     	;# 
  2448  0393                     	;# 
  2449  0394                     	;# 
  2450  0395                     	;# 
  2451  0396                     	;# 
  2452  0397                     	;# 
  2453  0398                     	;# 
  2454  0399                     	;# 
  2455  040E                     	;# 
  2456  0413                     	;# 
  2457  0413                     	;# 
  2458  0414                     	;# 
  2459  0414                     	;# 
  2460  0415                     	;# 
  2461  0416                     	;# 
  2462  0417                     	;# 
  2463  0418                     	;# 
  2464  041A                     	;# 
  2465  041A                     	;# 
  2466  041B                     	;# 
  2467  041B                     	;# 
  2468  041C                     	;# 
  2469  041D                     	;# 
  2470  041E                     	;# 
  2471  041F                     	;# 
  2472  0493                     	;# 
  2473  0494                     	;# 
  2474  0495                     	;# 
  2475  0496                     	;# 
  2476  049A                     	;# 
  2477  049B                     	;# 
  2478  049C                     	;# 
  2479  049D                     	;# 
  2480  058C                     	;# 
  2481  058C                     	;# 
  2482  058D                     	;# 
  2483  058E                     	;# 
  2484  058E                     	;# 
  2485  058F                     	;# 
  2486  0590                     	;# 
  2487  0590                     	;# 
  2488  0591                     	;# 
  2489  0592                     	;# 
  2490  0592                     	;# 
  2491  0593                     	;# 
  2492  0594                     	;# 
  2493  0594                     	;# 
  2494  0595                     	;# 
  2495  0596                     	;# 
  2496  0596                     	;# 
  2497  0597                     	;# 
  2498  0598                     	;# 
  2499  0599                     	;# 
  2500  059A                     	;# 
  2501  059B                     	;# 
  2502  059B                     	;# 
  2503  059C                     	;# 
  2504  059D                     	;# 
  2505  060C                     	;# 
  2506  060C                     	;# 
  2507  060D                     	;# 
  2508  060E                     	;# 
  2509  060F                     	;# 
  2510  060F                     	;# 
  2511  0610                     	;# 
  2512  0611                     	;# 
  2513  0612                     	;# 
  2514  0613                     	;# 
  2515  0614                     	;# 
  2516  0617                     	;# 
  2517  0618                     	;# 
  2518  0619                     	;# 
  2519  061A                     	;# 
  2520  061B                     	;# 
  2521  061C                     	;# 
  2522  0691                     	;# 
  2523  0692                     	;# 
  2524  0693                     	;# 
  2525  0694                     	;# 
  2526  0695                     	;# 
  2527  0696                     	;# 
  2528  0697                     	;# 
  2529  0699                     	;# 
  2530  069A                     	;# 
  2531  0711                     	;# 
  2532  0712                     	;# 
  2533  0713                     	;# 
  2534  0714                     	;# 
  2535  0715                     	;# 
  2536  0718                     	;# 
  2537  0718                     	;# 
  2538  0719                     	;# 
  2539  071A                     	;# 
  2540  071A                     	;# 
  2541  071B                     	;# 
  2542  071C                     	;# 
  2543  071D                     	;# 
  2544  0791                     	;# 
  2545  0791                     	;# 
  2546  0792                     	;# 
  2547  0793                     	;# 
  2548  0793                     	;# 
  2549  0794                     	;# 
  2550  0795                     	;# 
  2551  0795                     	;# 
  2552  0796                     	;# 
  2553  0797                     	;# 
  2554  0797                     	;# 
  2555  0798                     	;# 
  2556  0799                     	;# 
  2557  079A                     	;# 
  2558  080C                     	;# 
  2559  080C                     	;# 
  2560  080D                     	;# 
  2561  080E                     	;# 
  2562  080E                     	;# 
  2563  080F                     	;# 
  2564  0810                     	;# 
  2565  0810                     	;# 
  2566  0811                     	;# 
  2567  0812                     	;# 
  2568  0812                     	;# 
  2569  0813                     	;# 
  2570  0814                     	;# 
  2571  0815                     	;# 
  2572  0816                     	;# 
  2573  0817                     	;# 
  2574  0818                     	;# 
  2575  0819                     	;# 
  2576  081A                     	;# 
  2577  081A                     	;# 
  2578  081B                     	;# 
  2579  081C                     	;# 
  2580  081C                     	;# 
  2581  081D                     	;# 
  2582  088C                     	;# 
  2583  088D                     	;# 
  2584  088E                     	;# 
  2585  088F                     	;# 
  2586  088F                     	;# 
  2587  0890                     	;# 
  2588  0891                     	;# 
  2589  0892                     	;# 
  2590  0893                     	;# 
  2591  0893                     	;# 
  2592  0894                     	;# 
  2593  0895                     	;# 
  2594  0896                     	;# 
  2595  0897                     	;# 
  2596  0897                     	;# 
  2597  0898                     	;# 
  2598  0899                     	;# 
  2599  0D8C                     	;# 
  2600  0D8C                     	;# 
  2601  0D8D                     	;# 
  2602  0D8E                     	;# 
  2603  0D8F                     	;# 
  2604  0D8F                     	;# 
  2605  0D90                     	;# 
  2606  0D91                     	;# 
  2607  0D92                     	;# 
  2608  0D92                     	;# 
  2609  0D93                     	;# 
  2610  0D94                     	;# 
  2611  0D95                     	;# 
  2612  0D95                     	;# 
  2613  0D96                     	;# 
  2614  0D97                     	;# 
  2615  0D98                     	;# 
  2616  0D99                     	;# 
  2617  0D9A                     	;# 
  2618  0D9B                     	;# 
  2619  0D9C                     	;# 
  2620  0D9D                     	;# 
  2621  0D9E                     	;# 
  2622  0D9E                     	;# 
  2623  0D9F                     	;# 
  2624  0DA0                     	;# 
  2625  0DA1                     	;# 
  2626  0DA1                     	;# 
  2627  0DA2                     	;# 
  2628  0DA3                     	;# 
  2629  0DA4                     	;# 
  2630  0DA4                     	;# 
  2631  0DA5                     	;# 
  2632  0DA6                     	;# 
  2633  0DA7                     	;# 
  2634  0DA7                     	;# 
  2635  0DA8                     	;# 
  2636  0DA9                     	;# 
  2637  0DAA                     	;# 
  2638  0DAB                     	;# 
  2639  0DAC                     	;# 
  2640  0DAD                     	;# 
  2641  0DAE                     	;# 
  2642  0DAF                     	;# 
  2643  0E0F                     	;# 
  2644  0E10                     	;# 
  2645  0E11                     	;# 
  2646  0E12                     	;# 
  2647  0E13                     	;# 
  2648  0E14                     	;# 
  2649  0E15                     	;# 
  2650  0E16                     	;# 
  2651  0E17                     	;# 
  2652  0E18                     	;# 
  2653  0E19                     	;# 
  2654  0E1A                     	;# 
  2655  0E1B                     	;# 
  2656  0E1C                     	;# 
  2657  0E1D                     	;# 
  2658  0E1E                     	;# 
  2659  0E1F                     	;# 
  2660  0E20                     	;# 
  2661  0E21                     	;# 
  2662  0E22                     	;# 
  2663  0E23                     	;# 
  2664  0E24                     	;# 
  2665  0E25                     	;# 
  2666  0E26                     	;# 
  2667  0E27                     	;# 
  2668  0E28                     	;# 
  2669  0E29                     	;# 
  2670  0E2A                     	;# 
  2671  0E2B                     	;# 
  2672  0E2C                     	;# 
  2673  0E2D                     	;# 
  2674  0E2E                     	;# 
  2675  0E90                     	;# 
  2676  0E91                     	;# 
  2677  0E92                     	;# 
  2678  0E94                     	;# 
  2679  0E95                     	;# 
  2680  0E9C                     	;# 
  2681  0E9D                     	;# 
  2682  0E9E                     	;# 
  2683  0E9F                     	;# 
  2684  0EA0                     	;# 
  2685  0EA1                     	;# 
  2686  0EA2                     	;# 
  2687  0EA3                     	;# 
  2688  0EA4                     	;# 
  2689  0EA5                     	;# 
  2690  0EA6                     	;# 
  2691  0EA7                     	;# 
  2692  0F0F                     	;# 
  2693  0F10                     	;# 
  2694  0F11                     	;# 
  2695  0F12                     	;# 
  2696  0F13                     	;# 
  2697  0F14                     	;# 
  2698  0F15                     	;# 
  2699  0F16                     	;# 
  2700  0F17                     	;# 
  2701  0F18                     	;# 
  2702  0F19                     	;# 
  2703  0F1A                     	;# 
  2704  0F1B                     	;# 
  2705  0F1C                     	;# 
  2706  0F1D                     	;# 
  2707  0F1E                     	;# 
  2708  0F1F                     	;# 
  2709  0F20                     	;# 
  2710  0F21                     	;# 
  2711  0F22                     	;# 
  2712  0F23                     	;# 
  2713  0F24                     	;# 
  2714  0F25                     	;# 
  2715  0F26                     	;# 
  2716  0F27                     	;# 
  2717  0F28                     	;# 
  2718  0F29                     	;# 
  2719  0F2A                     	;# 
  2720  0F2B                     	;# 
  2721  0F2C                     	;# 
  2722  0F2D                     	;# 
  2723  0F2E                     	;# 
  2724  0F2F                     	;# 
  2725  0F30                     	;# 
  2726  0F31                     	;# 
  2727  0F32                     	;# 
  2728  0F33                     	;# 
  2729  0F34                     	;# 
  2730  0F35                     	;# 
  2731  0F36                     	;# 
  2732  0F37                     	;# 
  2733  0FE4                     	;# 
  2734  0FE5                     	;# 
  2735  0FE6                     	;# 
  2736  0FE7                     	;# 
  2737  0FE8                     	;# 
  2738  0FE9                     	;# 
  2739  0FEA                     	;# 
  2740  0FEB                     	;# 
  2741  0FED                     	;# 
  2742  0FEE                     	;# 
  2743  0FEF                     	;# 
  2744  0000                     	;# 
  2745  0001                     	;# 
  2746  0002                     	;# 
  2747  0003                     	;# 
  2748  0004                     	;# 
  2749  0005                     	;# 
  2750  0006                     	;# 
  2751  0007                     	;# 
  2752  0008                     	;# 
  2753  0009                     	;# 
  2754  000A                     	;# 
  2755  000B                     	;# 
  2756  000C                     	;# 
  2757  000D                     	;# 
  2758  000E                     	;# 
  2759  0010                     	;# 
  2760  0011                     	;# 
  2761  0012                     	;# 
  2762  0013                     	;# 
  2763  0014                     	;# 
  2764  0015                     	;# 
  2765  0016                     	;# 
  2766  0016                     	;# 
  2767  0017                     	;# 
  2768  0018                     	;# 
  2769  0019                     	;# 
  2770  001A                     	;# 
  2771  001A                     	;# 
  2772  001B                     	;# 
  2773  001B                     	;# 
  2774  001C                     	;# 
  2775  001D                     	;# 
  2776  001E                     	;# 
  2777  001F                     	;# 
  2778  008C                     	;# 
  2779  008D                     	;# 
  2780  008E                     	;# 
  2781  0090                     	;# 
  2782  0091                     	;# 
  2783  0092                     	;# 
  2784  0093                     	;# 
  2785  0094                     	;# 
  2786  0095                     	;# 
  2787  0096                     	;# 
  2788  0098                     	;# 
  2789  0099                     	;# 
  2790  009A                     	;# 
  2791  009B                     	;# 
  2792  009B                     	;# 
  2793  009C                     	;# 
  2794  009D                     	;# 
  2795  009E                     	;# 
  2796  009F                     	;# 
  2797  010C                     	;# 
  2798  010D                     	;# 
  2799  010E                     	;# 
  2800  0111                     	;# 
  2801  0112                     	;# 
  2802  0113                     	;# 
  2803  0114                     	;# 
  2804  0115                     	;# 
  2805  0116                     	;# 
  2806  0117                     	;# 
  2807  0118                     	;# 
  2808  0119                     	;# 
  2809  011C                     	;# 
  2810  018C                     	;# 
  2811  018D                     	;# 
  2812  018E                     	;# 
  2813  0191                     	;# 
  2814  0191                     	;# 
  2815  0192                     	;# 
  2816  0193                     	;# 
  2817  0193                     	;# 
  2818  0194                     	;# 
  2819  0195                     	;# 
  2820  0196                     	;# 
  2821  0197                     	;# 
  2822  0199                     	;# 
  2823  0199                     	;# 
  2824  0199                     	;# 
  2825  019A                     	;# 
  2826  019A                     	;# 
  2827  019A                     	;# 
  2828  019B                     	;# 
  2829  019B                     	;# 
  2830  019B                     	;# 
  2831  019B                     	;# 
  2832  019B                     	;# 
  2833  019C                     	;# 
  2834  019C                     	;# 
  2835  019C                     	;# 
  2836  019D                     	;# 
  2837  019D                     	;# 
  2838  019D                     	;# 
  2839  019E                     	;# 
  2840  019E                     	;# 
  2841  019E                     	;# 
  2842  019F                     	;# 
  2843  019F                     	;# 
  2844  019F                     	;# 
  2845  019F                     	;# 
  2846  019F                     	;# 
  2847  020C                     	;# 
  2848  020D                     	;# 
  2849  020E                     	;# 
  2850  0211                     	;# 
  2851  0211                     	;# 
  2852  0212                     	;# 
  2853  0212                     	;# 
  2854  0213                     	;# 
  2855  0213                     	;# 
  2856  0214                     	;# 
  2857  0214                     	;# 
  2858  0215                     	;# 
  2859  0215                     	;# 
  2860  0215                     	;# 
  2861  0215                     	;# 
  2862  0216                     	;# 
  2863  0216                     	;# 
  2864  0217                     	;# 
  2865  0217                     	;# 
  2866  028C                     	;# 
  2867  028D                     	;# 
  2868  028E                     	;# 
  2869  0291                     	;# 
  2870  0291                     	;# 
  2871  0292                     	;# 
  2872  0293                     	;# 
  2873  0294                     	;# 
  2874  0298                     	;# 
  2875  0298                     	;# 
  2876  0299                     	;# 
  2877  029A                     	;# 
  2878  029B                     	;# 
  2879  029E                     	;# 
  2880  030C                     	;# 
  2881  030D                     	;# 
  2882  030E                     	;# 
  2883  038C                     	;# 
  2884  038D                     	;# 
  2885  038E                     	;# 
  2886  0391                     	;# 
  2887  0392                     	;# 
  2888  0393                     	;# 
  2889  0394                     	;# 
  2890  0395                     	;# 
  2891  0396                     	;# 
  2892  0397                     	;# 
  2893  0398                     	;# 
  2894  0399                     	;# 
  2895  040E                     	;# 
  2896  0413                     	;# 
  2897  0413                     	;# 
  2898  0414                     	;# 
  2899  0414                     	;# 
  2900  0415                     	;# 
  2901  0416                     	;# 
  2902  0417                     	;# 
  2903  0418                     	;# 
  2904  041A                     	;# 
  2905  041A                     	;# 
  2906  041B                     	;# 
  2907  041B                     	;# 
  2908  041C                     	;# 
  2909  041D                     	;# 
  2910  041E                     	;# 
  2911  041F                     	;# 
  2912  0493                     	;# 
  2913  0494                     	;# 
  2914  0495                     	;# 
  2915  0496                     	;# 
  2916  049A                     	;# 
  2917  049B                     	;# 
  2918  049C                     	;# 
  2919  049D                     	;# 
  2920  058C                     	;# 
  2921  058C                     	;# 
  2922  058D                     	;# 
  2923  058E                     	;# 
  2924  058E                     	;# 
  2925  058F                     	;# 
  2926  0590                     	;# 
  2927  0590                     	;# 
  2928  0591                     	;# 
  2929  0592                     	;# 
  2930  0592                     	;# 
  2931  0593                     	;# 
  2932  0594                     	;# 
  2933  0594                     	;# 
  2934  0595                     	;# 
  2935  0596                     	;# 
  2936  0596                     	;# 
  2937  0597                     	;# 
  2938  0598                     	;# 
  2939  0599                     	;# 
  2940  059A                     	;# 
  2941  059B                     	;# 
  2942  059B                     	;# 
  2943  059C                     	;# 
  2944  059D                     	;# 
  2945  060C                     	;# 
  2946  060C                     	;# 
  2947  060D                     	;# 
  2948  060E                     	;# 
  2949  060F                     	;# 
  2950  060F                     	;# 
  2951  0610                     	;# 
  2952  0611                     	;# 
  2953  0612                     	;# 
  2954  0613                     	;# 
  2955  0614                     	;# 
  2956  0617                     	;# 
  2957  0618                     	;# 
  2958  0619                     	;# 
  2959  061A                     	;# 
  2960  061B                     	;# 
  2961  061C                     	;# 
  2962  0691                     	;# 
  2963  0692                     	;# 
  2964  0693                     	;# 
  2965  0694                     	;# 
  2966  0695                     	;# 
  2967  0696                     	;# 
  2968  0697                     	;# 
  2969  0699                     	;# 
  2970  069A                     	;# 
  2971  0711                     	;# 
  2972  0712                     	;# 
  2973  0713                     	;# 
  2974  0714                     	;# 
  2975  0715                     	;# 
  2976  0718                     	;# 
  2977  0718                     	;# 
  2978  0719                     	;# 
  2979  071A                     	;# 
  2980  071A                     	;# 
  2981  071B                     	;# 
  2982  071C                     	;# 
  2983  071D                     	;# 
  2984  0791                     	;# 
  2985  0791                     	;# 
  2986  0792                     	;# 
  2987  0793                     	;# 
  2988  0793                     	;# 
  2989  0794                     	;# 
  2990  0795                     	;# 
  2991  0795                     	;# 
  2992  0796                     	;# 
  2993  0797                     	;# 
  2994  0797                     	;# 
  2995  0798                     	;# 
  2996  0799                     	;# 
  2997  079A                     	;# 
  2998  080C                     	;# 
  2999  080C                     	;# 
  3000  080D                     	;# 
  3001  080E                     	;# 
  3002  080E                     	;# 
  3003  080F                     	;# 
  3004  0810                     	;# 
  3005  0810                     	;# 
  3006  0811                     	;# 
  3007  0812                     	;# 
  3008  0812                     	;# 
  3009  0813                     	;# 
  3010  0814                     	;# 
  3011  0815                     	;# 
  3012  0816                     	;# 
  3013  0817                     	;# 
  3014  0818                     	;# 
  3015  0819                     	;# 
  3016  081A                     	;# 
  3017  081A                     	;# 
  3018  081B                     	;# 
  3019  081C                     	;# 
  3020  081C                     	;# 
  3021  081D                     	;# 
  3022  088C                     	;# 
  3023  088D                     	;# 
  3024  088E                     	;# 
  3025  088F                     	;# 
  3026  088F                     	;# 
  3027  0890                     	;# 
  3028  0891                     	;# 
  3029  0892                     	;# 
  3030  0893                     	;# 
  3031  0893                     	;# 
  3032  0894                     	;# 
  3033  0895                     	;# 
  3034  0896                     	;# 
  3035  0897                     	;# 
  3036  0897                     	;# 
  3037  0898                     	;# 
  3038  0899                     	;# 
  3039  0D8C                     	;# 
  3040  0D8C                     	;# 
  3041  0D8D                     	;# 
  3042  0D8E                     	;# 
  3043  0D8F                     	;# 
  3044  0D8F                     	;# 
  3045  0D90                     	;# 
  3046  0D91                     	;# 
  3047  0D92                     	;# 
  3048  0D92                     	;# 
  3049  0D93                     	;# 
  3050  0D94                     	;# 
  3051  0D95                     	;# 
  3052  0D95                     	;# 
  3053  0D96                     	;# 
  3054  0D97                     	;# 
  3055  0D98                     	;# 
  3056  0D99                     	;# 
  3057  0D9A                     	;# 
  3058  0D9B                     	;# 
  3059  0D9C                     	;# 
  3060  0D9D                     	;# 
  3061  0D9E                     	;# 
  3062  0D9E                     	;# 
  3063  0D9F                     	;# 
  3064  0DA0                     	;# 
  3065  0DA1                     	;# 
  3066  0DA1                     	;# 
  3067  0DA2                     	;# 
  3068  0DA3                     	;# 
  3069  0DA4                     	;# 
  3070  0DA4                     	;# 
  3071  0DA5                     	;# 
  3072  0DA6                     	;# 
  3073  0DA7                     	;# 
  3074  0DA7                     	;# 
  3075  0DA8                     	;# 
  3076  0DA9                     	;# 
  3077  0DAA                     	;# 
  3078  0DAB                     	;# 
  3079  0DAC                     	;# 
  3080  0DAD                     	;# 
  3081  0DAE                     	;# 
  3082  0DAF                     	;# 
  3083  0E0F                     	;# 
  3084  0E10                     	;# 
  3085  0E11                     	;# 
  3086  0E12                     	;# 
  3087  0E13                     	;# 
  3088  0E14                     	;# 
  3089  0E15                     	;# 
  3090  0E16                     	;# 
  3091  0E17                     	;# 
  3092  0E18                     	;# 
  3093  0E19                     	;# 
  3094  0E1A                     	;# 
  3095  0E1B                     	;# 
  3096  0E1C                     	;# 
  3097  0E1D                     	;# 
  3098  0E1E                     	;# 
  3099  0E1F                     	;# 
  3100  0E20                     	;# 
  3101  0E21                     	;# 
  3102  0E22                     	;# 
  3103  0E23                     	;# 
  3104  0E24                     	;# 
  3105  0E25                     	;# 
  3106  0E26                     	;# 
  3107  0E27                     	;# 
  3108  0E28                     	;# 
  3109  0E29                     	;# 
  3110  0E2A                     	;# 
  3111  0E2B                     	;# 
  3112  0E2C                     	;# 
  3113  0E2D                     	;# 
  3114  0E2E                     	;# 
  3115  0E90                     	;# 
  3116  0E91                     	;# 
  3117  0E92                     	;# 
  3118  0E94                     	;# 
  3119  0E95                     	;# 
  3120  0E9C                     	;# 
  3121  0E9D                     	;# 
  3122  0E9E                     	;# 
  3123  0E9F                     	;# 
  3124  0EA0                     	;# 
  3125  0EA1                     	;# 
  3126  0EA2                     	;# 
  3127  0EA3                     	;# 
  3128  0EA4                     	;# 
  3129  0EA5                     	;# 
  3130  0EA6                     	;# 
  3131  0EA7                     	;# 
  3132  0F0F                     	;# 
  3133  0F10                     	;# 
  3134  0F11                     	;# 
  3135  0F12                     	;# 
  3136  0F13                     	;# 
  3137  0F14                     	;# 
  3138  0F15                     	;# 
  3139  0F16                     	;# 
  3140  0F17                     	;# 
  3141  0F18                     	;# 
  3142  0F19                     	;# 
  3143  0F1A                     	;# 
  3144  0F1B                     	;# 
  3145  0F1C                     	;# 
  3146  0F1D                     	;# 
  3147  0F1E                     	;# 
  3148  0F1F                     	;# 
  3149  0F20                     	;# 
  3150  0F21                     	;# 
  3151  0F22                     	;# 
  3152  0F23                     	;# 
  3153  0F24                     	;# 
  3154  0F25                     	;# 
  3155  0F26                     	;# 
  3156  0F27                     	;# 
  3157  0F28                     	;# 
  3158  0F29                     	;# 
  3159  0F2A                     	;# 
  3160  0F2B                     	;# 
  3161  0F2C                     	;# 
  3162  0F2D                     	;# 
  3163  0F2E                     	;# 
  3164  0F2F                     	;# 
  3165  0F30                     	;# 
  3166  0F31                     	;# 
  3167  0F32                     	;# 
  3168  0F33                     	;# 
  3169  0F34                     	;# 
  3170  0F35                     	;# 
  3171  0F36                     	;# 
  3172  0F37                     	;# 
  3173  0FE4                     	;# 
  3174  0FE5                     	;# 
  3175  0FE6                     	;# 
  3176  0FE7                     	;# 
  3177  0FE8                     	;# 
  3178  0FE9                     	;# 
  3179  0FEA                     	;# 
  3180  0FEB                     	;# 
  3181  0FED                     	;# 
  3182  0FEE                     	;# 
  3183  0FEF                     	;# 
  3184  0000                     	;# 
  3185  0001                     	;# 
  3186  0002                     	;# 
  3187  0003                     	;# 
  3188  0004                     	;# 
  3189  0005                     	;# 
  3190  0006                     	;# 
  3191  0007                     	;# 
  3192  0008                     	;# 
  3193  0009                     	;# 
  3194  000A                     	;# 
  3195  000B                     	;# 
  3196  000C                     	;# 
  3197  000D                     	;# 
  3198  000E                     	;# 
  3199  0010                     	;# 
  3200  0011                     	;# 
  3201  0012                     	;# 
  3202  0013                     	;# 
  3203  0014                     	;# 
  3204  0015                     	;# 
  3205  0016                     	;# 
  3206  0016                     	;# 
  3207  0017                     	;# 
  3208  0018                     	;# 
  3209  0019                     	;# 
  3210  001A                     	;# 
  3211  001A                     	;# 
  3212  001B                     	;# 
  3213  001B                     	;# 
  3214  001C                     	;# 
  3215  001D                     	;# 
  3216  001E                     	;# 
  3217  001F                     	;# 
  3218  008C                     	;# 
  3219  008D                     	;# 
  3220  008E                     	;# 
  3221  0090                     	;# 
  3222  0091                     	;# 
  3223  0092                     	;# 
  3224  0093                     	;# 
  3225  0094                     	;# 
  3226  0095                     	;# 
  3227  0096                     	;# 
  3228  0098                     	;# 
  3229  0099                     	;# 
  3230  009A                     	;# 
  3231  009B                     	;# 
  3232  009B                     	;# 
  3233  009C                     	;# 
  3234  009D                     	;# 
  3235  009E                     	;# 
  3236  009F                     	;# 
  3237  010C                     	;# 
  3238  010D                     	;# 
  3239  010E                     	;# 
  3240  0111                     	;# 
  3241  0112                     	;# 
  3242  0113                     	;# 
  3243  0114                     	;# 
  3244  0115                     	;# 
  3245  0116                     	;# 
  3246  0117                     	;# 
  3247  0118                     	;# 
  3248  0119                     	;# 
  3249  011C                     	;# 
  3250  018C                     	;# 
  3251  018D                     	;# 
  3252  018E                     	;# 
  3253  0191                     	;# 
  3254  0191                     	;# 
  3255  0192                     	;# 
  3256  0193                     	;# 
  3257  0193                     	;# 
  3258  0194                     	;# 
  3259  0195                     	;# 
  3260  0196                     	;# 
  3261  0197                     	;# 
  3262  0199                     	;# 
  3263  0199                     	;# 
  3264  0199                     	;# 
  3265  019A                     	;# 
  3266  019A                     	;# 
  3267  019A                     	;# 
  3268  019B                     	;# 
  3269  019B                     	;# 
  3270  019B                     	;# 
  3271  019B                     	;# 
  3272  019B                     	;# 
  3273  019C                     	;# 
  3274  019C                     	;# 
  3275  019C                     	;# 
  3276  019D                     	;# 
  3277  019D                     	;# 
  3278  019D                     	;# 
  3279  019E                     	;# 
  3280  019E                     	;# 
  3281  019E                     	;# 
  3282  019F                     	;# 
  3283  019F                     	;# 
  3284  019F                     	;# 
  3285  019F                     	;# 
  3286  019F                     	;# 
  3287  020C                     	;# 
  3288  020D                     	;# 
  3289  020E                     	;# 
  3290  0211                     	;# 
  3291  0211                     	;# 
  3292  0212                     	;# 
  3293  0212                     	;# 
  3294  0213                     	;# 
  3295  0213                     	;# 
  3296  0214                     	;# 
  3297  0214                     	;# 
  3298  0215                     	;# 
  3299  0215                     	;# 
  3300  0215                     	;# 
  3301  0215                     	;# 
  3302  0216                     	;# 
  3303  0216                     	;# 
  3304  0217                     	;# 
  3305  0217                     	;# 
  3306  028C                     	;# 
  3307  028D                     	;# 
  3308  028E                     	;# 
  3309  0291                     	;# 
  3310  0291                     	;# 
  3311  0292                     	;# 
  3312  0293                     	;# 
  3313  0294                     	;# 
  3314  0298                     	;# 
  3315  0298                     	;# 
  3316  0299                     	;# 
  3317  029A                     	;# 
  3318  029B                     	;# 
  3319  029E                     	;# 
  3320  030C                     	;# 
  3321  030D                     	;# 
  3322  030E                     	;# 
  3323  038C                     	;# 
  3324  038D                     	;# 
  3325  038E                     	;# 
  3326  0391                     	;# 
  3327  0392                     	;# 
  3328  0393                     	;# 
  3329  0394                     	;# 
  3330  0395                     	;# 
  3331  0396                     	;# 
  3332  0397                     	;# 
  3333  0398                     	;# 
  3334  0399                     	;# 
  3335  040E                     	;# 
  3336  0413                     	;# 
  3337  0413                     	;# 
  3338  0414                     	;# 
  3339  0414                     	;# 
  3340  0415                     	;# 
  3341  0416                     	;# 
  3342  0417                     	;# 
  3343  0418                     	;# 
  3344  041A                     	;# 
  3345  041A                     	;# 
  3346  041B                     	;# 
  3347  041B                     	;# 
  3348  041C                     	;# 
  3349  041D                     	;# 
  3350  041E                     	;# 
  3351  041F                     	;# 
  3352  0493                     	;# 
  3353  0494                     	;# 
  3354  0495                     	;# 
  3355  0496                     	;# 
  3356  049A                     	;# 
  3357  049B                     	;# 
  3358  049C                     	;# 
  3359  049D                     	;# 
  3360  058C                     	;# 
  3361  058C                     	;# 
  3362  058D                     	;# 
  3363  058E                     	;# 
  3364  058E                     	;# 
  3365  058F                     	;# 
  3366  0590                     	;# 
  3367  0590                     	;# 
  3368  0591                     	;# 
  3369  0592                     	;# 
  3370  0592                     	;# 
  3371  0593                     	;# 
  3372  0594                     	;# 
  3373  0594                     	;# 
  3374  0595                     	;# 
  3375  0596                     	;# 
  3376  0596                     	;# 
  3377  0597                     	;# 
  3378  0598                     	;# 
  3379  0599                     	;# 
  3380  059A                     	;# 
  3381  059B                     	;# 
  3382  059B                     	;# 
  3383  059C                     	;# 
  3384  059D                     	;# 
  3385  060C                     	;# 
  3386  060C                     	;# 
  3387  060D                     	;# 
  3388  060E                     	;# 
  3389  060F                     	;# 
  3390  060F                     	;# 
  3391  0610                     	;# 
  3392  0611                     	;# 
  3393  0612                     	;# 
  3394  0613                     	;# 
  3395  0614                     	;# 
  3396  0617                     	;# 
  3397  0618                     	;# 
  3398  0619                     	;# 
  3399  061A                     	;# 
  3400  061B                     	;# 
  3401  061C                     	;# 
  3402  0691                     	;# 
  3403  0692                     	;# 
  3404  0693                     	;# 
  3405  0694                     	;# 
  3406  0695                     	;# 
  3407  0696                     	;# 
  3408  0697                     	;# 
  3409  0699                     	;# 
  3410  069A                     	;# 
  3411  0711                     	;# 
  3412  0712                     	;# 
  3413  0713                     	;# 
  3414  0714                     	;# 
  3415  0715                     	;# 
  3416  0718                     	;# 
  3417  0718                     	;# 
  3418  0719                     	;# 
  3419  071A                     	;# 
  3420  071A                     	;# 
  3421  071B                     	;# 
  3422  071C                     	;# 
  3423  071D                     	;# 
  3424  0791                     	;# 
  3425  0791                     	;# 
  3426  0792                     	;# 
  3427  0793                     	;# 
  3428  0793                     	;# 
  3429  0794                     	;# 
  3430  0795                     	;# 
  3431  0795                     	;# 
  3432  0796                     	;# 
  3433  0797                     	;# 
  3434  0797                     	;# 
  3435  0798                     	;# 
  3436  0799                     	;# 
  3437  079A                     	;# 
  3438  080C                     	;# 
  3439  080C                     	;# 
  3440  080D                     	;# 
  3441  080E                     	;# 
  3442  080E                     	;# 
  3443  080F                     	;# 
  3444  0810                     	;# 
  3445  0810                     	;# 
  3446  0811                     	;# 
  3447  0812                     	;# 
  3448  0812                     	;# 
  3449  0813                     	;# 
  3450  0814                     	;# 
  3451  0815                     	;# 
  3452  0816                     	;# 
  3453  0817                     	;# 
  3454  0818                     	;# 
  3455  0819                     	;# 
  3456  081A                     	;# 
  3457  081A                     	;# 
  3458  081B                     	;# 
  3459  081C                     	;# 
  3460  081C                     	;# 
  3461  081D                     	;# 
  3462  088C                     	;# 
  3463  088D                     	;# 
  3464  088E                     	;# 
  3465  088F                     	;# 
  3466  088F                     	;# 
  3467  0890                     	;# 
  3468  0891                     	;# 
  3469  0892                     	;# 
  3470  0893                     	;# 
  3471  0893                     	;# 
  3472  0894                     	;# 
  3473  0895                     	;# 
  3474  0896                     	;# 
  3475  0897                     	;# 
  3476  0897                     	;# 
  3477  0898                     	;# 
  3478  0899                     	;# 
  3479  0D8C                     	;# 
  3480  0D8C                     	;# 
  3481  0D8D                     	;# 
  3482  0D8E                     	;# 
  3483  0D8F                     	;# 
  3484  0D8F                     	;# 
  3485  0D90                     	;# 
  3486  0D91                     	;# 
  3487  0D92                     	;# 
  3488  0D92                     	;# 
  3489  0D93                     	;# 
  3490  0D94                     	;# 
  3491  0D95                     	;# 
  3492  0D95                     	;# 
  3493  0D96                     	;# 
  3494  0D97                     	;# 
  3495  0D98                     	;# 
  3496  0D99                     	;# 
  3497  0D9A                     	;# 
  3498  0D9B                     	;# 
  3499  0D9C                     	;# 
  3500  0D9D                     	;# 
  3501  0D9E                     	;# 
  3502  0D9E                     	;# 
  3503  0D9F                     	;# 
  3504  0DA0                     	;# 
  3505  0DA1                     	;# 
  3506  0DA1                     	;# 
  3507  0DA2                     	;# 
  3508  0DA3                     	;# 
  3509  0DA4                     	;# 
  3510  0DA4                     	;# 
  3511  0DA5                     	;# 
  3512  0DA6                     	;# 
  3513  0DA7                     	;# 
  3514  0DA7                     	;# 
  3515  0DA8                     	;# 
  3516  0DA9                     	;# 
  3517  0DAA                     	;# 
  3518  0DAB                     	;# 
  3519  0DAC                     	;# 
  3520  0DAD                     	;# 
  3521  0DAE                     	;# 
  3522  0DAF                     	;# 
  3523  0E0F                     	;# 
  3524  0E10                     	;# 
  3525  0E11                     	;# 
  3526  0E12                     	;# 
  3527  0E13                     	;# 
  3528  0E14                     	;# 
  3529  0E15                     	;# 
  3530  0E16                     	;# 
  3531  0E17                     	;# 
  3532  0E18                     	;# 
  3533  0E19                     	;# 
  3534  0E1A                     	;# 
  3535  0E1B                     	;# 
  3536  0E1C                     	;# 
  3537  0E1D                     	;# 
  3538  0E1E                     	;# 
  3539  0E1F                     	;# 
  3540  0E20                     	;# 
  3541  0E21                     	;# 
  3542  0E22                     	;# 
  3543  0E23                     	;# 
  3544  0E24                     	;# 
  3545  0E25                     	;# 
  3546  0E26                     	;# 
  3547  0E27                     	;# 
  3548  0E28                     	;# 
  3549  0E29                     	;# 
  3550  0E2A                     	;# 
  3551  0E2B                     	;# 
  3552  0E2C                     	;# 
  3553  0E2D                     	;# 
  3554  0E2E                     	;# 
  3555  0E90                     	;# 
  3556  0E91                     	;# 
  3557  0E92                     	;# 
  3558  0E94                     	;# 
  3559  0E95                     	;# 
  3560  0E9C                     	;# 
  3561  0E9D                     	;# 
  3562  0E9E                     	;# 
  3563  0E9F                     	;# 
  3564  0EA0                     	;# 
  3565  0EA1                     	;# 
  3566  0EA2                     	;# 
  3567  0EA3                     	;# 
  3568  0EA4                     	;# 
  3569  0EA5                     	;# 
  3570  0EA6                     	;# 
  3571  0EA7                     	;# 
  3572  0F0F                     	;# 
  3573  0F10                     	;# 
  3574  0F11                     	;# 
  3575  0F12                     	;# 
  3576  0F13                     	;# 
  3577  0F14                     	;# 
  3578  0F15                     	;# 
  3579  0F16                     	;# 
  3580  0F17                     	;# 
  3581  0F18                     	;# 
  3582  0F19                     	;# 
  3583  0F1A                     	;# 
  3584  0F1B                     	;# 
  3585  0F1C                     	;# 
  3586  0F1D                     	;# 
  3587  0F1E                     	;# 
  3588  0F1F                     	;# 
  3589  0F20                     	;# 
  3590  0F21                     	;# 
  3591  0F22                     	;# 
  3592  0F23                     	;# 
  3593  0F24                     	;# 
  3594  0F25                     	;# 
  3595  0F26                     	;# 
  3596  0F27                     	;# 
  3597  0F28                     	;# 
  3598  0F29                     	;# 
  3599  0F2A                     	;# 
  3600  0F2B                     	;# 
  3601  0F2C                     	;# 
  3602  0F2D                     	;# 
  3603  0F2E                     	;# 
  3604  0F2F                     	;# 
  3605  0F30                     	;# 
  3606  0F31                     	;# 
  3607  0F32                     	;# 
  3608  0F33                     	;# 
  3609  0F34                     	;# 
  3610  0F35                     	;# 
  3611  0F36                     	;# 
  3612  0F37                     	;# 
  3613  0FE4                     	;# 
  3614  0FE5                     	;# 
  3615  0FE6                     	;# 
  3616  0FE7                     	;# 
  3617  0FE8                     	;# 
  3618  0FE9                     	;# 
  3619  0FEA                     	;# 
  3620  0FEB                     	;# 
  3621  0FED                     	;# 
  3622  0FEE                     	;# 
  3623  0FEF                     	;# 
  3624  0000                     	;# 
  3625  0001                     	;# 
  3626  0002                     	;# 
  3627  0003                     	;# 
  3628  0004                     	;# 
  3629  0005                     	;# 
  3630  0006                     	;# 
  3631  0007                     	;# 
  3632  0008                     	;# 
  3633  0009                     	;# 
  3634  000A                     	;# 
  3635  000B                     	;# 
  3636  000C                     	;# 
  3637  000D                     	;# 
  3638  000E                     	;# 
  3639  0010                     	;# 
  3640  0011                     	;# 
  3641  0012                     	;# 
  3642  0013                     	;# 
  3643  0014                     	;# 
  3644  0015                     	;# 
  3645  0016                     	;# 
  3646  0016                     	;# 
  3647  0017                     	;# 
  3648  0018                     	;# 
  3649  0019                     	;# 
  3650  001A                     	;# 
  3651  001A                     	;# 
  3652  001B                     	;# 
  3653  001B                     	;# 
  3654  001C                     	;# 
  3655  001D                     	;# 
  3656  001E                     	;# 
  3657  001F                     	;# 
  3658  008C                     	;# 
  3659  008D                     	;# 
  3660  008E                     	;# 
  3661  0090                     	;# 
  3662  0091                     	;# 
  3663  0092                     	;# 
  3664  0093                     	;# 
  3665  0094                     	;# 
  3666  0095                     	;# 
  3667  0096                     	;# 
  3668  0098                     	;# 
  3669  0099                     	;# 
  3670  009A                     	;# 
  3671  009B                     	;# 
  3672  009B                     	;# 
  3673  009C                     	;# 
  3674  009D                     	;# 
  3675  009E                     	;# 
  3676  009F                     	;# 
  3677  010C                     	;# 
  3678  010D                     	;# 
  3679  010E                     	;# 
  3680  0111                     	;# 
  3681  0112                     	;# 
  3682  0113                     	;# 
  3683  0114                     	;# 
  3684  0115                     	;# 
  3685  0116                     	;# 
  3686  0117                     	;# 
  3687  0118                     	;# 
  3688  0119                     	;# 
  3689  011C                     	;# 
  3690  018C                     	;# 
  3691  018D                     	;# 
  3692  018E                     	;# 
  3693  0191                     	;# 
  3694  0191                     	;# 
  3695  0192                     	;# 
  3696  0193                     	;# 
  3697  0193                     	;# 
  3698  0194                     	;# 
  3699  0195                     	;# 
  3700  0196                     	;# 
  3701  0197                     	;# 
  3702  0199                     	;# 
  3703  0199                     	;# 
  3704  0199                     	;# 
  3705  019A                     	;# 
  3706  019A                     	;# 
  3707  019A                     	;# 
  3708  019B                     	;# 
  3709  019B                     	;# 
  3710  019B                     	;# 
  3711  019B                     	;# 
  3712  019B                     	;# 
  3713  019C                     	;# 
  3714  019C                     	;# 
  3715  019C                     	;# 
  3716  019D                     	;# 
  3717  019D                     	;# 
  3718  019D                     	;# 
  3719  019E                     	;# 
  3720  019E                     	;# 
  3721  019E                     	;# 
  3722  019F                     	;# 
  3723  019F                     	;# 
  3724  019F                     	;# 
  3725  019F                     	;# 
  3726  019F                     	;# 
  3727  020C                     	;# 
  3728  020D                     	;# 
  3729  020E                     	;# 
  3730  0211                     	;# 
  3731  0211                     	;# 
  3732  0212                     	;# 
  3733  0212                     	;# 
  3734  0213                     	;# 
  3735  0213                     	;# 
  3736  0214                     	;# 
  3737  0214                     	;# 
  3738  0215                     	;# 
  3739  0215                     	;# 
  3740  0215                     	;# 
  3741  0215                     	;# 
  3742  0216                     	;# 
  3743  0216                     	;# 
  3744  0217                     	;# 
  3745  0217                     	;# 
  3746  028C                     	;# 
  3747  028D                     	;# 
  3748  028E                     	;# 
  3749  0291                     	;# 
  3750  0291                     	;# 
  3751  0292                     	;# 
  3752  0293                     	;# 
  3753  0294                     	;# 
  3754  0298                     	;# 
  3755  0298                     	;# 
  3756  0299                     	;# 
  3757  029A                     	;# 
  3758  029B                     	;# 
  3759  029E                     	;# 
  3760  030C                     	;# 
  3761  030D                     	;# 
  3762  030E                     	;# 
  3763  038C                     	;# 
  3764  038D                     	;# 
  3765  038E                     	;# 
  3766  0391                     	;# 
  3767  0392                     	;# 
  3768  0393                     	;# 
  3769  0394                     	;# 
  3770  0395                     	;# 
  3771  0396                     	;# 
  3772  0397                     	;# 
  3773  0398                     	;# 
  3774  0399                     	;# 
  3775  040E                     	;# 
  3776  0413                     	;# 
  3777  0413                     	;# 
  3778  0414                     	;# 
  3779  0414                     	;# 
  3780  0415                     	;# 
  3781  0416                     	;# 
  3782  0417                     	;# 
  3783  0418                     	;# 
  3784  041A                     	;# 
  3785  041A                     	;# 
  3786  041B                     	;# 
  3787  041B                     	;# 
  3788  041C                     	;# 
  3789  041D                     	;# 
  3790  041E                     	;# 
  3791  041F                     	;# 
  3792  0493                     	;# 
  3793  0494                     	;# 
  3794  0495                     	;# 
  3795  0496                     	;# 
  3796  049A                     	;# 
  3797  049B                     	;# 
  3798  049C                     	;# 
  3799  049D                     	;# 
  3800  058C                     	;# 
  3801  058C                     	;# 
  3802  058D                     	;# 
  3803  058E                     	;# 
  3804  058E                     	;# 
  3805  058F                     	;# 
  3806  0590                     	;# 
  3807  0590                     	;# 
  3808  0591                     	;# 
  3809  0592                     	;# 
  3810  0592                     	;# 
  3811  0593                     	;# 
  3812  0594                     	;# 
  3813  0594                     	;# 
  3814  0595                     	;# 
  3815  0596                     	;# 
  3816  0596                     	;# 
  3817  0597                     	;# 
  3818  0598                     	;# 
  3819  0599                     	;# 
  3820  059A                     	;# 
  3821  059B                     	;# 
  3822  059B                     	;# 
  3823  059C                     	;# 
  3824  059D                     	;# 
  3825  060C                     	;# 
  3826  060C                     	;# 
  3827  060D                     	;# 
  3828  060E                     	;# 
  3829  060F                     	;# 
  3830  060F                     	;# 
  3831  0610                     	;# 
  3832  0611                     	;# 
  3833  0612                     	;# 
  3834  0613                     	;# 
  3835  0614                     	;# 
  3836  0617                     	;# 
  3837  0618                     	;# 
  3838  0619                     	;# 
  3839  061A                     	;# 
  3840  061B                     	;# 
  3841  061C                     	;# 
  3842  0691                     	;# 
  3843  0692                     	;# 
  3844  0693                     	;# 
  3845  0694                     	;# 
  3846  0695                     	;# 
  3847  0696                     	;# 
  3848  0697                     	;# 
  3849  0699                     	;# 
  3850  069A                     	;# 
  3851  0711                     	;# 
  3852  0712                     	;# 
  3853  0713                     	;# 
  3854  0714                     	;# 
  3855  0715                     	;# 
  3856  0718                     	;# 
  3857  0718                     	;# 
  3858  0719                     	;# 
  3859  071A                     	;# 
  3860  071A                     	;# 
  3861  071B                     	;# 
  3862  071C                     	;# 
  3863  071D                     	;# 
  3864  0791                     	;# 
  3865  0791                     	;# 
  3866  0792                     	;# 
  3867  0793                     	;# 
  3868  0793                     	;# 
  3869  0794                     	;# 
  3870  0795                     	;# 
  3871  0795                     	;# 
  3872  0796                     	;# 
  3873  0797                     	;# 
  3874  0797                     	;# 
  3875  0798                     	;# 
  3876  0799                     	;# 
  3877  079A                     	;# 
  3878  080C                     	;# 
  3879  080C                     	;# 
  3880  080D                     	;# 
  3881  080E                     	;# 
  3882  080E                     	;# 
  3883  080F                     	;# 
  3884  0810                     	;# 
  3885  0810                     	;# 
  3886  0811                     	;# 
  3887  0812                     	;# 
  3888  0812                     	;# 
  3889  0813                     	;# 
  3890  0814                     	;# 
  3891  0815                     	;# 
  3892  0816                     	;# 
  3893  0817                     	;# 
  3894  0818                     	;# 
  3895  0819                     	;# 
  3896  081A                     	;# 
  3897  081A                     	;# 
  3898  081B                     	;# 
  3899  081C                     	;# 
  3900  081C                     	;# 
  3901  081D                     	;# 
  3902  088C                     	;# 
  3903  088D                     	;# 
  3904  088E                     	;# 
  3905  088F                     	;# 
  3906  088F                     	;# 
  3907  0890                     	;# 
  3908  0891                     	;# 
  3909  0892                     	;# 
  3910  0893                     	;# 
  3911  0893                     	;# 
  3912  0894                     	;# 
  3913  0895                     	;# 
  3914  0896                     	;# 
  3915  0897                     	;# 
  3916  0897                     	;# 
  3917  0898                     	;# 
  3918  0899                     	;# 
  3919  0D8C                     	;# 
  3920  0D8C                     	;# 
  3921  0D8D                     	;# 
  3922  0D8E                     	;# 
  3923  0D8F                     	;# 
  3924  0D8F                     	;# 
  3925  0D90                     	;# 
  3926  0D91                     	;# 
  3927  0D92                     	;# 
  3928  0D92                     	;# 
  3929  0D93                     	;# 
  3930  0D94                     	;# 
  3931  0D95                     	;# 
  3932  0D95                     	;# 
  3933  0D96                     	;# 
  3934  0D97                     	;# 
  3935  0D98                     	;# 
  3936  0D99                     	;# 
  3937  0D9A                     	;# 
  3938  0D9B                     	;# 
  3939  0D9C                     	;# 
  3940  0D9D                     	;# 
  3941  0D9E                     	;# 
  3942  0D9E                     	;# 
  3943  0D9F                     	;# 
  3944  0DA0                     	;# 
  3945  0DA1                     	;# 
  3946  0DA1                     	;# 
  3947  0DA2                     	;# 
  3948  0DA3                     	;# 
  3949  0DA4                     	;# 
  3950  0DA4                     	;# 
  3951  0DA5                     	;# 
  3952  0DA6                     	;# 
  3953  0DA7                     	;# 
  3954  0DA7                     	;# 
  3955  0DA8                     	;# 
  3956  0DA9                     	;# 
  3957  0DAA                     	;# 
  3958  0DAB                     	;# 
  3959  0DAC                     	;# 
  3960  0DAD                     	;# 
  3961  0DAE                     	;# 
  3962  0DAF                     	;# 
  3963  0E0F                     	;# 
  3964  0E10                     	;# 
  3965  0E11                     	;# 
  3966  0E12                     	;# 
  3967  0E13                     	;# 
  3968  0E14                     	;# 
  3969  0E15                     	;# 
  3970  0E16                     	;# 
  3971  0E17                     	;# 
  3972  0E18                     	;# 
  3973  0E19                     	;# 
  3974  0E1A                     	;# 
  3975  0E1B                     	;# 
  3976  0E1C                     	;# 
  3977  0E1D                     	;# 
  3978  0E1E                     	;# 
  3979  0E1F                     	;# 
  3980  0E20                     	;# 
  3981  0E21                     	;# 
  3982  0E22                     	;# 
  3983  0E23                     	;# 
  3984  0E24                     	;# 
  3985  0E25                     	;# 
  3986  0E26                     	;# 
  3987  0E27                     	;# 
  3988  0E28                     	;# 
  3989  0E29                     	;# 
  3990  0E2A                     	;# 
  3991  0E2B                     	;# 
  3992  0E2C                     	;# 
  3993  0E2D                     	;# 
  3994  0E2E                     	;# 
  3995  0E90                     	;# 
  3996  0E91                     	;# 
  3997  0E92                     	;# 
  3998  0E94                     	;# 
  3999  0E95                     	;# 
  4000  0E9C                     	;# 
  4001  0E9D                     	;# 
  4002  0E9E                     	;# 
  4003  0E9F                     	;# 
  4004  0EA0                     	;# 
  4005  0EA1                     	;# 
  4006  0EA2                     	;# 
  4007  0EA3                     	;# 
  4008  0EA4                     	;# 
  4009  0EA5                     	;# 
  4010  0EA6                     	;# 
  4011  0EA7                     	;# 
  4012  0F0F                     	;# 
  4013  0F10                     	;# 
  4014  0F11                     	;# 
  4015  0F12                     	;# 
  4016  0F13                     	;# 
  4017  0F14                     	;# 
  4018  0F15                     	;# 
  4019  0F16                     	;# 
  4020  0F17                     	;# 
  4021  0F18                     	;# 
  4022  0F19                     	;# 
  4023  0F1A                     	;# 
  4024  0F1B                     	;# 
  4025  0F1C                     	;# 
  4026  0F1D                     	;# 
  4027  0F1E                     	;# 
  4028  0F1F                     	;# 
  4029  0F20                     	;# 
  4030  0F21                     	;# 
  4031  0F22                     	;# 
  4032  0F23                     	;# 
  4033  0F24                     	;# 
  4034  0F25                     	;# 
  4035  0F26                     	;# 
  4036  0F27                     	;# 
  4037  0F28                     	;# 
  4038  0F29                     	;# 
  4039  0F2A                     	;# 
  4040  0F2B                     	;# 
  4041  0F2C                     	;# 
  4042  0F2D                     	;# 
  4043  0F2E                     	;# 
  4044  0F2F                     	;# 
  4045  0F30                     	;# 
  4046  0F31                     	;# 
  4047  0F32                     	;# 
  4048  0F33                     	;# 
  4049  0F34                     	;# 
  4050  0F35                     	;# 
  4051  0F36                     	;# 
  4052  0F37                     	;# 
  4053  0FE4                     	;# 
  4054  0FE5                     	;# 
  4055  0FE6                     	;# 
  4056  0FE7                     	;# 
  4057  0FE8                     	;# 
  4058  0FE9                     	;# 
  4059  0FEA                     	;# 
  4060  0FEB                     	;# 
  4061  0FED                     	;# 
  4062  0FEE                     	;# 
  4063  0FEF                     	;# 
  4064  0000                     	;# 
  4065  0001                     	;# 
  4066  0002                     	;# 
  4067  0003                     	;# 
  4068  0004                     	;# 
  4069  0005                     	;# 
  4070  0006                     	;# 
  4071  0007                     	;# 
  4072  0008                     	;# 
  4073  0009                     	;# 
  4074  000A                     	;# 
  4075  000B                     	;# 
  4076  000C                     	;# 
  4077  000D                     	;# 
  4078  000E                     	;# 
  4079  0010                     	;# 
  4080  0011                     	;# 
  4081  0012                     	;# 
  4082  0013                     	;# 
  4083  0014                     	;# 
  4084  0015                     	;# 
  4085  0016                     	;# 
  4086  0016                     	;# 
  4087  0017                     	;# 
  4088  0018                     	;# 
  4089  0019                     	;# 
  4090  001A                     	;# 
  4091  001A                     	;# 
  4092  001B                     	;# 
  4093  001B                     	;# 
  4094  001C                     	;# 
  4095  001D                     	;# 
  4096  001E                     	;# 
  4097  001F                     	;# 
  4098  008C                     	;# 
  4099  008D                     	;# 
  4100  008E                     	;# 
  4101  0090                     	;# 
  4102  0091                     	;# 
  4103  0092                     	;# 
  4104  0093                     	;# 
  4105  0094                     	;# 
  4106  0095                     	;# 
  4107  0096                     	;# 
  4108  0098                     	;# 
  4109  0099                     	;# 
  4110  009A                     	;# 
  4111  009B                     	;# 
  4112  009B                     	;# 
  4113  009C                     	;# 
  4114  009D                     	;# 
  4115  009E                     	;# 
  4116  009F                     	;# 
  4117  010C                     	;# 
  4118  010D                     	;# 
  4119  010E                     	;# 
  4120  0111                     	;# 
  4121  0112                     	;# 
  4122  0113                     	;# 
  4123  0114                     	;# 
  4124  0115                     	;# 
  4125  0116                     	;# 
  4126  0117                     	;# 
  4127  0118                     	;# 
  4128  0119                     	;# 
  4129  011C                     	;# 
  4130  018C                     	;# 
  4131  018D                     	;# 
  4132  018E                     	;# 
  4133  0191                     	;# 
  4134  0191                     	;# 
  4135  0192                     	;# 
  4136  0193                     	;# 
  4137  0193                     	;# 
  4138  0194                     	;# 
  4139  0195                     	;# 
  4140  0196                     	;# 
  4141  0197                     	;# 
  4142  0199                     	;# 
  4143  0199                     	;# 
  4144  0199                     	;# 
  4145  019A                     	;# 
  4146  019A                     	;# 
  4147  019A                     	;# 
  4148  019B                     	;# 
  4149  019B                     	;# 
  4150  019B                     	;# 
  4151  019B                     	;# 
  4152  019B                     	;# 
  4153  019C                     	;# 
  4154  019C                     	;# 
  4155  019C                     	;# 
  4156  019D                     	;# 
  4157  019D                     	;# 
  4158  019D                     	;# 
  4159  019E                     	;# 
  4160  019E                     	;# 
  4161  019E                     	;# 
  4162  019F                     	;# 
  4163  019F                     	;# 
  4164  019F                     	;# 
  4165  019F                     	;# 
  4166  019F                     	;# 
  4167  020C                     	;# 
  4168  020D                     	;# 
  4169  020E                     	;# 
  4170  0211                     	;# 
  4171  0211                     	;# 
  4172  0212                     	;# 
  4173  0212                     	;# 
  4174  0213                     	;# 
  4175  0213                     	;# 
  4176  0214                     	;# 
  4177  0214                     	;# 
  4178  0215                     	;# 
  4179  0215                     	;# 
  4180  0215                     	;# 
  4181  0215                     	;# 
  4182  0216                     	;# 
  4183  0216                     	;# 
  4184  0217                     	;# 
  4185  0217                     	;# 
  4186  028C                     	;# 
  4187  028D                     	;# 
  4188  028E                     	;# 
  4189  0291                     	;# 
  4190  0291                     	;# 
  4191  0292                     	;# 
  4192  0293                     	;# 
  4193  0294                     	;# 
  4194  0298                     	;# 
  4195  0298                     	;# 
  4196  0299                     	;# 
  4197  029A                     	;# 
  4198  029B                     	;# 
  4199  029E                     	;# 
  4200  030C                     	;# 
  4201  030D                     	;# 
  4202  030E                     	;# 
  4203  038C                     	;# 
  4204  038D                     	;# 
  4205  038E                     	;# 
  4206  0391                     	;# 
  4207  0392                     	;# 
  4208  0393                     	;# 
  4209  0394                     	;# 
  4210  0395                     	;# 
  4211  0396                     	;# 
  4212  0397                     	;# 
  4213  0398                     	;# 
  4214  0399                     	;# 
  4215  040E                     	;# 
  4216  0413                     	;# 
  4217  0413                     	;# 
  4218  0414                     	;# 
  4219  0414                     	;# 
  4220  0415                     	;# 
  4221  0416                     	;# 
  4222  0417                     	;# 
  4223  0418                     	;# 
  4224  041A                     	;# 
  4225  041A                     	;# 
  4226  041B                     	;# 
  4227  041B                     	;# 
  4228  041C                     	;# 
  4229  041D                     	;# 
  4230  041E                     	;# 
  4231  041F                     	;# 
  4232  0493                     	;# 
  4233  0494                     	;# 
  4234  0495                     	;# 
  4235  0496                     	;# 
  4236  049A                     	;# 
  4237  049B                     	;# 
  4238  049C                     	;# 
  4239  049D                     	;# 
  4240  058C                     	;# 
  4241  058C                     	;# 
  4242  058D                     	;# 
  4243  058E                     	;# 
  4244  058E                     	;# 
  4245  058F                     	;# 
  4246  0590                     	;# 
  4247  0590                     	;# 
  4248  0591                     	;# 
  4249  0592                     	;# 
  4250  0592                     	;# 
  4251  0593                     	;# 
  4252  0594                     	;# 
  4253  0594                     	;# 
  4254  0595                     	;# 
  4255  0596                     	;# 
  4256  0596                     	;# 
  4257  0597                     	;# 
  4258  0598                     	;# 
  4259  0599                     	;# 
  4260  059A                     	;# 
  4261  059B                     	;# 
  4262  059B                     	;# 
  4263  059C                     	;# 
  4264  059D                     	;# 
  4265  060C                     	;# 
  4266  060C                     	;# 
  4267  060D                     	;# 
  4268  060E                     	;# 
  4269  060F                     	;# 
  4270  060F                     	;# 
  4271  0610                     	;# 
  4272  0611                     	;# 
  4273  0612                     	;# 
  4274  0613                     	;# 
  4275  0614                     	;# 
  4276  0617                     	;# 
  4277  0618                     	;# 
  4278  0619                     	;# 
  4279  061A                     	;# 
  4280  061B                     	;# 
  4281  061C                     	;# 
  4282  0691                     	;# 
  4283  0692                     	;# 
  4284  0693                     	;# 
  4285  0694                     	;# 
  4286  0695                     	;# 
  4287  0696                     	;# 
  4288  0697                     	;# 
  4289  0699                     	;# 
  4290  069A                     	;# 
  4291  0711                     	;# 
  4292  0712                     	;# 
  4293  0713                     	;# 
  4294  0714                     	;# 
  4295  0715                     	;# 
  4296  0718                     	;# 
  4297  0718                     	;# 
  4298  0719                     	;# 
  4299  071A                     	;# 
  4300  071A                     	;# 
  4301  071B                     	;# 
  4302  071C                     	;# 
  4303  071D                     	;# 
  4304  0791                     	;# 
  4305  0791                     	;# 
  4306  0792                     	;# 
  4307  0793                     	;# 
  4308  0793                     	;# 
  4309  0794                     	;# 
  4310  0795                     	;# 
  4311  0795                     	;# 
  4312  0796                     	;# 
  4313  0797                     	;# 
  4314  0797                     	;# 
  4315  0798                     	;# 
  4316  0799                     	;# 
  4317  079A                     	;# 
  4318  080C                     	;# 
  4319  080C                     	;# 
  4320  080D                     	;# 
  4321  080E                     	;# 
  4322  080E                     	;# 
  4323  080F                     	;# 
  4324  0810                     	;# 
  4325  0810                     	;# 
  4326  0811                     	;# 
  4327  0812                     	;# 
  4328  0812                     	;# 
  4329  0813                     	;# 
  4330  0814                     	;# 
  4331  0815                     	;# 
  4332  0816                     	;# 
  4333  0817                     	;# 
  4334  0818                     	;# 
  4335  0819                     	;# 
  4336  081A                     	;# 
  4337  081A                     	;# 
  4338  081B                     	;# 
  4339  081C                     	;# 
  4340  081C                     	;# 
  4341  081D                     	;# 
  4342  088C                     	;# 
  4343  088D                     	;# 
  4344  088E                     	;# 
  4345  088F                     	;# 
  4346  088F                     	;# 
  4347  0890                     	;# 
  4348  0891                     	;# 
  4349  0892                     	;# 
  4350  0893                     	;# 
  4351  0893                     	;# 
  4352  0894                     	;# 
  4353  0895                     	;# 
  4354  0896                     	;# 
  4355  0897                     	;# 
  4356  0897                     	;# 
  4357  0898                     	;# 
  4358  0899                     	;# 
  4359  0D8C                     	;# 
  4360  0D8C                     	;# 
  4361  0D8D                     	;# 
  4362  0D8E                     	;# 
  4363  0D8F                     	;# 
  4364  0D8F                     	;# 
  4365  0D90                     	;# 
  4366  0D91                     	;# 
  4367  0D92                     	;# 
  4368  0D92                     	;# 
  4369  0D93                     	;# 
  4370  0D94                     	;# 
  4371  0D95                     	;# 
  4372  0D95                     	;# 
  4373  0D96                     	;# 
  4374  0D97                     	;# 
  4375  0D98                     	;# 
  4376  0D99                     	;# 
  4377  0D9A                     	;# 
  4378  0D9B                     	;# 
  4379  0D9C                     	;# 
  4380  0D9D                     	;# 
  4381  0D9E                     	;# 
  4382  0D9E                     	;# 
  4383  0D9F                     	;# 
  4384  0DA0                     	;# 
  4385  0DA1                     	;# 
  4386  0DA1                     	;# 
  4387  0DA2                     	;# 
  4388  0DA3                     	;# 
  4389  0DA4                     	;# 
  4390  0DA4                     	;# 
  4391  0DA5                     	;# 
  4392  0DA6                     	;# 
  4393  0DA7                     	;# 
  4394  0DA7                     	;# 
  4395  0DA8                     	;# 
  4396  0DA9                     	;# 
  4397  0DAA                     	;# 
  4398  0DAB                     	;# 
  4399  0DAC                     	;# 
  4400  0DAD                     	;# 
  4401  0DAE                     	;# 
  4402  0DAF                     	;# 
  4403  0E0F                     	;# 
  4404  0E10                     	;# 
  4405  0E11                     	;# 
  4406  0E12                     	;# 
  4407  0E13                     	;# 
  4408  0E14                     	;# 
  4409  0E15                     	;# 
  4410  0E16                     	;# 
  4411  0E17                     	;# 
  4412  0E18                     	;# 
  4413  0E19                     	;# 
  4414  0E1A                     	;# 
  4415  0E1B                     	;# 
  4416  0E1C                     	;# 
  4417  0E1D                     	;# 
  4418  0E1E                     	;# 
  4419  0E1F                     	;# 
  4420  0E20                     	;# 
  4421  0E21                     	;# 
  4422  0E22                     	;# 
  4423  0E23                     	;# 
  4424  0E24                     	;# 
  4425  0E25                     	;# 
  4426  0E26                     	;# 
  4427  0E27                     	;# 
  4428  0E28                     	;# 
  4429  0E29                     	;# 
  4430  0E2A                     	;# 
  4431  0E2B                     	;# 
  4432  0E2C                     	;# 
  4433  0E2D                     	;# 
  4434  0E2E                     	;# 
  4435  0E90                     	;# 
  4436  0E91                     	;# 
  4437  0E92                     	;# 
  4438  0E94                     	;# 
  4439  0E95                     	;# 
  4440  0E9C                     	;# 
  4441  0E9D                     	;# 
  4442  0E9E                     	;# 
  4443  0E9F                     	;# 
  4444  0EA0                     	;# 
  4445  0EA1                     	;# 
  4446  0EA2                     	;# 
  4447  0EA3                     	;# 
  4448  0EA4                     	;# 
  4449  0EA5                     	;# 
  4450  0EA6                     	;# 
  4451  0EA7                     	;# 
  4452  0F0F                     	;# 
  4453  0F10                     	;# 
  4454  0F11                     	;# 
  4455  0F12                     	;# 
  4456  0F13                     	;# 
  4457  0F14                     	;# 
  4458  0F15                     	;# 
  4459  0F16                     	;# 
  4460  0F17                     	;# 
  4461  0F18                     	;# 
  4462  0F19                     	;# 
  4463  0F1A                     	;# 
  4464  0F1B                     	;# 
  4465  0F1C                     	;# 
  4466  0F1D                     	;# 
  4467  0F1E                     	;# 
  4468  0F1F                     	;# 
  4469  0F20                     	;# 
  4470  0F21                     	;# 
  4471  0F22                     	;# 
  4472  0F23                     	;# 
  4473  0F24                     	;# 
  4474  0F25                     	;# 
  4475  0F26                     	;# 
  4476  0F27                     	;# 
  4477  0F28                     	;# 
  4478  0F29                     	;# 
  4479  0F2A                     	;# 
  4480  0F2B                     	;# 
  4481  0F2C                     	;# 
  4482  0F2D                     	;# 
  4483  0F2E                     	;# 
  4484  0F2F                     	;# 
  4485  0F30                     	;# 
  4486  0F31                     	;# 
  4487  0F32                     	;# 
  4488  0F33                     	;# 
  4489  0F34                     	;# 
  4490  0F35                     	;# 
  4491  0F36                     	;# 
  4492  0F37                     	;# 
  4493  0FE4                     	;# 
  4494  0FE5                     	;# 
  4495  0FE6                     	;# 
  4496  0FE7                     	;# 
  4497  0FE8                     	;# 
  4498  0FE9                     	;# 
  4499  0FEA                     	;# 
  4500  0FEB                     	;# 
  4501  0FED                     	;# 
  4502  0FEE                     	;# 
  4503  0FEF                     	;# 
  4504  0000                     	;# 
  4505  0001                     	;# 
  4506  0002                     	;# 
  4507  0003                     	;# 
  4508  0004                     	;# 
  4509  0005                     	;# 
  4510  0006                     	;# 
  4511  0007                     	;# 
  4512  0008                     	;# 
  4513  0009                     	;# 
  4514  000A                     	;# 
  4515  000B                     	;# 
  4516  000C                     	;# 
  4517  000D                     	;# 
  4518  000E                     	;# 
  4519  0010                     	;# 
  4520  0011                     	;# 
  4521  0012                     	;# 
  4522  0013                     	;# 
  4523  0014                     	;# 
  4524  0015                     	;# 
  4525  0016                     	;# 
  4526  0016                     	;# 
  4527  0017                     	;# 
  4528  0018                     	;# 
  4529  0019                     	;# 
  4530  001A                     	;# 
  4531  001A                     	;# 
  4532  001B                     	;# 
  4533  001B                     	;# 
  4534  001C                     	;# 
  4535  001D                     	;# 
  4536  001E                     	;# 
  4537  001F                     	;# 
  4538  008C                     	;# 
  4539  008D                     	;# 
  4540  008E                     	;# 
  4541  0090                     	;# 
  4542  0091                     	;# 
  4543  0092                     	;# 
  4544  0093                     	;# 
  4545  0094                     	;# 
  4546  0095                     	;# 
  4547  0096                     	;# 
  4548  0098                     	;# 
  4549  0099                     	;# 
  4550  009A                     	;# 
  4551  009B                     	;# 
  4552  009B                     	;# 
  4553  009C                     	;# 
  4554  009D                     	;# 
  4555  009E                     	;# 
  4556  009F                     	;# 
  4557  010C                     	;# 
  4558  010D                     	;# 
  4559  010E                     	;# 
  4560  0111                     	;# 
  4561  0112                     	;# 
  4562  0113                     	;# 
  4563  0114                     	;# 
  4564  0115                     	;# 
  4565  0116                     	;# 
  4566  0117                     	;# 
  4567  0118                     	;# 
  4568  0119                     	;# 
  4569  011C                     	;# 
  4570  018C                     	;# 
  4571  018D                     	;# 
  4572  018E                     	;# 
  4573  0191                     	;# 
  4574  0191                     	;# 
  4575  0192                     	;# 
  4576  0193                     	;# 
  4577  0193                     	;# 
  4578  0194                     	;# 
  4579  0195                     	;# 
  4580  0196                     	;# 
  4581  0197                     	;# 
  4582  0199                     	;# 
  4583  0199                     	;# 
  4584  0199                     	;# 
  4585  019A                     	;# 
  4586  019A                     	;# 
  4587  019A                     	;# 
  4588  019B                     	;# 
  4589  019B                     	;# 
  4590  019B                     	;# 
  4591  019B                     	;# 
  4592  019B                     	;# 
  4593  019C                     	;# 
  4594  019C                     	;# 
  4595  019C                     	;# 
  4596  019D                     	;# 
  4597  019D                     	;# 
  4598  019D                     	;# 
  4599  019E                     	;# 
  4600  019E                     	;# 
  4601  019E                     	;# 
  4602  019F                     	;# 
  4603  019F                     	;# 
  4604  019F                     	;# 
  4605  019F                     	;# 
  4606  019F                     	;# 
  4607  020C                     	;# 
  4608  020D                     	;# 
  4609  020E                     	;# 
  4610  0211                     	;# 
  4611  0211                     	;# 
  4612  0212                     	;# 
  4613  0212                     	;# 
  4614  0213                     	;# 
  4615  0213                     	;# 
  4616  0214                     	;# 
  4617  0214                     	;# 
  4618  0215                     	;# 
  4619  0215                     	;# 
  4620  0215                     	;# 
  4621  0215                     	;# 
  4622  0216                     	;# 
  4623  0216                     	;# 
  4624  0217                     	;# 
  4625  0217                     	;# 
  4626  028C                     	;# 
  4627  028D                     	;# 
  4628  028E                     	;# 
  4629  0291                     	;# 
  4630  0291                     	;# 
  4631  0292                     	;# 
  4632  0293                     	;# 
  4633  0294                     	;# 
  4634  0298                     	;# 
  4635  0298                     	;# 
  4636  0299                     	;# 
  4637  029A                     	;# 
  4638  029B                     	;# 
  4639  029E                     	;# 
  4640  030C                     	;# 
  4641  030D                     	;# 
  4642  030E                     	;# 
  4643  038C                     	;# 
  4644  038D                     	;# 
  4645  038E                     	;# 
  4646  0391                     	;# 
  4647  0392                     	;# 
  4648  0393                     	;# 
  4649  0394                     	;# 
  4650  0395                     	;# 
  4651  0396                     	;# 
  4652  0397                     	;# 
  4653  0398                     	;# 
  4654  0399                     	;# 
  4655  040E                     	;# 
  4656  0413                     	;# 
  4657  0413                     	;# 
  4658  0414                     	;# 
  4659  0414                     	;# 
  4660  0415                     	;# 
  4661  0416                     	;# 
  4662  0417                     	;# 
  4663  0418                     	;# 
  4664  041A                     	;# 
  4665  041A                     	;# 
  4666  041B                     	;# 
  4667  041B                     	;# 
  4668  041C                     	;# 
  4669  041D                     	;# 
  4670  041E                     	;# 
  4671  041F                     	;# 
  4672  0493                     	;# 
  4673  0494                     	;# 
  4674  0495                     	;# 
  4675  0496                     	;# 
  4676  049A                     	;# 
  4677  049B                     	;# 
  4678  049C                     	;# 
  4679  049D                     	;# 
  4680  058C                     	;# 
  4681  058C                     	;# 
  4682  058D                     	;# 
  4683  058E                     	;# 
  4684  058E                     	;# 
  4685  058F                     	;# 
  4686  0590                     	;# 
  4687  0590                     	;# 
  4688  0591                     	;# 
  4689  0592                     	;# 
  4690  0592                     	;# 
  4691  0593                     	;# 
  4692  0594                     	;# 
  4693  0594                     	;# 
  4694  0595                     	;# 
  4695  0596                     	;# 
  4696  0596                     	;# 
  4697  0597                     	;# 
  4698  0598                     	;# 
  4699  0599                     	;# 
  4700  059A                     	;# 
  4701  059B                     	;# 
  4702  059B                     	;# 
  4703  059C                     	;# 
  4704  059D                     	;# 
  4705  060C                     	;# 
  4706  060C                     	;# 
  4707  060D                     	;# 
  4708  060E                     	;# 
  4709  060F                     	;# 
  4710  060F                     	;# 
  4711  0610                     	;# 
  4712  0611                     	;# 
  4713  0612                     	;# 
  4714  0613                     	;# 
  4715  0614                     	;# 
  4716  0617                     	;# 
  4717  0618                     	;# 
  4718  0619                     	;# 
  4719  061A                     	;# 
  4720  061B                     	;# 
  4721  061C                     	;# 
  4722  0691                     	;# 
  4723  0692                     	;# 
  4724  0693                     	;# 
  4725  0694                     	;# 
  4726  0695                     	;# 
  4727  0696                     	;# 
  4728  0697                     	;# 
  4729  0699                     	;# 
  4730  069A                     	;# 
  4731  0711                     	;# 
  4732  0712                     	;# 
  4733  0713                     	;# 
  4734  0714                     	;# 
  4735  0715                     	;# 
  4736  0718                     	;# 
  4737  0718                     	;# 
  4738  0719                     	;# 
  4739  071A                     	;# 
  4740  071A                     	;# 
  4741  071B                     	;# 
  4742  071C                     	;# 
  4743  071D                     	;# 
  4744  0791                     	;# 
  4745  0791                     	;# 
  4746  0792                     	;# 
  4747  0793                     	;# 
  4748  0793                     	;# 
  4749  0794                     	;# 
  4750  0795                     	;# 
  4751  0795                     	;# 
  4752  0796                     	;# 
  4753  0797                     	;# 
  4754  0797                     	;# 
  4755  0798                     	;# 
  4756  0799                     	;# 
  4757  079A                     	;# 
  4758  080C                     	;# 
  4759  080C                     	;# 
  4760  080D                     	;# 
  4761  080E                     	;# 
  4762  080E                     	;# 
  4763  080F                     	;# 
  4764  0810                     	;# 
  4765  0810                     	;# 
  4766  0811                     	;# 
  4767  0812                     	;# 
  4768  0812                     	;# 
  4769  0813                     	;# 
  4770  0814                     	;# 
  4771  0815                     	;# 
  4772  0816                     	;# 
  4773  0817                     	;# 
  4774  0818                     	;# 
  4775  0819                     	;# 
  4776  081A                     	;# 
  4777  081A                     	;# 
  4778  081B                     	;# 
  4779  081C                     	;# 
  4780  081C                     	;# 
  4781  081D                     	;# 
  4782  088C                     	;# 
  4783  088D                     	;# 
  4784  088E                     	;# 
  4785  088F                     	;# 
  4786  088F                     	;# 
  4787  0890                     	;# 
  4788  0891                     	;# 
  4789  0892                     	;# 
  4790  0893                     	;# 
  4791  0893                     	;# 
  4792  0894                     	;# 
  4793  0895                     	;# 
  4794  0896                     	;# 
  4795  0897                     	;# 
  4796  0897                     	;# 
  4797  0898                     	;# 
  4798  0899                     	;# 
  4799  0D8C                     	;# 
  4800  0D8C                     	;# 
  4801  0D8D                     	;# 
  4802  0D8E                     	;# 
  4803  0D8F                     	;# 
  4804  0D8F                     	;# 
  4805  0D90                     	;# 
  4806  0D91                     	;# 
  4807  0D92                     	;# 
  4808  0D92                     	;# 
  4809  0D93                     	;# 
  4810  0D94                     	;# 
  4811  0D95                     	;# 
  4812  0D95                     	;# 
  4813  0D96                     	;# 
  4814  0D97                     	;# 
  4815  0D98                     	;# 
  4816  0D99                     	;# 
  4817  0D9A                     	;# 
  4818  0D9B                     	;# 
  4819  0D9C                     	;# 
  4820  0D9D                     	;# 
  4821  0D9E                     	;# 
  4822  0D9E                     	;# 
  4823  0D9F                     	;# 
  4824  0DA0                     	;# 
  4825  0DA1                     	;# 
  4826  0DA1                     	;# 
  4827  0DA2                     	;# 
  4828  0DA3                     	;# 
  4829  0DA4                     	;# 
  4830  0DA4                     	;# 
  4831  0DA5                     	;# 
  4832  0DA6                     	;# 
  4833  0DA7                     	;# 
  4834  0DA7                     	;# 
  4835  0DA8                     	;# 
  4836  0DA9                     	;# 
  4837  0DAA                     	;# 
  4838  0DAB                     	;# 
  4839  0DAC                     	;# 
  4840  0DAD                     	;# 
  4841  0DAE                     	;# 
  4842  0DAF                     	;# 
  4843  0E0F                     	;# 
  4844  0E10                     	;# 
  4845  0E11                     	;# 
  4846  0E12                     	;# 
  4847  0E13                     	;# 
  4848  0E14                     	;# 
  4849  0E15                     	;# 
  4850  0E16                     	;# 
  4851  0E17                     	;# 
  4852  0E18                     	;# 
  4853  0E19                     	;# 
  4854  0E1A                     	;# 
  4855  0E1B                     	;# 
  4856  0E1C                     	;# 
  4857  0E1D                     	;# 
  4858  0E1E                     	;# 
  4859  0E1F                     	;# 
  4860  0E20                     	;# 
  4861  0E21                     	;# 
  4862  0E22                     	;# 
  4863  0E23                     	;# 
  4864  0E24                     	;# 
  4865  0E25                     	;# 
  4866  0E26                     	;# 
  4867  0E27                     	;# 
  4868  0E28                     	;# 
  4869  0E29                     	;# 
  4870  0E2A                     	;# 
  4871  0E2B                     	;# 
  4872  0E2C                     	;# 
  4873  0E2D                     	;# 
  4874  0E2E                     	;# 
  4875  0E90                     	;# 
  4876  0E91                     	;# 
  4877  0E92                     	;# 
  4878  0E94                     	;# 
  4879  0E95                     	;# 
  4880  0E9C                     	;# 
  4881  0E9D                     	;# 
  4882  0E9E                     	;# 
  4883  0E9F                     	;# 
  4884  0EA0                     	;# 
  4885  0EA1                     	;# 
  4886  0EA2                     	;# 
  4887  0EA3                     	;# 
  4888  0EA4                     	;# 
  4889  0EA5                     	;# 
  4890  0EA6                     	;# 
  4891  0EA7                     	;# 
  4892  0F0F                     	;# 
  4893  0F10                     	;# 
  4894  0F11                     	;# 
  4895  0F12                     	;# 
  4896  0F13                     	;# 
  4897  0F14                     	;# 
  4898  0F15                     	;# 
  4899  0F16                     	;# 
  4900  0F17                     	;# 
  4901  0F18                     	;# 
  4902  0F19                     	;# 
  4903  0F1A                     	;# 
  4904  0F1B                     	;# 
  4905  0F1C                     	;# 
  4906  0F1D                     	;# 
  4907  0F1E                     	;# 
  4908  0F1F                     	;# 
  4909  0F20                     	;# 
  4910  0F21                     	;# 
  4911  0F22                     	;# 
  4912  0F23                     	;# 
  4913  0F24                     	;# 
  4914  0F25                     	;# 
  4915  0F26                     	;# 
  4916  0F27                     	;# 
  4917  0F28                     	;# 
  4918  0F29                     	;# 
  4919  0F2A                     	;# 
  4920  0F2B                     	;# 
  4921  0F2C                     	;# 
  4922  0F2D                     	;# 
  4923  0F2E                     	;# 
  4924  0F2F                     	;# 
  4925  0F30                     	;# 
  4926  0F31                     	;# 
  4927  0F32                     	;# 
  4928  0F33                     	;# 
  4929  0F34                     	;# 
  4930  0F35                     	;# 
  4931  0F36                     	;# 
  4932  0F37                     	;# 
  4933  0FE4                     	;# 
  4934  0FE5                     	;# 
  4935  0FE6                     	;# 
  4936  0FE7                     	;# 
  4937  0FE8                     	;# 
  4938  0FE9                     	;# 
  4939  0FEA                     	;# 
  4940  0FEB                     	;# 
  4941  0FED                     	;# 
  4942  0FEE                     	;# 
  4943  0FEF                     	;# 
  4944                           
  4945                           	psect	idataBANK1
  4946  0D8B                     __pidataBANK1:	
  4947                           
  4948                           ;initializer for _display_data_1
  4949  0D8B  3453               	retlw	83
  4950  0D8C  343A               	retlw	58
  4951  0D8D  3430               	retlw	48
  4952  0D8E  3430               	retlw	48
  4953  0D8F  3430               	retlw	48
  4954  0D90  344D               	retlw	77
  4955  0D91  343A               	retlw	58
  4956  0D92  3430               	retlw	48
  4957  0D93  3430               	retlw	48
  4958  0D94  3430               	retlw	48
  4959  0D95  344C               	retlw	76
  4960  0D96  343A               	retlw	58
  4961  0D97  3430               	retlw	48
  4962  0D98  3430               	retlw	48
  4963  0D99  3430               	retlw	48
  4964  0D9A  3400               	retlw	0
  4965                           
  4966                           ;initializer for _clearDataOk_2
  4967  0D9B  3463               	retlw	99
  4968  0D9C  346F               	retlw	111
  4969  0D9D  346D               	retlw	109
  4970  0D9E  3470               	retlw	112
  4971  0D9F  346C               	retlw	108
  4972  0DA0  3465               	retlw	101
  4973  0DA1  3474               	retlw	116
  4974  0DA2  3465               	retlw	101
  4975  0DA3  3464               	retlw	100
  4976  0DA4  3420               	retlw	32
  4977  0DA5  3400               	retlw	0
  4978                           
  4979                           ;initializer for _display_data_2
  4980  0DA6  345A               	retlw	90
  4981  0DA7  343A               	retlw	58
  4982  0DA8  3430               	retlw	48
  4983  0DA9  3430               	retlw	48
  4984  0DAA  3430               	retlw	48
  4985  0DAB  3447               	retlw	71
  4986  0DAC  343A               	retlw	58
  4987  0DAD  3430               	retlw	48
  4988  0DAE  3430               	retlw	48
  4989  0DAF  3430               	retlw	48
  4990  0DB0  3400               	retlw	0
  4991                           
  4992                           	psect	idataBANK2
  4993  0D24                     __pidataBANK2:	
  4994                           
  4995                           ;initializer for _clearingData
  4996  0D24  3443               	retlw	67
  4997  0D25  346C               	retlw	108
  4998  0D26  3465               	retlw	101
  4999  0D27  3461               	retlw	97
  5000  0D28  3472               	retlw	114
  5001  0D29  3469               	retlw	105
  5002  0D2A  346E               	retlw	110
  5003  0D2B  3467               	retlw	103
  5004  0D2C  3420               	retlw	32
  5005  0D2D  3444               	retlw	68
  5006  0D2E  3461               	retlw	97
  5007  0D2F  3474               	retlw	116
  5008  0D30  3461               	retlw	97
  5009  0D31  3420               	retlw	32
  5010  0D32  342E               	retlw	46
  5011  0D33  342E               	retlw	46
  5012  0D34  342E               	retlw	46
  5013  0D35  3400               	retlw	0
  5014                           
  5015                           ;initializer for _clearDataOk_1
  5016  0D36  3444               	retlw	68
  5017  0D37  3461               	retlw	97
  5018  0D38  3474               	retlw	116
  5019  0D39  3461               	retlw	97
  5020  0D3A  3420               	retlw	32
  5021  0D3B  3463               	retlw	99
  5022  0D3C  346C               	retlw	108
  5023  0D3D  3465               	retlw	101
  5024  0D3E  3461               	retlw	97
  5025  0D3F  3472               	retlw	114
  5026  0D40  3469               	retlw	105
  5027  0D41  346E               	retlw	110
  5028  0D42  3467               	retlw	103
  5029  0D43  3420               	retlw	32
  5030  0D44  3400               	retlw	0
  5031                           
  5032                           	psect	nvBANK0
  5033  005E                     __pnvBANK0:	
  5034  005E                     _TMR3_InterruptHandler:	
  5035  005E                     	ds	2
  5036  0060                     _timer3ReloadVal:	
  5037  0060                     	ds	2
  5038  0062                     _TMR1_InterruptHandler:	
  5039  0062                     	ds	2
  5040  0064                     _timer1ReloadVal:	
  5041  0064                     	ds	2
  5042  0066                     _TMR0_InterruptHandler:	
  5043  0066                     	ds	2
  5044  0068                     _timer0ReloadVal:	
  5045  0068                     	ds	1
  5046                           
  5047                           	psect	nvBANK1
  5048  00E6                     __pnvBANK1:	
  5049  00E6                     _INT_InterruptHandler:	
  5050  00E6                     	ds	2
  5051  000E                     _PORTC	set	14
  5052  000C                     _PORTAbits	set	12
  5053  0014                     _PIR5bits	set	20
  5054  0019                     _T1GCONbits	set	25
  5055  0018                     _T1CONbits	set	24
  5056  0018                     _T1CON	set	24
  5057  0010                     _PIR1bits	set	16
  5058  0016                     _TMR1L	set	22
  5059  0017                     _TMR1H	set	23
  5060  0019                     _T1GCON	set	25
  5061  000B                     _INTCONbits	set	11
  5062  0015                     _TMR0	set	21
  5063  0095                     _OPTION_REGbits	set	149
  5064  008E                     _TRISC	set	142
  5065  008D                     _TRISB	set	141
  5066  008C                     _TRISA	set	140
  5067  0094                     _PIE5bits	set	148
  5068  0098                     _OSCTUNE	set	152
  5069  0099                     _OSCCON	set	153
  5070  0090                     _PIE1bits	set	144
  5071  0095                     _OPTION_REG	set	149
  5072  010C                     _LATAbits	set	268
  5073  010E                     _LATCbits	set	270
  5074  010D                     _LATBbits	set	269
  5075  010E                     _LATC	set	270
  5076  010D                     _LATB	set	269
  5077  010C                     _LATA	set	268
  5078  0116                     _BORCON	set	278
  5079  0193                     _PMDAT	set	403
  5080  0191                     _PMADR	set	401
  5081  0195                     _PMCON1bits	set	405
  5082  018C                     _ANSELA	set	396
  5083  018D                     _ANSELB	set	397
  5084  018E                     _ANSELC	set	398
  5085  020E                     _WPUC	set	526
  5086  020C                     _WPUA	set	524
  5087  020D                     _WPUB	set	525
  5088  028E                     _ODCONC	set	654
  5089  028D                     _ODCONB	set	653
  5090  028C                     _ODCONA	set	652
  5091  0496                     _T3GCONbits	set	1174
  5092  0495                     _T3CONbits	set	1173
  5093  0495                     _T3CON	set	1173
  5094  0493                     _TMR3L	set	1171
  5095  0494                     _TMR3H	set	1172
  5096  0496                     _T3GCON	set	1174
  5097  0E10                     _INTPPS	set	3600
  5098                           
  5099                           	psect	stringtext1
  5100  1000                     __pstringtext1:	
  5101  1000                     STR_1:	
  5102  1000  346D               	retlw	109	;'m'
  5103  1001  3461               	retlw	97	;'a'
  5104  1002  3469               	retlw	105	;'i'
  5105  1003  346E               	retlw	110	;'n'
  5106  1004  342E               	retlw	46	;'.'
  5107  1005  3463               	retlw	99	;'c'
  5108  1006  3400               	retlw	0
  5109                           
  5110                           	psect	stringtext2
  5111  1007                     __pstringtext2:	
  5112  1007                     STR_2:	
  5113  1007  3430               	retlw	48	;'0'
  5114  1008  3420               	retlw	32	;' '
  5115  1009  343D               	retlw	61	;'='
  5116  100A  343D               	retlw	61	;'='
  5117  100B  3420               	retlw	32	;' '
  5118  100C  3472               	retlw	114	;'r'
  5119  100D  3400               	retlw	0
  5120                           
  5121                           	psect	stringtext3
  5122  0000                     __pstringtext3:	
  5123  1000                     
  5124                           ; #config settings
  5125  0000                     
  5126                           	psect	cinit
  5127  0039                     start_initialization:	
  5128  0039                     __initialization:	
  5129                           
  5130                           ; Initialize objects allocated to BANK1
  5131  0039  308B               	movlw	low __pidataBANK1
  5132  003A  0084               	movwf	4
  5133  003B  308D               	movlw	(high __pidataBANK1)| (0+128)
  5134  003C  0085               	movwf	5
  5135  003D  30A0               	movlw	low __pdataBANK1
  5136  003E  0086               	movwf	6
  5137  003F  3000               	movlw	high __pdataBANK1
  5138  0040  0087               	movwf	7
  5139  0041  3026               	movlw	38
  5140  0042  318B  23D3  3180   	fcall	init_ram
  5141                           
  5142                           ; Initialize objects allocated to BANK2
  5143  0045  3024               	movlw	low __pidataBANK2
  5144  0046  0084               	movwf	4
  5145  0047  308D               	movlw	(high __pidataBANK2)| (0+128)
  5146  0048  0085               	movwf	5
  5147  0049  3020               	movlw	low __pdataBANK2
  5148  004A  0086               	movwf	6
  5149  004B  3001               	movlw	high __pdataBANK2
  5150  004C  0087               	movwf	7
  5151  004D  3021               	movlw	33
  5152  004E  318B  23D3  3180   	fcall	init_ram
  5153                           
  5154                           ; Clear objects allocated to COMMON
  5155  0051  01F6               	clrf	__pbssCOMMON& (0+127)
  5156  0052  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
  5157  0053  01F8               	clrf	(__pbssCOMMON+2)& (0+127)
  5158  0054  01F9               	clrf	(__pbssCOMMON+3)& (0+127)
  5159  0055  01FA               	clrf	(__pbssCOMMON+4)& (0+127)
  5160                           
  5161                           ; Clear objects allocated to BANK0
  5162  0056  3042               	movlw	low __pbssBANK0
  5163  0057  0084               	movwf	4
  5164  0058  3000               	movlw	high __pbssBANK0
  5165  0059  0085               	movwf	5
  5166  005A  301C               	movlw	28
  5167  005B  318B  23CD  3180   	fcall	clear_ram0
  5168                           
  5169                           ; Clear objects allocated to BANK1
  5170  005E  30C6               	movlw	low __pbssBANK1
  5171  005F  0084               	movwf	4
  5172  0060  3000               	movlw	high __pbssBANK1
  5173  0061  0085               	movwf	5
  5174  0062  3020               	movlw	32
  5175  0063  318B  23CD         	fcall	clear_ram0
  5176  0065                     end_of_initialization:	
  5177                           ;End of C runtime variable initialization code
  5178                           
  5179  0065                     __end_of__initialization:	
  5180  0065  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  5181  0066  0020               	movlb	0
  5182  0067  3185  2D29         	ljmp	_main	;jump to C main() function
  5183                           
  5184                           	psect	bssCOMMON
  5185  0076                     __pbssCOMMON:	
  5186  0076                     _gExitFlag:	
  5187  0076                     	ds	1
  5188  0077                     _gEnterFlag:	
  5189  0077                     	ds	1
  5190  0078                     _gTimer0NormalFlashFlag:	
  5191  0078                     	ds	1
  5192  0079                     _gTimer0NormalFalshCnt:	
  5193  0079                     	ds	1
  5194  007A                     _gTimer0AlarmFlashFlag:	
  5195  007A                     	ds	1
  5196                           
  5197                           	psect	bssBANK0
  5198  0042                     __pbssBANK0:	
  5199  0042                     _gBoxCntStruct:	
  5200  0042                     	ds	21
  5201  0057                     _KeyPushTimeCnt:	
  5202  0057                     	ds	4
  5203  005B                     _KeyClearHEFFlag:	
  5204  005B                     	ds	1
  5205  005C                     _gTimer3Flag:	
  5206  005C                     	ds	1
  5207  005D                     _gInterruptFlag:	
  5208  005D                     	ds	1
  5209                           
  5210                           	psect	bssBANK1
  5211  00C6                     __pbssBANK1:	
  5212  00C6                     _HEFBufferData:	
  5213  00C6                     	ds	32
  5214                           
  5215                           	psect	dataBANK1
  5216  00A0                     __pdataBANK1:	
  5217  00A0                     _display_data_1:	
  5218  00A0                     	ds	16
  5219  00B0                     _clearDataOk_2:	
  5220  00B0                     	ds	11
  5221  00BB                     _display_data_2:	
  5222  00BB                     	ds	11
  5223                           
  5224                           	psect	dataBANK2
  5225  0120                     __pdataBANK2:	
  5226  0120                     _clearingData:	
  5227  0120                     	ds	18
  5228  0132                     _clearDataOk_1:	
  5229  0132                     	ds	15
  5230                           
  5231                           	psect	inittext
  5232  0BD3                     init_ram:	
  5233  0BD3  00FE               	movwf	126
  5234  0BD4                     initloop:	
  5235  0BD4  0012               	moviw fsr0++
  5236  0BD5  001E               	movwi fsr1++
  5237  0BD6  0BFE               	decfsz	126,f
  5238  0BD7  2BD4               	goto	initloop
  5239  0BD8  3400               	retlw	0
  5240                           
  5241                           	psect	clrtext
  5242  0BCD                     clear_ram0:	
  5243                           ;	Called with FSR0 containing the base address, and
  5244                           ;	WREG with the size to clear
  5245                           
  5246  0BCD  0064               	clrwdt	;clear the watchdog before getting into this loop
  5247  0BCE                     clrloop0:	
  5248  0BCE  0180               	clrf	0	;clear RAM location pointed to by FSR
  5249  0BCF  3101               	addfsr 0,1
  5250  0BD0  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  5251  0BD1  2BCE               	goto	clrloop0	;have we reached the end yet?
  5252  0BD2  3400               	retlw	0	;all done for this memory range, return
  5253                           
  5254                           	psect	cstackCOMMON
  5255  0070                     __pcstackCOMMON:	
  5256  0070                     ?_TMR0_DefaultInterruptHandler:	
  5257  0070                     ??_TMR0_DefaultInterruptHandler:	
  5258                           ; 1 bytes @ 0x0
  5259                           
  5260  0070                     ?_TMR0_CallBack:	
  5261                           ; 1 bytes @ 0x0
  5262                           
  5263  0070                     ??_TMR0_CallBack:	
  5264                           ; 1 bytes @ 0x0
  5265                           
  5266  0070                     ?_TMR1_DefaultInterruptHandler:	
  5267                           ; 1 bytes @ 0x0
  5268                           
  5269  0070                     ??_TMR1_DefaultInterruptHandler:	
  5270                           ; 1 bytes @ 0x0
  5271                           
  5272  0070                     ?_TMR1_CallBack:	
  5273                           ; 1 bytes @ 0x0
  5274                           
  5275  0070                     ??_TMR1_CallBack:	
  5276                           ; 1 bytes @ 0x0
  5277                           
  5278  0070                     ?_PIN_MANAGER_Initialize:	
  5279                           ; 1 bytes @ 0x0
  5280                           
  5281  0070                     ?_OSCILLATOR_Initialize:	
  5282                           ; 1 bytes @ 0x0
  5283                           
  5284  0070                     ?_TMR3_Initialize:	
  5285                           ; 1 bytes @ 0x0
  5286                           
  5287  0070                     ?_EXT_INT_Initialize:	
  5288                           ; 1 bytes @ 0x0
  5289                           
  5290  0070                     ?_INT_ISR:	
  5291                           ; 1 bytes @ 0x0
  5292                           
  5293  0070                     ?_PIN_MANAGER_IOC:	
  5294                           ; 1 bytes @ 0x0
  5295                           
  5296  0070                     ??_PIN_MANAGER_IOC:	
  5297                           ; 1 bytes @ 0x0
  5298                           
  5299  0070                     ?_TMR3_ISR:	
  5300                           ; 1 bytes @ 0x0
  5301                           
  5302  0070                     ?_TMR3_DefaultInterruptHandler:	
  5303                           ; 1 bytes @ 0x0
  5304                           
  5305  0070                     ??_TMR3_DefaultInterruptHandler:	
  5306                           ; 1 bytes @ 0x0
  5307                           
  5308  0070                     ?_TMR3_CallBack:	
  5309                           ; 1 bytes @ 0x0
  5310                           
  5311  0070                     ??_TMR3_CallBack:	
  5312                           ; 1 bytes @ 0x0
  5313                           
  5314  0070                     ?_bsp_TimerInterruptISRCallback:	
  5315                           ; 1 bytes @ 0x0
  5316                           
  5317  0070                     ??_bsp_TimerInterruptISRCallback:	
  5318                           ; 1 bytes @ 0x0
  5319                           
  5320  0070                     ?_INT_CallBack:	
  5321                           ; 1 bytes @ 0x0
  5322                           
  5323  0070                     ??_INT_CallBack:	
  5324                           ; 1 bytes @ 0x0
  5325                           
  5326  0070                     ?_bsp_CounterInit:	
  5327                           ; 1 bytes @ 0x0
  5328                           
  5329  0070                     ?_TMR0_Initialize:	
  5330                           ; 1 bytes @ 0x0
  5331                           
  5332  0070                     ?_TMR0_ISR:	
  5333                           ; 1 bytes @ 0x0
  5334                           
  5335  0070                     ?_TMR1_Initialize:	
  5336                           ; 1 bytes @ 0x0
  5337                           
  5338  0070                     ?_TMR1_WriteTimer:	
  5339                           ; 1 bytes @ 0x0
  5340                           
  5341  0070                     ?_TMR1_ISR:	
  5342                           ; 1 bytes @ 0x0
  5343                           
  5344  0070                     ?_SYSTEM_Initialize:	
  5345                           ; 1 bytes @ 0x0
  5346                           
  5347  0070                     ?_INTERRUPT_InterruptManager:	
  5348                           ; 1 bytes @ 0x0
  5349                           
  5350  0070                     ?_TMR3_WriteTimer:	
  5351                           ; 1 bytes @ 0x0
  5352                           
  5353  0070                     ?_INT_DefaultInterruptHandler:	
  5354                           ; 1 bytes @ 0x0
  5355                           
  5356  0070                     ??_INT_DefaultInterruptHandler:	
  5357                           ; 1 bytes @ 0x0
  5358                           
  5359  0070                     ?_LCDInit:	
  5360                           ; 1 bytes @ 0x0
  5361                           
  5362  0070                     ?_Data_Toseg:	
  5363                           ; 1 bytes @ 0x0
  5364                           
  5365  0070                     ?_HEFLASH_checkData:	
  5366                           ; 1 bytes @ 0x0
  5367                           
  5368  0070                     ?_main:	
  5369                           ; 1 bytes @ 0x0
  5370                           
  5371  0070                     ?__unlock:	
  5372                           ; 1 bytes @ 0x0
  5373                           
  5374  0070                     TMR1_WriteTimer@timerVal:	
  5375                           ; 1 bytes @ 0x0
  5376                           
  5377  0070                     TMR3_WriteTimer@timerVal:	
  5378                           ; 2 bytes @ 0x0
  5379                           
  5380                           
  5381                           ; 2 bytes @ 0x0
  5382  0070                     	ds	1
  5383  0071                     ??_INT_ISR:	
  5384  0071                     ??_TMR0_ISR:	
  5385                           ; 1 bytes @ 0x1
  5386                           
  5387                           
  5388                           ; 1 bytes @ 0x1
  5389  0071                     	ds	1
  5390  0072                     ??_TMR3_ISR:	
  5391  0072                     ??_TMR1_WriteTimer:	
  5392                           ; 1 bytes @ 0x2
  5393                           
  5394  0072                     ??_TMR1_ISR:	
  5395                           ; 1 bytes @ 0x2
  5396                           
  5397  0072                     ??_INTERRUPT_InterruptManager:	
  5398                           ; 1 bytes @ 0x2
  5399                           
  5400  0072                     ??_TMR3_WriteTimer:	
  5401                           ; 1 bytes @ 0x2
  5402                           
  5403                           
  5404                           ; 1 bytes @ 0x2
  5405  0072                     	ds	1
  5406  0073                     ?_TMR0_SetInterruptHandler:	
  5407  0073                     ?_TMR1_SetInterruptHandler:	
  5408                           ; 1 bytes @ 0x3
  5409                           
  5410  0073                     ??_PIN_MANAGER_Initialize:	
  5411                           ; 1 bytes @ 0x3
  5412                           
  5413  0073                     ??_OSCILLATOR_Initialize:	
  5414                           ; 1 bytes @ 0x3
  5415                           
  5416  0073                     ?_TMR3_SetInterruptHandler:	
  5417                           ; 1 bytes @ 0x3
  5418                           
  5419  0073                     ??_memset:	
  5420                           ; 1 bytes @ 0x3
  5421                           
  5422  0073                     ??_bsp_CounterInit:	
  5423                           ; 1 bytes @ 0x3
  5424                           
  5425  0073                     ?_INT_SetInterruptHandler:	
  5426                           ; 1 bytes @ 0x3
  5427                           
  5428  0073                     ??__fassert:	
  5429                           ; 1 bytes @ 0x3
  5430                           
  5431  0073                     ?_LCDSendData:	
  5432                           ; 1 bytes @ 0x3
  5433                           
  5434  0073                     ??__unlock:	
  5435                           ; 1 bytes @ 0x3
  5436                           
  5437  0073                     ??_FLASH_write:	
  5438                           ; 1 bytes @ 0x3
  5439                           
  5440  0073                     ?_FLASH_erase:	
  5441                           ; 1 bytes @ 0x3
  5442                           
  5443  0073                     ??___llmod:	
  5444                           ; 1 bytes @ 0x3
  5445                           
  5446  0073                     ??___lwmod:	
  5447                           ; 1 bytes @ 0x3
  5448                           
  5449  0073                     ?_FLASH_read:	
  5450                           ; 1 bytes @ 0x3
  5451                           
  5452  0073                     FLASH_write@temp:	
  5453                           ; 2 bytes @ 0x3
  5454                           
  5455  0073                     TMR0_SetInterruptHandler@InterruptHandler:	
  5456                           ; 1 bytes @ 0x3
  5457                           
  5458  0073                     TMR1_SetInterruptHandler@InterruptHandler:	
  5459                           ; 2 bytes @ 0x3
  5460                           
  5461  0073                     TMR3_SetInterruptHandler@InterruptHandler:	
  5462                           ; 2 bytes @ 0x3
  5463                           
  5464  0073                     INT_SetInterruptHandler@InterruptHandler:	
  5465                           ; 2 bytes @ 0x3
  5466                           
  5467  0073                     LCDSendData@RS:	
  5468                           ; 2 bytes @ 0x3
  5469                           
  5470  0073                     FLASH_read@address:	
  5471                           ; 2 bytes @ 0x3
  5472                           
  5473  0073                     FLASH_erase@address:	
  5474                           ; 2 bytes @ 0x3
  5475                           
  5476                           
  5477                           ; 2 bytes @ 0x3
  5478  0073                     	ds	1
  5479  0074                     ___llmod@counter:	
  5480  0074                     ___lwmod@counter:	
  5481                           ; 1 bytes @ 0x4
  5482                           
  5483  0074                     memset@p:	
  5484                           ; 1 bytes @ 0x4
  5485                           
  5486                           
  5487                           ; 1 bytes @ 0x4
  5488  0074                     	ds	1
  5489  0075                     ??_TMR0_SetInterruptHandler:	
  5490  0075                     ??_TMR1_SetInterruptHandler:	
  5491                           ; 1 bytes @ 0x5
  5492                           
  5493  0075                     ??_TMR3_Initialize:	
  5494                           ; 1 bytes @ 0x5
  5495                           
  5496  0075                     ??_EXT_INT_Initialize:	
  5497                           ; 1 bytes @ 0x5
  5498                           
  5499  0075                     ??_TMR3_SetInterruptHandler:	
  5500                           ; 1 bytes @ 0x5
  5501                           
  5502  0075                     ??_TMR0_Initialize:	
  5503                           ; 1 bytes @ 0x5
  5504                           
  5505  0075                     ??_TMR1_Initialize:	
  5506                           ; 1 bytes @ 0x5
  5507                           
  5508  0075                     ??_INT_SetInterruptHandler:	
  5509                           ; 1 bytes @ 0x5
  5510                           
  5511  0075                     ??_FLASH_read:	
  5512                           ; 1 bytes @ 0x5
  5513                           
  5514  0075                     ??_FLASH_erase:	
  5515                           ; 1 bytes @ 0x5
  5516                           
  5517  0075                     ??___lldiv:	
  5518                           ; 1 bytes @ 0x5
  5519                           
  5520  0075                     ??___lwdiv:	
  5521                           ; 1 bytes @ 0x5
  5522                           
  5523  0075                     LCDSendData@value:	
  5524                           ; 1 bytes @ 0x5
  5525                           
  5526  0075                     FLASH_erase@temp:	
  5527                           ; 1 bytes @ 0x5
  5528                           
  5529  0075                     memset@p1:	
  5530                           ; 1 bytes @ 0x5
  5531                           
  5532                           
  5533                           ; 1 bytes @ 0x5
  5534  0075                     	ds	1
  5535  0076                     ??_SYSTEM_Initialize:	
  5536                           
  5537                           	psect	cstackBANK0
  5538  0020                     __pcstackBANK0:	
  5539                           ; 1 bytes @ 0x6
  5540                           
  5541  0020                     ?_HEFLASH_readBlock:	
  5542  0020                     ?_memset:	
  5543                           ; 1 bytes @ 0x0
  5544                           
  5545  0020                     ?__fassert:	
  5546                           ; 1 bytes @ 0x0
  5547                           
  5548  0020                     ??_LCDSendData:	
  5549                           ; 1 bytes @ 0x0
  5550                           
  5551  0020                     ?_FLASH_write:	
  5552                           ; 1 bytes @ 0x0
  5553                           
  5554  0020                     ?___lwmod:	
  5555                           ; 1 bytes @ 0x0
  5556                           
  5557  0020                     ?___llmod:	
  5558                           ; 2 bytes @ 0x0
  5559                           
  5560  0020                     HEFLASH_readBlock@radd:	
  5561                           ; 4 bytes @ 0x0
  5562                           
  5563  0020                     __fassert@line:	
  5564                           ; 1 bytes @ 0x0
  5565                           
  5566  0020                     FLASH_write@address:	
  5567                           ; 2 bytes @ 0x0
  5568                           
  5569  0020                     ___lwmod@divisor:	
  5570                           ; 2 bytes @ 0x0
  5571                           
  5572  0020                     memset@c:	
  5573                           ; 2 bytes @ 0x0
  5574                           
  5575  0020                     ___llmod@divisor:	
  5576                           ; 2 bytes @ 0x0
  5577                           
  5578                           
  5579                           ; 4 bytes @ 0x0
  5580  0020                     	ds	1
  5581  0021                     HEFLASH_readBlock@count:	
  5582                           
  5583                           ; 1 bytes @ 0x1
  5584  0021                     	ds	1
  5585  0022                     ??_HEFLASH_readBlock:	
  5586  0022                     ??_LCDInit:	
  5587                           ; 1 bytes @ 0x2
  5588                           
  5589  0022                     ?_Print:	
  5590                           ; 1 bytes @ 0x2
  5591                           
  5592  0022                     __fassert@file:	
  5593                           ; 1 bytes @ 0x2
  5594                           
  5595  0022                     Print@str:	
  5596                           ; 2 bytes @ 0x2
  5597                           
  5598  0022                     FLASH_write@data:	
  5599                           ; 2 bytes @ 0x2
  5600                           
  5601  0022                     ___lwmod@dividend:	
  5602                           ; 2 bytes @ 0x2
  5603                           
  5604  0022                     memset@n:	
  5605                           ; 2 bytes @ 0x2
  5606                           
  5607                           
  5608                           ; 2 bytes @ 0x2
  5609  0022                     	ds	2
  5610  0024                     ??_Print:	
  5611  0024                     ?___lwdiv:	
  5612                           ; 1 bytes @ 0x4
  5613                           
  5614  0024                     FLASH_write@latch:	
  5615                           ; 2 bytes @ 0x4
  5616                           
  5617  0024                     __fassert@expr:	
  5618                           ; 1 bytes @ 0x4
  5619                           
  5620  0024                     HEFLASH_readBlock@add:	
  5621                           ; 2 bytes @ 0x4
  5622                           
  5623  0024                     ___lwdiv@divisor:	
  5624                           ; 2 bytes @ 0x4
  5625                           
  5626  0024                     ___llmod@dividend:	
  5627                           ; 2 bytes @ 0x4
  5628                           
  5629                           
  5630                           ; 4 bytes @ 0x4
  5631  0024                     	ds	1
  5632  0025                     ?_HEFLASH_writeBlock:	
  5633  0025                     HEFLASH_writeBlock@data:	
  5634                           ; 1 bytes @ 0x5
  5635                           
  5636                           
  5637                           ; 1 bytes @ 0x5
  5638  0025                     	ds	1
  5639  0026                     HEFLASH_writeBlock@count:	
  5640  0026                     HEFLASH_readBlock@buffer:	
  5641                           ; 1 bytes @ 0x6
  5642                           
  5643  0026                     ___lwdiv@dividend:	
  5644                           ; 1 bytes @ 0x6
  5645                           
  5646                           
  5647                           ; 2 bytes @ 0x6
  5648  0026                     	ds	1
  5649  0027                     ??_HEFLASH_writeBlock:	
  5650                           
  5651                           ; 1 bytes @ 0x7
  5652  0027                     	ds	1
  5653  0028                     ?___lldiv:	
  5654  0028                     ___lwdiv@counter:	
  5655                           ; 4 bytes @ 0x8
  5656                           
  5657  0028                     ___lldiv@divisor:	
  5658                           ; 1 bytes @ 0x8
  5659                           
  5660                           
  5661                           ; 4 bytes @ 0x8
  5662  0028                     	ds	1
  5663  0029                     HEFLASH_writeBlock@radd:	
  5664  0029                     ___lwdiv@quotient:	
  5665                           ; 1 bytes @ 0x9
  5666                           
  5667                           
  5668                           ; 2 bytes @ 0x9
  5669  0029                     	ds	1
  5670  002A                     HEFLASH_writeBlock@add:	
  5671                           
  5672                           ; 2 bytes @ 0xA
  5673  002A                     	ds	2
  5674  002C                     ___lldiv@dividend:	
  5675                           
  5676                           ; 4 bytes @ 0xC
  5677  002C                     	ds	4
  5678  0030                     ___lldiv@quotient:	
  5679                           
  5680                           ; 4 bytes @ 0x10
  5681  0030                     	ds	4
  5682  0034                     ___lldiv@counter:	
  5683                           
  5684                           ; 1 bytes @ 0x14
  5685  0034                     	ds	1
  5686  0035                     ??_Data_Toseg:	
  5687  0035                     ??_HEFLASH_checkData:	
  5688                           ; 1 bytes @ 0x15
  5689                           
  5690                           
  5691                           ; 1 bytes @ 0x15
  5692  0035                     	ds	9
  5693  003E                     HEFLASH_checkData@r:	
  5694                           
  5695                           ; 2 bytes @ 0x1E
  5696  003E                     	ds	2
  5697  0040                     ??_main:	
  5698                           
  5699                           ; 1 bytes @ 0x20
  5700  0040                     	ds	2
  5701                           
  5702                           	psect	maintext
  5703  0529                     __pmaintext:	
  5704 ;;
  5705 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  5706 ;;
  5707 ;; *************** function _main *****************
  5708 ;; Defined at:
  5709 ;;		line 254 in file "main.c"
  5710 ;; Parameters:    Size  Location     Type
  5711 ;;		None
  5712 ;; Auto vars:     Size  Location     Type
  5713 ;;		None
  5714 ;; Return value:  Size  Location     Type
  5715 ;;                  1    wreg      void 
  5716 ;; Registers used:
  5717 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5718 ;; Tracked objects:
  5719 ;;		On entry : B1F/0
  5720 ;;		On exit  : 0/0
  5721 ;;		Unchanged: 0/0
  5722 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5723 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5724 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5725 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5726 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5727 ;;Total ram usage:        2 bytes
  5728 ;; Hardware stack levels required when called:    8
  5729 ;; This function calls:
  5730 ;;		_Data_Toseg
  5731 ;;		_HEFLASH_checkData
  5732 ;;		_HEFLASH_writeBlock
  5733 ;;		_LCDInit
  5734 ;;		_LCDSendData
  5735 ;;		_Print
  5736 ;;		_SYSTEM_Initialize
  5737 ;;		_bsp_CounterInit
  5738 ;;		_memset
  5739 ;; This function is called by:
  5740 ;;		Startup code after reset
  5741 ;; This function uses a non-reentrant model
  5742 ;;
  5743                           
  5744                           
  5745                           ;psect for function _main
  5746  0529                     _main:	
  5747                           
  5748                           ;main.c: 258: SYSTEM_Initialize();
  5749                           
  5750                           ;incstack = 0
  5751                           ; Regs used in _main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5752  0529  318C  2460  3185   	fcall	_SYSTEM_Initialize
  5753                           
  5754                           ;main.c: 259: bsp_CounterInit();
  5755  052C  318D  2507  3185   	fcall	_bsp_CounterInit
  5756                           
  5757                           ;main.c: 260: LCDInit();
  5758  052F  318F  2787  3185   	fcall	_LCDInit
  5759                           
  5760                           ;main.c: 264: HEFLASH_checkData();
  5761  0532  3180  2069  3185   	fcall	_HEFLASH_checkData
  5762                           
  5763                           ;main.c: 266: LCDSendData(0, 0b10000000);
  5764  0535  3000               	movlw	0
  5765  0536  00F3               	movwf	LCDSendData@RS
  5766  0537  00F4               	movwf	LCDSendData@RS+1
  5767  0538  3080               	movlw	128
  5768  0539  0020               	movlb	0	; select bank0
  5769  053A  00C0               	movwf	??_main
  5770  053B  0840               	movf	??_main,w
  5771  053C  00F5               	movwf	LCDSendData@value
  5772  053D  3187  2747  3185   	fcall	_LCDSendData
  5773                           
  5774                           ;main.c: 267: Print(display_data_1);
  5775  0540  30A0               	movlw	low _display_data_1
  5776  0541  0020               	movlb	0	; select bank0
  5777  0542  00A2               	movwf	Print@str
  5778  0543  3000               	movlw	high _display_data_1
  5779  0544  00A3               	movwf	Print@str+1
  5780  0545  318D  2545  3185   	fcall	_Print
  5781                           
  5782                           ;main.c: 268: _delay((unsigned long)((200)*(2000000/4000.0)));
  5783  0548  3082               	movlw	130
  5784  0549  0020               	movlb	0	; select bank0
  5785  054A  00C0               	movwf	??_main
  5786  054B  30DD               	movlw	221
  5787  054C                     u2457:	
  5788  054C  0B89               	decfsz	9,f
  5789  054D  2D4C               	goto	u2457
  5790  054E  0BC0               	decfsz	??_main,f
  5791  054F  2D4C               	goto	u2457
  5792  0550  3200               	nop2
  5793                           
  5794                           ;main.c: 269: LCDSendData(0, 0b11000000);
  5795  0551  3000               	movlw	0
  5796  0552  00F3               	movwf	LCDSendData@RS
  5797  0553  00F4               	movwf	LCDSendData@RS+1
  5798  0554  30C0               	movlw	192
  5799  0555  0020               	movlb	0	; select bank0
  5800  0556  00C0               	movwf	??_main
  5801  0557  0840               	movf	??_main,w
  5802  0558  00F5               	movwf	LCDSendData@value
  5803  0559  3187  2747  3185   	fcall	_LCDSendData
  5804                           
  5805                           ;main.c: 270: Print(display_data_2);
  5806  055C  30BB               	movlw	low _display_data_2
  5807  055D  0020               	movlb	0	; select bank0
  5808  055E  00A2               	movwf	Print@str
  5809  055F  3000               	movlw	high _display_data_2
  5810  0560  00A3               	movwf	Print@str+1
  5811  0561  318D  2545  3185   	fcall	_Print
  5812                           
  5813                           ;main.c: 272: (INTCONbits.GIE = 1);
  5814  0564  178B               	bsf	11,7	;volatile
  5815                           
  5816                           ;main.c: 275: (INTCONbits.PEIE = 1);
  5817  0565  170B               	bsf	11,6	;volatile
  5818  0566                     l2679:	
  5819                           ;main.c: 284: while (1)
  5820                           
  5821                           
  5822                           ;main.c: 285: {
  5823                           ;main.c: 287: if(gInterruptFlag)
  5824  0566  0020               	movlb	0	; select bank0
  5825  0567  085D               	movf	_gInterruptFlag,w	;volatile
  5826  0568  1D03               	btfss	3,2
  5827                           
  5828                           ;main.c: 288: {
  5829                           ;main.c: 290: gInterruptFlag = 0;
  5830  0569  01DD               	clrf	_gInterruptFlag	;volatile
  5831                           
  5832                           ;main.c: 291: }
  5833                           ;main.c: 293: if(0 == PORTAbits.RA1 )
  5834  056A  188C               	btfsc	12,1	;volatile
  5835  056B  2DBB               	goto	l2705
  5836                           
  5837                           ;main.c: 294: {
  5838                           ;main.c: 295: _delay((unsigned long)((5)*(2000000/4000.0)));
  5839  056C  3004               	movlw	4
  5840  056D  0020               	movlb	0	; select bank0
  5841  056E  00C0               	movwf	??_main
  5842  056F  303D               	movlw	61
  5843  0570                     u2467:	
  5844  0570  0B89               	decfsz	9,f
  5845  0571  2D70               	goto	u2467
  5846  0572  0BC0               	decfsz	??_main,f
  5847  0573  2D70               	goto	u2467
  5848  0574  3200               	nop2
  5849                           
  5850                           ;main.c: 296: if(0 == PORTAbits.RA1 )
  5851  0575  0020               	movlb	0	; select bank0
  5852  0576  188C               	btfsc	12,1	;volatile
  5853  0577  2DC3               	goto	l2707
  5854                           
  5855                           ;main.c: 297: {
  5856                           ;main.c: 298: KeyPushTimeCnt++;
  5857  0578  3001               	movlw	1
  5858  0579  07D7               	addwf	_KeyPushTimeCnt,f	;volatile
  5859  057A  3000               	movlw	0
  5860  057B  3DD8               	addwfc	_KeyPushTimeCnt+1,f	;volatile
  5861  057C  3000               	movlw	0
  5862  057D  3DD9               	addwfc	_KeyPushTimeCnt+2,f	;volatile
  5863  057E  3000               	movlw	0
  5864  057F  3DDA               	addwfc	_KeyPushTimeCnt+3,f	;volatile
  5865                           
  5866                           ;main.c: 299: if(KeyPushTimeCnt > 600)
  5867  0580  085A               	movf	_KeyPushTimeCnt+3,w	;volatile
  5868  0581  1D03               	btfss	3,2
  5869  0582  2D8C               	goto	l2693
  5870  0583  0859               	movf	_KeyPushTimeCnt+2,w	;volatile
  5871  0584  1D03               	btfss	3,2
  5872  0585  2D8C               	goto	l2693
  5873  0586  3059               	movlw	89
  5874  0587  0257               	subwf	_KeyPushTimeCnt,w	;volatile
  5875  0588  3002               	movlw	2
  5876  0589  3B58               	subwfb	_KeyPushTimeCnt+1,w	;volatile
  5877  058A  1C03               	btfss	3,0
  5878  058B  2DB7               	goto	l2701
  5879  058C                     l2693:	
  5880                           
  5881                           ;main.c: 300: {
  5882                           ;main.c: 301: KeyClearHEFFlag = 1;
  5883  058C  3001               	movlw	1
  5884  058D  00C0               	movwf	??_main
  5885  058E  0840               	movf	??_main,w
  5886  058F  00DB               	movwf	_KeyClearHEFFlag	;volatile
  5887                           
  5888                           ;main.c: 302: KeyPushTimeCnt = 0;
  5889  0590  3000               	movlw	0
  5890  0591  00DA               	movwf	_KeyPushTimeCnt+3	;volatile
  5891  0592  3000               	movlw	0
  5892  0593  00D9               	movwf	_KeyPushTimeCnt+2	;volatile
  5893  0594  3000               	movlw	0
  5894  0595  00D8               	movwf	_KeyPushTimeCnt+1	;volatile
  5895  0596  3000               	movlw	0
  5896  0597  00D7               	movwf	_KeyPushTimeCnt	;volatile
  5897                           
  5898                           ;main.c: 303: LCDSendData(0, 0b10000000);
  5899  0598  3000               	movlw	0
  5900  0599  00F3               	movwf	LCDSendData@RS
  5901  059A  00F4               	movwf	LCDSendData@RS+1
  5902  059B  3080               	movlw	128
  5903  059C  00C0               	movwf	??_main
  5904  059D  0840               	movf	??_main,w
  5905  059E  00F5               	movwf	LCDSendData@value
  5906  059F  3187  2747  3185   	fcall	_LCDSendData
  5907                           
  5908                           ;main.c: 304: Print(clearingData);
  5909  05A2  3020               	movlw	low _clearingData
  5910  05A3  0020               	movlb	0	; select bank0
  5911  05A4  00A2               	movwf	Print@str
  5912  05A5  3001               	movlw	high _clearingData
  5913  05A6  00A3               	movwf	Print@str+1
  5914  05A7  318D  2545  3185   	fcall	_Print
  5915                           
  5916                           ;main.c: 305: _delay((unsigned long)((1000)*(2000000/4000.0)));
  5917  05AA  3003               	movlw	3
  5918  05AB  0020               	movlb	0	; select bank0
  5919  05AC  00C1               	movwf	??_main+1
  5920  05AD  308A               	movlw	138
  5921  05AE  00C0               	movwf	??_main
  5922  05AF  3055               	movlw	85
  5923  05B0                     u2477:	
  5924  05B0  0B89               	decfsz	9,f
  5925  05B1  2DB0               	goto	u2477
  5926  05B2  0BC0               	decfsz	??_main,f
  5927  05B3  2DB0               	goto	u2477
  5928  05B4  0BC1               	decfsz	??_main+1,f
  5929  05B5  2DB0               	goto	u2477
  5930  05B6  3200               	nop2
  5931  05B7                     l2701:	
  5932                           
  5933                           ;main.c: 306: }
  5934                           ;main.c: 307: gBoxCntStruct.AlarmFlag = 0;
  5935  05B7  0020               	movlb	0	; select bank0
  5936  05B8  01C4               	clrf	_gBoxCntStruct+2
  5937                           
  5938                           ;main.c: 308: gBoxCntStruct.JamFlag = 0;
  5939  05B9  01C5               	clrf	_gBoxCntStruct+3
  5940                           
  5941                           ;main.c: 309: }
  5942                           ;main.c: 310: }
  5943  05BA  2DC3               	goto	l2707
  5944  05BB                     l2705:	
  5945                           
  5946                           ;main.c: 311: else
  5947                           ;main.c: 312: {
  5948                           ;main.c: 313: KeyPushTimeCnt = 0;
  5949  05BB  3000               	movlw	0
  5950  05BC  00DA               	movwf	_KeyPushTimeCnt+3	;volatile
  5951  05BD  3000               	movlw	0
  5952  05BE  00D9               	movwf	_KeyPushTimeCnt+2	;volatile
  5953  05BF  3000               	movlw	0
  5954  05C0  00D8               	movwf	_KeyPushTimeCnt+1	;volatile
  5955  05C1  3000               	movlw	0
  5956  05C2  00D7               	movwf	_KeyPushTimeCnt	;volatile
  5957  05C3                     l2707:	
  5958                           
  5959                           ;main.c: 314: }
  5960                           ;main.c: 316: if(1 == PORTAbits.RA1 && 1 == KeyClearHEFFlag )
  5961  05C3  1C8C               	btfss	12,1	;volatile
  5962  05C4  2E1B               	goto	l2733
  5963  05C5  035B               	decf	_KeyClearHEFFlag,w	;volatile
  5964  05C6  1D03               	btfss	3,2
  5965  05C7  2E1B               	goto	l2733
  5966                           
  5967                           ;main.c: 317: {
  5968                           ;main.c: 318: KeyClearHEFFlag = 0;
  5969  05C8  01DB               	clrf	_KeyClearHEFFlag	;volatile
  5970                           
  5971                           ;main.c: 319: memset(&HEFBufferData, 0, sizeof(HEFBufferData));
  5972  05C9  3000               	movlw	0
  5973  05CA  00A0               	movwf	memset@c
  5974  05CB  00A1               	movwf	memset@c+1
  5975  05CC  3020               	movlw	32
  5976  05CD  00A2               	movwf	memset@n
  5977  05CE  3000               	movlw	0
  5978  05CF  00A3               	movwf	memset@n+1
  5979  05D0  30C6               	movlw	(low (_HEFBufferData| 0))& (0+255)
  5980  05D1  318C  24EB  3185   	fcall	_memset
  5981                           
  5982                           ;main.c: 320: HEFBufferData[0] = 0xAA;
  5983  05D4  30AA               	movlw	170
  5984  05D5  0020               	movlb	0	; select bank0
  5985  05D6  00C0               	movwf	??_main
  5986  05D7  0840               	movf	??_main,w
  5987  05D8  0021               	movlb	1	; select bank1
  5988  05D9  00C6               	movwf	_HEFBufferData^(0+128)
  5989                           
  5990                           ;main.c: 321: (INTCONbits.GIE = 0);
  5991  05DA  138B               	bcf	11,7	;volatile
  5992                           
  5993                           ;main.c: 322: HEFLASH_writeBlock(0, (void*)&HEFBufferData,sizeof(HEFBufferData));
  5994  05DB  30C6               	movlw	(low (_HEFBufferData| 0))& (0+255)
  5995  05DC  0020               	movlb	0	; select bank0
  5996  05DD  00C0               	movwf	??_main
  5997  05DE  0840               	movf	??_main,w
  5998  05DF  00A5               	movwf	HEFLASH_writeBlock@data
  5999  05E0  3020               	movlw	32
  6000  05E1  00C1               	movwf	??_main+1
  6001  05E2  0841               	movf	??_main+1,w
  6002  05E3  00A6               	movwf	HEFLASH_writeBlock@count
  6003  05E4  3000               	movlw	0
  6004  05E5  318F  272F  3185   	fcall	_HEFLASH_writeBlock
  6005                           
  6006                           ;main.c: 323: (INTCONbits.GIE = 1);
  6007  05E8  178B               	bsf	11,7	;volatile
  6008                           
  6009                           ;main.c: 324: LCDSendData(0, 0b10000000);
  6010  05E9  3000               	movlw	0
  6011  05EA  00F3               	movwf	LCDSendData@RS
  6012  05EB  00F4               	movwf	LCDSendData@RS+1
  6013  05EC  3080               	movlw	128
  6014  05ED  0020               	movlb	0	; select bank0
  6015  05EE  00C0               	movwf	??_main
  6016  05EF  0840               	movf	??_main,w
  6017  05F0  00F5               	movwf	LCDSendData@value
  6018  05F1  3187  2747  3185   	fcall	_LCDSendData
  6019                           
  6020                           ;main.c: 325: Print(clearDataOk_1);
  6021  05F4  3032               	movlw	low _clearDataOk_1
  6022  05F5  0020               	movlb	0	; select bank0
  6023  05F6  00A2               	movwf	Print@str
  6024  05F7  3001               	movlw	high _clearDataOk_1
  6025  05F8  00A3               	movwf	Print@str+1
  6026  05F9  318D  2545  3185   	fcall	_Print
  6027                           
  6028                           ;main.c: 326: LCDSendData(0, 0b11000000);
  6029  05FC  3000               	movlw	0
  6030  05FD  00F3               	movwf	LCDSendData@RS
  6031  05FE  00F4               	movwf	LCDSendData@RS+1
  6032  05FF  30C0               	movlw	192
  6033  0600  0020               	movlb	0	; select bank0
  6034  0601  00C0               	movwf	??_main
  6035  0602  0840               	movf	??_main,w
  6036  0603  00F5               	movwf	LCDSendData@value
  6037  0604  3187  2747  3185   	fcall	_LCDSendData
  6038                           
  6039                           ;main.c: 327: Print(clearDataOk_2);
  6040  0607  30B0               	movlw	low _clearDataOk_2
  6041  0608  0020               	movlb	0	; select bank0
  6042  0609  00A2               	movwf	Print@str
  6043  060A  3000               	movlw	high _clearDataOk_2
  6044  060B  00A3               	movwf	Print@str+1
  6045  060C  318D  2545  3185   	fcall	_Print
  6046                           
  6047                           ;main.c: 328: _delay((unsigned long)((800)*(2000000/4000.0)));
  6048  060F  3003               	movlw	3
  6049  0610  0020               	movlb	0	; select bank0
  6050  0611  00C1               	movwf	??_main+1
  6051  0612  3008               	movlw	8
  6052  0613  00C0               	movwf	??_main
  6053  0614  3077               	movlw	119
  6054  0615                     u2487:	
  6055  0615  0B89               	decfsz	9,f
  6056  0616  2E15               	goto	u2487
  6057  0617  0BC0               	decfsz	??_main,f
  6058  0618  2E15               	goto	u2487
  6059  0619  0BC1               	decfsz	??_main+1,f
  6060  061A  2E15               	goto	u2487
  6061  061B                     l2733:	
  6062                           
  6063                           ;main.c: 329: }
  6064                           ;main.c: 331: if(gTimer0NormalFlashFlag)
  6065  061B  0878               	movf	_gTimer0NormalFlashFlag,w	;volatile
  6066  061C  1903               	btfsc	3,2
  6067  061D  2E39               	goto	l2743
  6068                           
  6069                           ;main.c: 332: {
  6070                           ;main.c: 333: gTimer0NormalFlashFlag = 0;
  6071  061E  01F8               	clrf	_gTimer0NormalFlashFlag	;volatile
  6072                           
  6073                           ;main.c: 335: do { LATAbits.LATA4 = ~LATAbits.LATA4; } while(0);
  6074  061F  1003               	clrc
  6075  0620  0022               	movlb	2	; select bank2
  6076  0621  1E0C               	btfss	12,4	;volatile
  6077  0622  1403               	setc
  6078  0623  1C03               	btfss	3,0
  6079  0624  2E28               	goto	u2350
  6080  0625  0022               	movlb	2	; select bank2
  6081  0626  160C               	bsf	12,4	;volatile
  6082  0627  2E2A               	goto	l2739
  6083  0628                     u2350:	
  6084  0628  0022               	movlb	2	; select bank2
  6085  0629  120C               	bcf	12,4	;volatile
  6086  062A                     l2739:	
  6087                           
  6088                           ;main.c: 336: if(0 == gBoxCntStruct.AlarmFlag)
  6089  062A  0020               	movlb	0	; select bank0
  6090  062B  0844               	movf	_gBoxCntStruct+2,w
  6091  062C  1D03               	btfss	3,2
  6092  062D  2E39               	goto	l2743
  6093                           
  6094                           ;main.c: 337: {
  6095                           ;main.c: 338: LATAbits.LATA5 = ~LATAbits.LATA4;
  6096  062E  1003               	clrc
  6097  062F  0022               	movlb	2	; select bank2
  6098  0630  1E0C               	btfss	12,4	;volatile
  6099  0631  1403               	setc
  6100  0632  1C03               	btfss	3,0
  6101  0633  2E37               	goto	u2380
  6102  0634  0022               	movlb	2	; select bank2
  6103  0635  168C               	bsf	12,5	;volatile
  6104  0636  2E39               	goto	l2743
  6105  0637                     u2380:	
  6106  0637  0022               	movlb	2	; select bank2
  6107  0638  128C               	bcf	12,5	;volatile
  6108  0639                     l2743:	
  6109                           
  6110                           ;main.c: 339: }
  6111                           ;main.c: 340: }
  6112                           ;main.c: 341: if(1 == gTimer0AlarmFlashFlag)
  6113  0639  037A               	decf	_gTimer0AlarmFlashFlag,w	;volatile
  6114  063A  1D03               	btfss	3,2
  6115  063B  2E4C               	goto	l2751
  6116                           
  6117                           ;main.c: 342: {
  6118                           ;main.c: 343: gTimer0AlarmFlashFlag = 0;
  6119  063C  01FA               	clrf	_gTimer0AlarmFlashFlag	;volatile
  6120                           
  6121                           ;main.c: 344: if(1 == gBoxCntStruct.AlarmFlag)
  6122  063D  0020               	movlb	0	; select bank0
  6123  063E  0344               	decf	_gBoxCntStruct+2,w
  6124  063F  1D03               	btfss	3,2
  6125  0640  2E4C               	goto	l2751
  6126                           
  6127                           ;main.c: 345: {
  6128                           ;main.c: 346: LATAbits.LATA5 = ~LATAbits.LATA5;
  6129  0641  1003               	clrc
  6130  0642  0022               	movlb	2	; select bank2
  6131  0643  1E8C               	btfss	12,5	;volatile
  6132  0644  1403               	setc
  6133  0645  1C03               	btfss	3,0
  6134  0646  2E4A               	goto	u2420
  6135  0647  0022               	movlb	2	; select bank2
  6136  0648  168C               	bsf	12,5	;volatile
  6137  0649  2E4C               	goto	l2751
  6138  064A                     u2420:	
  6139  064A  0022               	movlb	2	; select bank2
  6140  064B  128C               	bcf	12,5	;volatile
  6141  064C                     l2751:	
  6142                           
  6143                           ;main.c: 347: }
  6144                           ;main.c: 348: }
  6145                           ;main.c: 357: if(gBoxCntStruct.DisplayReflashFlag)
  6146  064C  0020               	movlb	0	; select bank0
  6147  064D  0846               	movf	_gBoxCntStruct+4,w
  6148  064E  1903               	btfsc	3,2
  6149  064F  2D66               	goto	l2679
  6150                           
  6151                           ;main.c: 358: {
  6152                           ;main.c: 360: gBoxCntStruct.DisplayReflashFlag = 0;
  6153  0650  01C6               	clrf	_gBoxCntStruct+4
  6154                           
  6155                           ;main.c: 361: Data_Toseg();
  6156  0651  3183  2306  3185   	fcall	_Data_Toseg
  6157                           
  6158                           ;main.c: 362: LCDSendData(0, 0b10000000);
  6159  0654  3000               	movlw	0
  6160  0655  00F3               	movwf	LCDSendData@RS
  6161  0656  00F4               	movwf	LCDSendData@RS+1
  6162  0657  3080               	movlw	128
  6163  0658  0020               	movlb	0	; select bank0
  6164  0659  00C0               	movwf	??_main
  6165  065A  0840               	movf	??_main,w
  6166  065B  00F5               	movwf	LCDSendData@value
  6167  065C  3187  2747  3185   	fcall	_LCDSendData
  6168                           
  6169                           ;main.c: 363: Print(display_data_1);
  6170  065F  30A0               	movlw	low _display_data_1
  6171  0660  0020               	movlb	0	; select bank0
  6172  0661  00A2               	movwf	Print@str
  6173  0662  3000               	movlw	high _display_data_1
  6174  0663  00A3               	movwf	Print@str+1
  6175  0664  318D  2545  3185   	fcall	_Print
  6176                           
  6177                           ;main.c: 364: LCDSendData(0, 0b11000000);
  6178  0667  3000               	movlw	0
  6179  0668  00F3               	movwf	LCDSendData@RS
  6180  0669  00F4               	movwf	LCDSendData@RS+1
  6181  066A  30C0               	movlw	192
  6182  066B  0020               	movlb	0	; select bank0
  6183  066C  00C0               	movwf	??_main
  6184  066D  0840               	movf	??_main,w
  6185  066E  00F5               	movwf	LCDSendData@value
  6186  066F  3187  2747  3185   	fcall	_LCDSendData
  6187                           
  6188                           ;main.c: 367: Print(display_data_2);
  6189  0672  30BB               	movlw	low _display_data_2
  6190  0673  0020               	movlb	0	; select bank0
  6191  0674  00A2               	movwf	Print@str
  6192  0675  3000               	movlw	high _display_data_2
  6193  0676  00A3               	movwf	Print@str+1
  6194  0677  318D  2545  3185   	fcall	_Print
  6195  067A  2D66               	goto	l2679
  6196  067B                     __end_of_main:	
  6197                           
  6198                           	psect	text1
  6199  0D07                     __ptext1:	
  6200 ;; *************** function _bsp_CounterInit *****************
  6201 ;; Defined at:
  6202 ;;		line 6 in file "bsp_counter.c"
  6203 ;; Parameters:    Size  Location     Type
  6204 ;;		None
  6205 ;; Auto vars:     Size  Location     Type
  6206 ;;		None
  6207 ;; Return value:  Size  Location     Type
  6208 ;;                  1    wreg      void 
  6209 ;; Registers used:
  6210 ;;		wreg, status,2
  6211 ;; Tracked objects:
  6212 ;;		On entry : 0/0
  6213 ;;		On exit  : 0/0
  6214 ;;		Unchanged: 0/0
  6215 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6216 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6217 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6218 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6219 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6220 ;;Total ram usage:        0 bytes
  6221 ;; Hardware stack levels used:    1
  6222 ;; Hardware stack levels required when called:    4
  6223 ;; This function calls:
  6224 ;;		Nothing
  6225 ;; This function is called by:
  6226 ;;		_main
  6227 ;; This function uses a non-reentrant model
  6228 ;;
  6229                           
  6230                           
  6231                           ;psect for function _bsp_CounterInit
  6232  0D07                     _bsp_CounterInit:	
  6233                           
  6234                           ;bsp_counter.c: 8: gBoxCntStruct.AlarmFlag = 0;
  6235                           
  6236                           ;incstack = 0
  6237                           ; Regs used in _bsp_CounterInit: [wreg+status,2]
  6238  0D07  0020               	movlb	0	; select bank0
  6239  0D08  01C4               	clrf	_gBoxCntStruct+2
  6240                           
  6241                           ;bsp_counter.c: 9: gBoxCntStruct.JamFlag = 0;
  6242  0D09  01C5               	clrf	_gBoxCntStruct+3
  6243                           
  6244                           ;bsp_counter.c: 10: gBoxCntStruct.LargeBoxCnt = 0;
  6245  0D0A  01CF               	clrf	_gBoxCntStruct+13
  6246  0D0B  01D0               	clrf	_gBoxCntStruct+14
  6247                           
  6248                           ;bsp_counter.c: 11: gBoxCntStruct.MiddleBoxCnt = 0;
  6249  0D0C  01CD               	clrf	_gBoxCntStruct+11
  6250  0D0D  01CE               	clrf	_gBoxCntStruct+12
  6251                           
  6252                           ;bsp_counter.c: 12: gBoxCntStruct.SmallBoxCnt = 0;
  6253  0D0E  01CB               	clrf	_gBoxCntStruct+9
  6254  0D0F  01CC               	clrf	_gBoxCntStruct+10
  6255                           
  6256                           ;bsp_counter.c: 13: gBoxCntStruct.BoxSum = 0;
  6257  0D10  3000               	movlw	0
  6258  0D11  00D6               	movwf	_gBoxCntStruct+20
  6259  0D12  3000               	movlw	0
  6260  0D13  00D5               	movwf	_gBoxCntStruct+19
  6261  0D14  3000               	movlw	0
  6262  0D15  00D4               	movwf	_gBoxCntStruct+18
  6263  0D16  3000               	movlw	0
  6264  0D17  00D3               	movwf	_gBoxCntStruct+17
  6265                           
  6266                           ;bsp_counter.c: 14: gBoxCntStruct.SingleTimeCnt = 0;
  6267  0D18  3000               	movlw	0
  6268  0D19  00CA               	movwf	_gBoxCntStruct+8
  6269  0D1A  3000               	movlw	0
  6270  0D1B  00C9               	movwf	_gBoxCntStruct+7
  6271  0D1C  3000               	movlw	0
  6272  0D1D  00C8               	movwf	_gBoxCntStruct+6
  6273  0D1E  3000               	movlw	0
  6274  0D1F  00C7               	movwf	_gBoxCntStruct+5
  6275                           
  6276                           ;bsp_counter.c: 15: gBoxCntStruct.TimeCntEndFlag = 0;
  6277  0D20  01C3               	clrf	_gBoxCntStruct+1
  6278                           
  6279                           ;bsp_counter.c: 16: gBoxCntStruct.TimeCntStartFlag = 0;
  6280  0D21  01C2               	clrf	_gBoxCntStruct
  6281                           
  6282                           ;bsp_counter.c: 17: gBoxCntStruct.DisplayReflashFlag = 0;
  6283  0D22  01C6               	clrf	_gBoxCntStruct+4
  6284  0D23  0008               	return
  6285  0D24                     __end_of_bsp_CounterInit:	
  6286                           
  6287                           	psect	text2
  6288  0C60                     __ptext2:	
  6289 ;; *************** function _SYSTEM_Initialize *****************
  6290 ;; Defined at:
  6291 ;;		line 50 in file "mcc_generated_files/mcc.c"
  6292 ;; Parameters:    Size  Location     Type
  6293 ;;		None
  6294 ;; Auto vars:     Size  Location     Type
  6295 ;;		None
  6296 ;; Return value:  Size  Location     Type
  6297 ;;                  1    wreg      void 
  6298 ;; Registers used:
  6299 ;;		wreg, status,2, status,0, pclath, cstack
  6300 ;; Tracked objects:
  6301 ;;		On entry : 0/0
  6302 ;;		On exit  : 0/0
  6303 ;;		Unchanged: 0/0
  6304 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6305 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6306 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6307 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6308 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6309 ;;Total ram usage:        0 bytes
  6310 ;; Hardware stack levels used:    1
  6311 ;; Hardware stack levels required when called:    6
  6312 ;; This function calls:
  6313 ;;		_EXT_INT_Initialize
  6314 ;;		_OSCILLATOR_Initialize
  6315 ;;		_PIN_MANAGER_Initialize
  6316 ;;		_TMR0_Initialize
  6317 ;;		_TMR1_Initialize
  6318 ;;		_TMR3_Initialize
  6319 ;; This function is called by:
  6320 ;;		_main
  6321 ;; This function uses a non-reentrant model
  6322 ;;
  6323                           
  6324                           
  6325                           ;psect for function _SYSTEM_Initialize
  6326  0C60                     _SYSTEM_Initialize:	
  6327                           
  6328                           ;mcc.c: 52: PIN_MANAGER_Initialize();
  6329                           
  6330                           ;incstack = 0
  6331                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  6332  0C60  318D  2567  318C   	fcall	_PIN_MANAGER_Initialize
  6333                           
  6334                           ;mcc.c: 53: OSCILLATOR_Initialize();
  6335  0C63  318B  23E7  318C   	fcall	_OSCILLATOR_Initialize
  6336                           
  6337                           ;mcc.c: 54: TMR3_Initialize();
  6338  0C66  318C  24B5  318C   	fcall	_TMR3_Initialize
  6339                           
  6340                           ;mcc.c: 55: EXT_INT_Initialize();
  6341  0C69  318C  2402  318C   	fcall	_EXT_INT_Initialize
  6342                           
  6343                           ;mcc.c: 56: TMR1_Initialize();
  6344  0C6C  318C  249E  318C   	fcall	_TMR1_Initialize
  6345                           
  6346                           ;mcc.c: 57: TMR0_Initialize();
  6347  0C6F  318C  2472         	fcall	_TMR0_Initialize
  6348  0C71  0008               	return
  6349  0C72                     __end_of_SYSTEM_Initialize:	
  6350                           
  6351                           	psect	text3
  6352  0CB5                     __ptext3:	
  6353 ;; *************** function _TMR3_Initialize *****************
  6354 ;; Defined at:
  6355 ;;		line 67 in file "mcc_generated_files/tmr3.c"
  6356 ;; Parameters:    Size  Location     Type
  6357 ;;		None
  6358 ;; Auto vars:     Size  Location     Type
  6359 ;;		None
  6360 ;; Return value:  Size  Location     Type
  6361 ;;                  1    wreg      void 
  6362 ;; Registers used:
  6363 ;;		wreg, status,2, status,0, pclath, cstack
  6364 ;; Tracked objects:
  6365 ;;		On entry : 0/0
  6366 ;;		On exit  : 0/0
  6367 ;;		Unchanged: 0/0
  6368 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6369 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6370 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6371 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6372 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6373 ;;Total ram usage:        0 bytes
  6374 ;; Hardware stack levels used:    1
  6375 ;; Hardware stack levels required when called:    5
  6376 ;; This function calls:
  6377 ;;		_TMR3_SetInterruptHandler
  6378 ;; This function is called by:
  6379 ;;		_SYSTEM_Initialize
  6380 ;; This function uses a non-reentrant model
  6381 ;;
  6382                           
  6383                           
  6384                           ;psect for function _TMR3_Initialize
  6385  0CB5                     _TMR3_Initialize:	
  6386                           
  6387                           ;tmr3.c: 72: T3GCON = 0x00;
  6388                           
  6389                           ;incstack = 0
  6390                           ; Regs used in _TMR3_Initialize: [wreg+status,2+status,0+pclath+cstack]
  6391  0CB5  0029               	movlb	9	; select bank9
  6392  0CB6  0196               	clrf	22	;volatile
  6393                           
  6394                           ;tmr3.c: 75: TMR3H = 0xEC;
  6395  0CB7  30EC               	movlw	236
  6396  0CB8  0094               	movwf	20	;volatile
  6397                           
  6398                           ;tmr3.c: 78: TMR3L = 0x78;
  6399  0CB9  3078               	movlw	120
  6400  0CBA  0093               	movwf	19	;volatile
  6401                           
  6402                           ;tmr3.c: 81: timer3ReloadVal=(uint16_t)((TMR3H << 8) | TMR3L);
  6403  0CBB  0814               	movf	20,w	;volatile
  6404  0CBC  0020               	movlb	0	; select bank0
  6405  0CBD  00E1               	movwf	_timer3ReloadVal+1	;volatile
  6406  0CBE  0029               	movlb	9	; select bank9
  6407  0CBF  0813               	movf	19,w	;volatile
  6408  0CC0  0020               	movlb	0	; select bank0
  6409  0CC1  00E0               	movwf	_timer3ReloadVal	;volatile
  6410                           
  6411                           ;tmr3.c: 84: PIR5bits.TMR3IF = 0;
  6412  0CC2  1314               	bcf	20,6	;volatile
  6413                           
  6414                           ;tmr3.c: 87: PIE5bits.TMR3IE = 1;
  6415  0CC3  0021               	movlb	1	; select bank1
  6416  0CC4  1714               	bsf	20,6	;volatile
  6417                           
  6418                           ;tmr3.c: 90: TMR3_SetInterruptHandler(TMR3_DefaultInterruptHandler);
  6419  0CC5  3003               	movlw	low _TMR3_DefaultInterruptHandler
  6420  0CC6  00F3               	movwf	TMR3_SetInterruptHandler@InterruptHandler
  6421  0CC7  3000               	movlw	high _TMR3_DefaultInterruptHandler
  6422  0CC8  00F4               	movwf	TMR3_SetInterruptHandler@InterruptHandler+1
  6423  0CC9  318B  23C7         	fcall	_TMR3_SetInterruptHandler
  6424                           
  6425                           ;tmr3.c: 93: T3CON = 0x05;
  6426  0CCB  3005               	movlw	5
  6427  0CCC  0029               	movlb	9	; select bank9
  6428  0CCD  0095               	movwf	21	;volatile
  6429  0CCE  0008               	return
  6430  0CCF                     __end_of_TMR3_Initialize:	
  6431                           
  6432                           	psect	text4
  6433  0BC7                     __ptext4:	
  6434 ;; *************** function _TMR3_SetInterruptHandler *****************
  6435 ;; Defined at:
  6436 ;;		line 182 in file "mcc_generated_files/tmr3.c"
  6437 ;; Parameters:    Size  Location     Type
  6438 ;;  InterruptHan    2    3[COMMON] PTR FTN()void 
  6439 ;;		 -> TMR3_DefaultInterruptHandler(1), 
  6440 ;; Auto vars:     Size  Location     Type
  6441 ;;		None
  6442 ;; Return value:  Size  Location     Type
  6443 ;;                  1    wreg      void 
  6444 ;; Registers used:
  6445 ;;		wreg
  6446 ;; Tracked objects:
  6447 ;;		On entry : 0/0
  6448 ;;		On exit  : 0/0
  6449 ;;		Unchanged: 0/0
  6450 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6451 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6452 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6453 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6454 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6455 ;;Total ram usage:        2 bytes
  6456 ;; Hardware stack levels used:    1
  6457 ;; Hardware stack levels required when called:    4
  6458 ;; This function calls:
  6459 ;;		Nothing
  6460 ;; This function is called by:
  6461 ;;		_TMR3_Initialize
  6462 ;; This function uses a non-reentrant model
  6463 ;;
  6464                           
  6465                           
  6466                           ;psect for function _TMR3_SetInterruptHandler
  6467  0BC7                     _TMR3_SetInterruptHandler:	
  6468                           
  6469                           ;tmr3.c: 183: TMR3_InterruptHandler = InterruptHandler;
  6470                           
  6471                           ;incstack = 0
  6472                           ; Regs used in _TMR3_SetInterruptHandler: [wreg]
  6473  0BC7  0874               	movf	TMR3_SetInterruptHandler@InterruptHandler+1,w
  6474  0BC8  0020               	movlb	0	; select bank0
  6475  0BC9  00DF               	movwf	_TMR3_InterruptHandler+1
  6476  0BCA  0873               	movf	TMR3_SetInterruptHandler@InterruptHandler,w
  6477  0BCB  00DE               	movwf	_TMR3_InterruptHandler
  6478  0BCC  0008               	return
  6479  0BCD                     __end_of_TMR3_SetInterruptHandler:	
  6480                           
  6481                           	psect	text5
  6482  0C9E                     __ptext5:	
  6483 ;; *************** function _TMR1_Initialize *****************
  6484 ;; Defined at:
  6485 ;;		line 64 in file "mcc_generated_files/tmr1.c"
  6486 ;; Parameters:    Size  Location     Type
  6487 ;;		None
  6488 ;; Auto vars:     Size  Location     Type
  6489 ;;		None
  6490 ;; Return value:  Size  Location     Type
  6491 ;;                  1    wreg      void 
  6492 ;; Registers used:
  6493 ;;		wreg, status,2, status,0, pclath, cstack
  6494 ;; Tracked objects:
  6495 ;;		On entry : 0/0
  6496 ;;		On exit  : 0/0
  6497 ;;		Unchanged: 0/0
  6498 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6499 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6500 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6501 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6502 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6503 ;;Total ram usage:        0 bytes
  6504 ;; Hardware stack levels used:    1
  6505 ;; Hardware stack levels required when called:    5
  6506 ;; This function calls:
  6507 ;;		_TMR1_SetInterruptHandler
  6508 ;; This function is called by:
  6509 ;;		_SYSTEM_Initialize
  6510 ;; This function uses a non-reentrant model
  6511 ;;
  6512                           
  6513                           
  6514                           ;psect for function _TMR1_Initialize
  6515  0C9E                     _TMR1_Initialize:	
  6516                           
  6517                           ;tmr1.c: 69: T1GCON = 0x00;
  6518                           
  6519                           ;incstack = 0
  6520                           ; Regs used in _TMR1_Initialize: [wreg+status,2+status,0+pclath+cstack]
  6521  0C9E  0020               	movlb	0	; select bank0
  6522  0C9F  0199               	clrf	25	;volatile
  6523                           
  6524                           ;tmr1.c: 72: TMR1H = 0xFF;
  6525  0CA0  30FF               	movlw	255
  6526  0CA1  0097               	movwf	23	;volatile
  6527                           
  6528                           ;tmr1.c: 75: TMR1L = 0xFF;
  6529  0CA2  30FF               	movlw	255
  6530  0CA3  0096               	movwf	22	;volatile
  6531                           
  6532                           ;tmr1.c: 78: timer1ReloadVal=(uint16_t)((TMR1H << 8) | TMR1L);
  6533  0CA4  0817               	movf	23,w	;volatile
  6534  0CA5  00E5               	movwf	_timer1ReloadVal+1	;volatile
  6535  0CA6  0816               	movf	22,w	;volatile
  6536  0CA7  00E4               	movwf	_timer1ReloadVal	;volatile
  6537                           
  6538                           ;tmr1.c: 81: PIR1bits.TMR1IF = 0;
  6539  0CA8  1010               	bcf	16,0	;volatile
  6540                           
  6541                           ;tmr1.c: 84: PIE1bits.TMR1IE = 1;
  6542  0CA9  0021               	movlb	1	; select bank1
  6543  0CAA  1410               	bsf	16,0	;volatile
  6544                           
  6545                           ;tmr1.c: 87: TMR1_SetInterruptHandler(TMR1_DefaultInterruptHandler);
  6546  0CAB  30B4               	movlw	low _TMR1_DefaultInterruptHandler
  6547  0CAC  00F3               	movwf	TMR1_SetInterruptHandler@InterruptHandler
  6548  0CAD  300B               	movlw	high _TMR1_DefaultInterruptHandler
  6549  0CAE  00F4               	movwf	TMR1_SetInterruptHandler@InterruptHandler+1
  6550  0CAF  318B  23C1         	fcall	_TMR1_SetInterruptHandler
  6551                           
  6552                           ;tmr1.c: 90: T1CON = 0x01;
  6553  0CB1  3001               	movlw	1
  6554  0CB2  0020               	movlb	0	; select bank0
  6555  0CB3  0098               	movwf	24	;volatile
  6556  0CB4  0008               	return
  6557  0CB5                     __end_of_TMR1_Initialize:	
  6558                           
  6559                           	psect	text6
  6560  0BC1                     __ptext6:	
  6561 ;; *************** function _TMR1_SetInterruptHandler *****************
  6562 ;; Defined at:
  6563 ;;		line 178 in file "mcc_generated_files/tmr1.c"
  6564 ;; Parameters:    Size  Location     Type
  6565 ;;  InterruptHan    2    3[COMMON] PTR FTN()void 
  6566 ;;		 -> TMR1_DefaultInterruptHandler(1), 
  6567 ;; Auto vars:     Size  Location     Type
  6568 ;;		None
  6569 ;; Return value:  Size  Location     Type
  6570 ;;                  1    wreg      void 
  6571 ;; Registers used:
  6572 ;;		wreg
  6573 ;; Tracked objects:
  6574 ;;		On entry : 0/0
  6575 ;;		On exit  : 0/0
  6576 ;;		Unchanged: 0/0
  6577 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6578 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6579 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6580 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6581 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6582 ;;Total ram usage:        2 bytes
  6583 ;; Hardware stack levels used:    1
  6584 ;; Hardware stack levels required when called:    4
  6585 ;; This function calls:
  6586 ;;		Nothing
  6587 ;; This function is called by:
  6588 ;;		_TMR1_Initialize
  6589 ;; This function uses a non-reentrant model
  6590 ;;
  6591                           
  6592                           
  6593                           ;psect for function _TMR1_SetInterruptHandler
  6594  0BC1                     _TMR1_SetInterruptHandler:	
  6595                           
  6596                           ;tmr1.c: 179: TMR1_InterruptHandler = InterruptHandler;
  6597                           
  6598                           ;incstack = 0
  6599                           ; Regs used in _TMR1_SetInterruptHandler: [wreg]
  6600  0BC1  0874               	movf	TMR1_SetInterruptHandler@InterruptHandler+1,w
  6601  0BC2  0020               	movlb	0	; select bank0
  6602  0BC3  00E3               	movwf	_TMR1_InterruptHandler+1
  6603  0BC4  0873               	movf	TMR1_SetInterruptHandler@InterruptHandler,w
  6604  0BC5  00E2               	movwf	_TMR1_InterruptHandler
  6605  0BC6  0008               	return
  6606  0BC7                     __end_of_TMR1_SetInterruptHandler:	
  6607                           
  6608                           	psect	text7
  6609  0C72                     __ptext7:	
  6610 ;; *************** function _TMR0_Initialize *****************
  6611 ;; Defined at:
  6612 ;;		line 68 in file "mcc_generated_files/tmr0.c"
  6613 ;; Parameters:    Size  Location     Type
  6614 ;;		None
  6615 ;; Auto vars:     Size  Location     Type
  6616 ;;		None
  6617 ;; Return value:  Size  Location     Type
  6618 ;;                  1    wreg      void 
  6619 ;; Registers used:
  6620 ;;		wreg, status,2, status,0, pclath, cstack
  6621 ;; Tracked objects:
  6622 ;;		On entry : 0/0
  6623 ;;		On exit  : 0/0
  6624 ;;		Unchanged: 0/0
  6625 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6626 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6627 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6628 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6629 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6630 ;;Total ram usage:        1 bytes
  6631 ;; Hardware stack levels used:    1
  6632 ;; Hardware stack levels required when called:    5
  6633 ;; This function calls:
  6634 ;;		_TMR0_SetInterruptHandler
  6635 ;; This function is called by:
  6636 ;;		_SYSTEM_Initialize
  6637 ;; This function uses a non-reentrant model
  6638 ;;
  6639                           
  6640                           
  6641                           ;psect for function _TMR0_Initialize
  6642  0C72                     _TMR0_Initialize:	
  6643                           
  6644                           ;tmr0.c: 73: OPTION_REG = (uint8_t)((OPTION_REG & 0xC0) | 0xD7 & 0x3F);
  6645                           
  6646                           ;incstack = 0
  6647                           ; Regs used in _TMR0_Initialize: [wreg+status,2+status,0+pclath+cstack]
  6648  0C72  0021               	movlb	1	; select bank1
  6649  0C73  0815               	movf	21,w	;volatile
  6650  0C74  39C0               	andlw	192
  6651  0C75  3817               	iorlw	23
  6652  0C76  0095               	movwf	21	;volatile
  6653                           
  6654                           ;tmr0.c: 76: TMR0 = 0x9E;
  6655  0C77  309E               	movlw	158
  6656  0C78  0020               	movlb	0	; select bank0
  6657  0C79  0095               	movwf	21	;volatile
  6658                           
  6659                           ;tmr0.c: 79: timer0ReloadVal= 158;
  6660  0C7A  309E               	movlw	158
  6661  0C7B  00F5               	movwf	??_TMR0_Initialize
  6662  0C7C  0875               	movf	??_TMR0_Initialize,w
  6663  0C7D  00E8               	movwf	_timer0ReloadVal	;volatile
  6664                           
  6665                           ;tmr0.c: 82: INTCONbits.TMR0IF = 0;
  6666  0C7E  110B               	bcf	11,2	;volatile
  6667                           
  6668                           ;tmr0.c: 85: INTCONbits.TMR0IE = 1;
  6669  0C7F  168B               	bsf	11,5	;volatile
  6670                           
  6671                           ;tmr0.c: 88: TMR0_SetInterruptHandler(TMR0_DefaultInterruptHandler);
  6672  0C80  30B3               	movlw	low _TMR0_DefaultInterruptHandler
  6673  0C81  00F3               	movwf	TMR0_SetInterruptHandler@InterruptHandler
  6674  0C82  300B               	movlw	high _TMR0_DefaultInterruptHandler
  6675  0C83  00F4               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1
  6676  0C84  318B  23BB         	fcall	_TMR0_SetInterruptHandler
  6677  0C86  0008               	return
  6678  0C87                     __end_of_TMR0_Initialize:	
  6679                           
  6680                           	psect	text8
  6681  0BBB                     __ptext8:	
  6682 ;; *************** function _TMR0_SetInterruptHandler *****************
  6683 ;; Defined at:
  6684 ;;		line 144 in file "mcc_generated_files/tmr0.c"
  6685 ;; Parameters:    Size  Location     Type
  6686 ;;  InterruptHan    2    3[COMMON] PTR FTN()void 
  6687 ;;		 -> TMR0_DefaultInterruptHandler(1), 
  6688 ;; Auto vars:     Size  Location     Type
  6689 ;;		None
  6690 ;; Return value:  Size  Location     Type
  6691 ;;                  1    wreg      void 
  6692 ;; Registers used:
  6693 ;;		wreg
  6694 ;; Tracked objects:
  6695 ;;		On entry : 0/0
  6696 ;;		On exit  : 0/0
  6697 ;;		Unchanged: 0/0
  6698 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6699 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6700 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6701 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6702 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6703 ;;Total ram usage:        2 bytes
  6704 ;; Hardware stack levels used:    1
  6705 ;; Hardware stack levels required when called:    4
  6706 ;; This function calls:
  6707 ;;		Nothing
  6708 ;; This function is called by:
  6709 ;;		_TMR0_Initialize
  6710 ;; This function uses a non-reentrant model
  6711 ;;
  6712                           
  6713                           
  6714                           ;psect for function _TMR0_SetInterruptHandler
  6715  0BBB                     _TMR0_SetInterruptHandler:	
  6716                           
  6717                           ;tmr0.c: 145: TMR0_InterruptHandler = InterruptHandler;
  6718                           
  6719                           ;incstack = 0
  6720                           ; Regs used in _TMR0_SetInterruptHandler: [wreg]
  6721  0BBB  0874               	movf	TMR0_SetInterruptHandler@InterruptHandler+1,w
  6722  0BBC  0020               	movlb	0	; select bank0
  6723  0BBD  00E7               	movwf	_TMR0_InterruptHandler+1
  6724  0BBE  0873               	movf	TMR0_SetInterruptHandler@InterruptHandler,w
  6725  0BBF  00E6               	movwf	_TMR0_InterruptHandler
  6726  0BC0  0008               	return
  6727  0BC1                     __end_of_TMR0_SetInterruptHandler:	
  6728                           
  6729                           	psect	text9
  6730  0D67                     __ptext9:	
  6731 ;; *************** function _PIN_MANAGER_Initialize *****************
  6732 ;; Defined at:
  6733 ;;		line 57 in file "mcc_generated_files/pin_manager.c"
  6734 ;; Parameters:    Size  Location     Type
  6735 ;;		None
  6736 ;; Auto vars:     Size  Location     Type
  6737 ;;		None
  6738 ;; Return value:  Size  Location     Type
  6739 ;;                  1    wreg      void 
  6740 ;; Registers used:
  6741 ;;		wreg, status,2
  6742 ;; Tracked objects:
  6743 ;;		On entry : 0/0
  6744 ;;		On exit  : 0/0
  6745 ;;		Unchanged: 0/0
  6746 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6747 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6748 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6749 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6750 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6751 ;;Total ram usage:        0 bytes
  6752 ;; Hardware stack levels used:    1
  6753 ;; Hardware stack levels required when called:    4
  6754 ;; This function calls:
  6755 ;;		Nothing
  6756 ;; This function is called by:
  6757 ;;		_SYSTEM_Initialize
  6758 ;; This function uses a non-reentrant model
  6759 ;;
  6760                           
  6761                           
  6762                           ;psect for function _PIN_MANAGER_Initialize
  6763  0D67                     _PIN_MANAGER_Initialize:	
  6764                           
  6765                           ;pin_manager.c: 62: LATA = 0x02;
  6766                           
  6767                           ;incstack = 0
  6768                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  6769  0D67  3002               	movlw	2
  6770  0D68  0022               	movlb	2	; select bank2
  6771  0D69  008C               	movwf	12	;volatile
  6772                           
  6773                           ;pin_manager.c: 63: LATB = 0xE0;
  6774  0D6A  30E0               	movlw	224
  6775  0D6B  008D               	movwf	13	;volatile
  6776                           
  6777                           ;pin_manager.c: 64: LATC = 0xFE;
  6778  0D6C  30FE               	movlw	254
  6779  0D6D  008E               	movwf	14	;volatile
  6780                           
  6781                           ;pin_manager.c: 69: TRISA = 0x05;
  6782  0D6E  3005               	movlw	5
  6783  0D6F  0021               	movlb	1	; select bank1
  6784  0D70  008C               	movwf	12	;volatile
  6785                           
  6786                           ;pin_manager.c: 70: TRISB = 0x10;
  6787  0D71  3010               	movlw	16
  6788  0D72  008D               	movwf	13	;volatile
  6789                           
  6790                           ;pin_manager.c: 71: TRISC = 0x01;
  6791  0D73  3001               	movlw	1
  6792  0D74  008E               	movwf	14	;volatile
  6793                           
  6794                           ;pin_manager.c: 76: ANSELC = 0x01;
  6795  0D75  3001               	movlw	1
  6796  0D76  0023               	movlb	3	; select bank3
  6797  0D77  008E               	movwf	14	;volatile
  6798                           
  6799                           ;pin_manager.c: 77: ANSELB = 0x10;
  6800  0D78  3010               	movlw	16
  6801  0D79  008D               	movwf	13	;volatile
  6802                           
  6803                           ;pin_manager.c: 78: ANSELA = 0x11;
  6804  0D7A  3011               	movlw	17
  6805  0D7B  008C               	movwf	12	;volatile
  6806                           
  6807                           ;pin_manager.c: 83: WPUB = 0x00;
  6808  0D7C  0024               	movlb	4	; select bank4
  6809  0D7D  018D               	clrf	13	;volatile
  6810                           
  6811                           ;pin_manager.c: 84: WPUA = 0x00;
  6812  0D7E  018C               	clrf	12	;volatile
  6813                           
  6814                           ;pin_manager.c: 85: WPUC = 0x00;
  6815  0D7F  018E               	clrf	14	;volatile
  6816                           
  6817                           ;pin_manager.c: 86: OPTION_REGbits.nWPUEN = 1;
  6818  0D80  0021               	movlb	1	; select bank1
  6819  0D81  1795               	bsf	21,7	;volatile
  6820                           
  6821                           ;pin_manager.c: 91: ODCONA = 0x00;
  6822  0D82  0025               	movlb	5	; select bank5
  6823  0D83  018C               	clrf	12	;volatile
  6824                           
  6825                           ;pin_manager.c: 92: ODCONB = 0x00;
  6826  0D84  018D               	clrf	13	;volatile
  6827                           
  6828                           ;pin_manager.c: 93: ODCONC = 0x00;
  6829  0D85  018E               	clrf	14	;volatile
  6830                           
  6831                           ;pin_manager.c: 101: INTCONbits.IOCIE = 1;
  6832  0D86  158B               	bsf	11,3	;volatile
  6833                           
  6834                           ;pin_manager.c: 104: INTPPS = 0x02;
  6835  0D87  3002               	movlw	2
  6836  0D88  003C               	movlb	28	; select bank28
  6837  0D89  0090               	movwf	16	;volatile
  6838  0D8A  0008               	return
  6839  0D8B                     __end_of_PIN_MANAGER_Initialize:	
  6840                           
  6841                           	psect	text10
  6842  0BE7                     __ptext10:	
  6843 ;; *************** function _OSCILLATOR_Initialize *****************
  6844 ;; Defined at:
  6845 ;;		line 60 in file "mcc_generated_files/mcc.c"
  6846 ;; Parameters:    Size  Location     Type
  6847 ;;		None
  6848 ;; Auto vars:     Size  Location     Type
  6849 ;;		None
  6850 ;; Return value:  Size  Location     Type
  6851 ;;                  1    wreg      void 
  6852 ;; Registers used:
  6853 ;;		wreg, status,2
  6854 ;; Tracked objects:
  6855 ;;		On entry : 0/0
  6856 ;;		On exit  : 0/0
  6857 ;;		Unchanged: 0/0
  6858 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6859 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6860 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6861 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6862 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6863 ;;Total ram usage:        0 bytes
  6864 ;; Hardware stack levels used:    1
  6865 ;; Hardware stack levels required when called:    4
  6866 ;; This function calls:
  6867 ;;		Nothing
  6868 ;; This function is called by:
  6869 ;;		_SYSTEM_Initialize
  6870 ;; This function uses a non-reentrant model
  6871 ;;
  6872                           
  6873                           
  6874                           ;psect for function _OSCILLATOR_Initialize
  6875  0BE7                     _OSCILLATOR_Initialize:	
  6876                           
  6877                           ;mcc.c: 63: OSCCON = 0x60;
  6878                           
  6879                           ;incstack = 0
  6880                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  6881  0BE7  3060               	movlw	96
  6882  0BE8  0021               	movlb	1	; select bank1
  6883  0BE9  0099               	movwf	25	;volatile
  6884                           
  6885                           ;mcc.c: 65: OSCTUNE = 0x00;
  6886  0BEA  0198               	clrf	24	;volatile
  6887                           
  6888                           ;mcc.c: 67: BORCON = 0x00;
  6889  0BEB  0022               	movlb	2	; select bank2
  6890  0BEC  0196               	clrf	22	;volatile
  6891  0BED  0008               	return
  6892  0BEE                     __end_of_OSCILLATOR_Initialize:	
  6893                           
  6894                           	psect	text11
  6895  0C02                     __ptext11:	
  6896 ;; *************** function _EXT_INT_Initialize *****************
  6897 ;; Defined at:
  6898 ;;		line 78 in file "mcc_generated_files/ext_int.c"
  6899 ;; Parameters:    Size  Location     Type
  6900 ;;		None
  6901 ;; Auto vars:     Size  Location     Type
  6902 ;;		None
  6903 ;; Return value:  Size  Location     Type
  6904 ;;                  1    wreg      void 
  6905 ;; Registers used:
  6906 ;;		wreg, status,2, status,0, pclath, cstack
  6907 ;; Tracked objects:
  6908 ;;		On entry : 0/0
  6909 ;;		On exit  : 0/0
  6910 ;;		Unchanged: 0/0
  6911 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6912 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6913 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6914 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6915 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6916 ;;Total ram usage:        0 bytes
  6917 ;; Hardware stack levels used:    1
  6918 ;; Hardware stack levels required when called:    5
  6919 ;; This function calls:
  6920 ;;		_INT_SetInterruptHandler
  6921 ;; This function is called by:
  6922 ;;		_SYSTEM_Initialize
  6923 ;; This function uses a non-reentrant model
  6924 ;;
  6925                           
  6926                           
  6927                           ;psect for function _EXT_INT_Initialize
  6928  0C02                     _EXT_INT_Initialize:	
  6929                           
  6930                           ;ext_int.c: 83: (INTCONbits.INTF = 0);
  6931                           
  6932                           ;incstack = 0
  6933                           ; Regs used in _EXT_INT_Initialize: [wreg+status,2+status,0+pclath+cstack]
  6934  0C02  108B               	bcf	11,1	;volatile
  6935                           
  6936                           ;ext_int.c: 84: (OPTION_REGbits.INTEDG = 0);
  6937  0C03  0021               	movlb	1	; select bank1
  6938  0C04  1315               	bcf	21,6	;volatile
  6939                           
  6940                           ;ext_int.c: 86: INT_SetInterruptHandler(INT_DefaultInterruptHandler);
  6941  0C05  30B1               	movlw	low _INT_DefaultInterruptHandler
  6942  0C06  00F3               	movwf	INT_SetInterruptHandler@InterruptHandler
  6943  0C07  300B               	movlw	high _INT_DefaultInterruptHandler
  6944  0C08  00F4               	movwf	INT_SetInterruptHandler@InterruptHandler+1
  6945  0C09  318B  23B5         	fcall	_INT_SetInterruptHandler
  6946                           
  6947                           ;ext_int.c: 87: (INTCONbits.INTE = 1);
  6948  0C0B  160B               	bsf	11,4	;volatile
  6949  0C0C  0008               	return
  6950  0C0D                     __end_of_EXT_INT_Initialize:	
  6951                           
  6952                           	psect	text12
  6953  0BB5                     __ptext12:	
  6954 ;; *************** function _INT_SetInterruptHandler *****************
  6955 ;; Defined at:
  6956 ;;		line 69 in file "mcc_generated_files/ext_int.c"
  6957 ;; Parameters:    Size  Location     Type
  6958 ;;  InterruptHan    2    3[COMMON] PTR FTN()void 
  6959 ;;		 -> INT_DefaultInterruptHandler(1), 
  6960 ;; Auto vars:     Size  Location     Type
  6961 ;;		None
  6962 ;; Return value:  Size  Location     Type
  6963 ;;                  1    wreg      void 
  6964 ;; Registers used:
  6965 ;;		wreg
  6966 ;; Tracked objects:
  6967 ;;		On entry : 0/0
  6968 ;;		On exit  : 0/0
  6969 ;;		Unchanged: 0/0
  6970 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6971 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6972 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6973 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6974 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6975 ;;Total ram usage:        2 bytes
  6976 ;; Hardware stack levels used:    1
  6977 ;; Hardware stack levels required when called:    4
  6978 ;; This function calls:
  6979 ;;		Nothing
  6980 ;; This function is called by:
  6981 ;;		_EXT_INT_Initialize
  6982 ;; This function uses a non-reentrant model
  6983 ;;
  6984                           
  6985                           
  6986                           ;psect for function _INT_SetInterruptHandler
  6987  0BB5                     _INT_SetInterruptHandler:	
  6988                           
  6989                           ;ext_int.c: 70: INT_InterruptHandler = InterruptHandler;
  6990                           
  6991                           ;incstack = 0
  6992                           ; Regs used in _INT_SetInterruptHandler: [wreg]
  6993  0BB5  0874               	movf	INT_SetInterruptHandler@InterruptHandler+1,w
  6994  0BB6  0021               	movlb	1	; select bank1
  6995  0BB7  00E7               	movwf	(_INT_InterruptHandler+1)^(0+128)
  6996  0BB8  0873               	movf	INT_SetInterruptHandler@InterruptHandler,w
  6997  0BB9  00E6               	movwf	_INT_InterruptHandler^(0+128)
  6998  0BBA  0008               	return
  6999  0BBB                     __end_of_INT_SetInterruptHandler:	
  7000                           
  7001                           	psect	text13
  7002  0D45                     __ptext13:	
  7003 ;; *************** function _Print *****************
  7004 ;; Defined at:
  7005 ;;		line 147 in file "main.c"
  7006 ;; Parameters:    Size  Location     Type
  7007 ;;  str             2    2[BANK0 ] PTR unsigned char 
  7008 ;;		 -> clearDataOk_2(11), clearDataOk_1(15), clearingData(18), display_data_2(11), 
  7009 ;;		 -> display_data_1(16), 
  7010 ;; Auto vars:     Size  Location     Type
  7011 ;;		None
  7012 ;; Return value:  Size  Location     Type
  7013 ;;                  1    wreg      void 
  7014 ;; Registers used:
  7015 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7016 ;; Tracked objects:
  7017 ;;		On entry : 0/0
  7018 ;;		On exit  : 0/0
  7019 ;;		Unchanged: 0/0
  7020 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7021 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7022 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7023 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7024 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7025 ;;Total ram usage:        3 bytes
  7026 ;; Hardware stack levels used:    1
  7027 ;; Hardware stack levels required when called:    5
  7028 ;; This function calls:
  7029 ;;		_LCDSendData
  7030 ;; This function is called by:
  7031 ;;		_main
  7032 ;; This function uses a non-reentrant model
  7033 ;;
  7034                           
  7035                           
  7036                           ;psect for function _Print
  7037  0D45                     _Print:	
  7038  0D45                     l2569:	
  7039                           ;main.c: 149: while(*str !='\0')
  7040                           
  7041                           ;incstack = 0
  7042                           ; Regs used in _Print: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7043                           
  7044  0D45  0020               	movlb	0	; select bank0
  7045  0D46  0822               	movf	Print@str,w
  7046  0D47  0086               	movwf	6
  7047  0D48  0823               	movf	Print@str+1,w
  7048  0D49  0087               	movwf	7
  7049  0D4A  0801               	movf	1,w
  7050  0D4B  1903               	btfsc	3,2
  7051  0D4C  0008               	return
  7052                           
  7053                           ;main.c: 150: {
  7054                           ;main.c: 151: LCDSendData(1,*str);
  7055  0D4D  3001               	movlw	1
  7056  0D4E  00F3               	movwf	LCDSendData@RS
  7057  0D4F  3000               	movlw	0
  7058  0D50  00F4               	movwf	LCDSendData@RS+1
  7059  0D51  0020               	movlb	0	; select bank0
  7060  0D52  0822               	movf	Print@str,w
  7061  0D53  0086               	movwf	6
  7062  0D54  0823               	movf	Print@str+1,w
  7063  0D55  0087               	movwf	7
  7064  0D56  0801               	movf	1,w
  7065  0D57  00A4               	movwf	??_Print
  7066  0D58  0824               	movf	??_Print,w
  7067  0D59  00F5               	movwf	LCDSendData@value
  7068  0D5A  3187  2747  318D   	fcall	_LCDSendData
  7069                           
  7070                           ;main.c: 152: str++;
  7071  0D5D  3001               	movlw	1
  7072  0D5E  0020               	movlb	0	; select bank0
  7073  0D5F  07A2               	addwf	Print@str,f
  7074  0D60  3000               	movlw	0
  7075  0D61  3DA3               	addwfc	Print@str+1,f
  7076                           
  7077                           ;main.c: 153: _delay((unsigned long)((1)*(2000000/4000.0)));
  7078  0D62  30A6               	movlw	166
  7079  0D63                     u2497:	
  7080  0D63  0B89               	decfsz	9,f
  7081  0D64  2D63               	goto	u2497
  7082  0D65  3200               	nop2
  7083  0D66  2D45               	goto	l2569
  7084  0D67                     __end_of_Print:	
  7085                           
  7086                           	psect	text14
  7087  0F87                     __ptext14:	
  7088 ;; *************** function _LCDInit *****************
  7089 ;; Defined at:
  7090 ;;		line 108 in file "main.c"
  7091 ;; Parameters:    Size  Location     Type
  7092 ;;		None
  7093 ;; Auto vars:     Size  Location     Type
  7094 ;;		None
  7095 ;; Return value:  Size  Location     Type
  7096 ;;                  1    wreg      void 
  7097 ;; Registers used:
  7098 ;;		wreg, status,2, status,0, pclath, cstack
  7099 ;; Tracked objects:
  7100 ;;		On entry : 0/0
  7101 ;;		On exit  : 0/0
  7102 ;;		Unchanged: 0/0
  7103 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7104 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7105 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7106 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7107 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7108 ;;Total ram usage:        1 bytes
  7109 ;; Hardware stack levels used:    1
  7110 ;; Hardware stack levels required when called:    5
  7111 ;; This function calls:
  7112 ;;		_LCDSendData
  7113 ;; This function is called by:
  7114 ;;		_main
  7115 ;; This function uses a non-reentrant model
  7116 ;;
  7117                           
  7118                           
  7119                           ;psect for function _LCDInit
  7120  0F87                     _LCDInit:	
  7121                           
  7122                           ;main.c: 110: LATBbits.LATB6 = 0;
  7123                           
  7124                           ;incstack = 0
  7125                           ; Regs used in _LCDInit: [wreg+status,2+status,0+pclath+cstack]
  7126  0F87  0022               	movlb	2	; select bank2
  7127  0F88  130D               	bcf	13,6	;volatile
  7128                           
  7129                           ;main.c: 111: LATBbits.LATB7 = 0;
  7130  0F89  138D               	bcf	13,7	;volatile
  7131                           
  7132                           ;main.c: 112: LATBbits.LATB5 = 0;
  7133  0F8A  128D               	bcf	13,5	;volatile
  7134                           
  7135                           ;main.c: 113: LATCbits.LATC1 = 0;
  7136  0F8B  108E               	bcf	14,1	;volatile
  7137                           
  7138                           ;main.c: 114: LATCbits.LATC2 = 0;
  7139  0F8C  110E               	bcf	14,2	;volatile
  7140                           
  7141                           ;main.c: 115: LATCbits.LATC3 = 0;
  7142  0F8D  118E               	bcf	14,3	;volatile
  7143                           
  7144                           ;main.c: 116: LATCbits.LATC4 = 0;
  7145  0F8E  120E               	bcf	14,4	;volatile
  7146                           
  7147                           ;main.c: 117: LATCbits.LATC5 = 0;
  7148  0F8F  128E               	bcf	14,5	;volatile
  7149                           
  7150                           ;main.c: 118: LATCbits.LATC6 = 0;
  7151  0F90  130E               	bcf	14,6	;volatile
  7152                           
  7153                           ;main.c: 119: LATCbits.LATC7 = 0;
  7154  0F91  138E               	bcf	14,7	;volatile
  7155                           
  7156                           ;main.c: 121: _delay((unsigned long)((50)*(2000000/4000.0)));
  7157  0F92  3021               	movlw	33
  7158  0F93  0020               	movlb	0	; select bank0
  7159  0F94  00A2               	movwf	??_LCDInit
  7160  0F95  3076               	movlw	118
  7161  0F96                     u2507:	
  7162  0F96  0B89               	decfsz	9,f
  7163  0F97  2F96               	goto	u2507
  7164  0F98  0BA2               	decfsz	??_LCDInit,f
  7165  0F99  2F96               	goto	u2507
  7166  0F9A  0000               	nop
  7167                           
  7168                           ;main.c: 122: LCDSendData(0, 0b00111000);
  7169  0F9B  3000               	movlw	0
  7170  0F9C  00F3               	movwf	LCDSendData@RS
  7171  0F9D  00F4               	movwf	LCDSendData@RS+1
  7172  0F9E  3038               	movlw	56
  7173  0F9F  0020               	movlb	0	; select bank0
  7174  0FA0  00A2               	movwf	??_LCDInit
  7175  0FA1  0822               	movf	??_LCDInit,w
  7176  0FA2  00F5               	movwf	LCDSendData@value
  7177  0FA3  3187  2747  318F   	fcall	_LCDSendData
  7178                           
  7179                           ;main.c: 125: _delay((unsigned long)((50)*(2000000/4000.0)));
  7180  0FA6  3021               	movlw	33
  7181  0FA7  0020               	movlb	0	; select bank0
  7182  0FA8  00A2               	movwf	??_LCDInit
  7183  0FA9  3076               	movlw	118
  7184  0FAA                     u2517:	
  7185  0FAA  0B89               	decfsz	9,f
  7186  0FAB  2FAA               	goto	u2517
  7187  0FAC  0BA2               	decfsz	??_LCDInit,f
  7188  0FAD  2FAA               	goto	u2517
  7189  0FAE  0000               	nop
  7190                           
  7191                           ;main.c: 126: LCDSendData(0, 0b00111000);
  7192  0FAF  3000               	movlw	0
  7193  0FB0  00F3               	movwf	LCDSendData@RS
  7194  0FB1  00F4               	movwf	LCDSendData@RS+1
  7195  0FB2  3038               	movlw	56
  7196  0FB3  0020               	movlb	0	; select bank0
  7197  0FB4  00A2               	movwf	??_LCDInit
  7198  0FB5  0822               	movf	??_LCDInit,w
  7199  0FB6  00F5               	movwf	LCDSendData@value
  7200  0FB7  3187  2747  318F   	fcall	_LCDSendData
  7201                           
  7202                           ;main.c: 129: _delay((unsigned long)((50)*(2000000/4000.0)));
  7203  0FBA  3021               	movlw	33
  7204  0FBB  0020               	movlb	0	; select bank0
  7205  0FBC  00A2               	movwf	??_LCDInit
  7206  0FBD  3076               	movlw	118
  7207  0FBE                     u2527:	
  7208  0FBE  0B89               	decfsz	9,f
  7209  0FBF  2FBE               	goto	u2527
  7210  0FC0  0BA2               	decfsz	??_LCDInit,f
  7211  0FC1  2FBE               	goto	u2527
  7212  0FC2  0000               	nop
  7213                           
  7214                           ;main.c: 130: LCDSendData(0, 0b00111000);
  7215  0FC3  3000               	movlw	0
  7216  0FC4  00F3               	movwf	LCDSendData@RS
  7217  0FC5  00F4               	movwf	LCDSendData@RS+1
  7218  0FC6  3038               	movlw	56
  7219  0FC7  0020               	movlb	0	; select bank0
  7220  0FC8  00A2               	movwf	??_LCDInit
  7221  0FC9  0822               	movf	??_LCDInit,w
  7222  0FCA  00F5               	movwf	LCDSendData@value
  7223  0FCB  3187  2747  318F   	fcall	_LCDSendData
  7224                           
  7225                           ;main.c: 133: _delay((unsigned long)((50)*(2000000/4000.0)));
  7226  0FCE  3021               	movlw	33
  7227  0FCF  0020               	movlb	0	; select bank0
  7228  0FD0  00A2               	movwf	??_LCDInit
  7229  0FD1  3076               	movlw	118
  7230  0FD2                     u2537:	
  7231  0FD2  0B89               	decfsz	9,f
  7232  0FD3  2FD2               	goto	u2537
  7233  0FD4  0BA2               	decfsz	??_LCDInit,f
  7234  0FD5  2FD2               	goto	u2537
  7235  0FD6  0000               	nop
  7236                           
  7237                           ;main.c: 134: LCDSendData(0, 0b00111000);
  7238  0FD7  3000               	movlw	0
  7239  0FD8  00F3               	movwf	LCDSendData@RS
  7240  0FD9  00F4               	movwf	LCDSendData@RS+1
  7241  0FDA  3038               	movlw	56
  7242  0FDB  0020               	movlb	0	; select bank0
  7243  0FDC  00A2               	movwf	??_LCDInit
  7244  0FDD  0822               	movf	??_LCDInit,w
  7245  0FDE  00F5               	movwf	LCDSendData@value
  7246  0FDF  3187  2747  318F   	fcall	_LCDSendData
  7247                           
  7248                           ;main.c: 135: LCDSendData(0, 0b00001111);
  7249  0FE2  3000               	movlw	0
  7250  0FE3  00F3               	movwf	LCDSendData@RS
  7251  0FE4  00F4               	movwf	LCDSendData@RS+1
  7252  0FE5  300F               	movlw	15
  7253  0FE6  0020               	movlb	0	; select bank0
  7254  0FE7  00A2               	movwf	??_LCDInit
  7255  0FE8  0822               	movf	??_LCDInit,w
  7256  0FE9  00F5               	movwf	LCDSendData@value
  7257  0FEA  3187  2747  318F   	fcall	_LCDSendData
  7258                           
  7259                           ;main.c: 136: LCDSendData(0, 0b00000001);
  7260  0FED  3000               	movlw	0
  7261  0FEE  00F3               	movwf	LCDSendData@RS
  7262  0FEF  00F4               	movwf	LCDSendData@RS+1
  7263  0FF0  01F5               	clrf	LCDSendData@value
  7264  0FF1  0AF5               	incf	LCDSendData@value,f
  7265  0FF2  3187  2747  318F   	fcall	_LCDSendData
  7266                           
  7267                           ;main.c: 137: LCDSendData(0, 0b00000110);
  7268  0FF5  3000               	movlw	0
  7269  0FF6  00F3               	movwf	LCDSendData@RS
  7270  0FF7  00F4               	movwf	LCDSendData@RS+1
  7271  0FF8  3006               	movlw	6
  7272  0FF9  0020               	movlb	0	; select bank0
  7273  0FFA  00A2               	movwf	??_LCDInit
  7274  0FFB  0822               	movf	??_LCDInit,w
  7275  0FFC  00F5               	movwf	LCDSendData@value
  7276  0FFD  3187  2747         	fcall	_LCDSendData
  7277  0FFF  0008               	return
  7278  1000                     __end_of_LCDInit:	
  7279                           
  7280                           	psect	text15
  7281  0747                     __ptext15:	
  7282 ;; *************** function _LCDSendData *****************
  7283 ;; Defined at:
  7284 ;;		line 84 in file "main.c"
  7285 ;; Parameters:    Size  Location     Type
  7286 ;;  RS              2    3[COMMON] int 
  7287 ;;  value           1    5[COMMON] unsigned char 
  7288 ;; Auto vars:     Size  Location     Type
  7289 ;;		None
  7290 ;; Return value:  Size  Location     Type
  7291 ;;                  1    wreg      void 
  7292 ;; Registers used:
  7293 ;;		wreg, status,2, status,0
  7294 ;; Tracked objects:
  7295 ;;		On entry : 0/0
  7296 ;;		On exit  : 0/0
  7297 ;;		Unchanged: 0/0
  7298 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7299 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7300 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7301 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7302 ;;      Totals:         3       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7303 ;;Total ram usage:        5 bytes
  7304 ;; Hardware stack levels used:    1
  7305 ;; Hardware stack levels required when called:    4
  7306 ;; This function calls:
  7307 ;;		Nothing
  7308 ;; This function is called by:
  7309 ;;		_LCDInit
  7310 ;;		_Print
  7311 ;;		_main
  7312 ;; This function uses a non-reentrant model
  7313 ;;
  7314                           
  7315                           
  7316                           ;psect for function _LCDSendData
  7317  0747                     _LCDSendData:	
  7318                           
  7319                           ;main.c: 86: LATBbits.LATB5 = value & 1;
  7320                           
  7321                           ;incstack = 0
  7322                           ; Regs used in _LCDSendData: [wreg+status,2+status,0]
  7323  0747  0875               	movf	LCDSendData@value,w
  7324  0748  3901               	andlw	1
  7325  0749  0020               	movlb	0	; select bank0
  7326  074A  00A0               	movwf	??_LCDSendData
  7327  074B  0EA0               	swapf	??_LCDSendData,f
  7328  074C  0DA0               	rlf	??_LCDSendData,f
  7329  074D  0022               	movlb	2	; select bank2
  7330  074E  080D               	movf	13,w	;volatile
  7331  074F  0020               	movlb	0	; select bank0
  7332  0750  0620               	xorwf	??_LCDSendData,w
  7333  0751  39DF               	andlw	-33
  7334  0752  0620               	xorwf	??_LCDSendData,w
  7335  0753  0022               	movlb	2	; select bank2
  7336  0754  008D               	movwf	13	;volatile
  7337                           
  7338                           ;main.c: 87: LATCbits.LATC1 = (value & 2) >> 1;
  7339  0755  3675               	lsrf	LCDSendData@value,w
  7340  0756  3901               	andlw	1
  7341  0757  0020               	movlb	0	; select bank0
  7342  0758  00A0               	movwf	??_LCDSendData
  7343  0759  0DA0               	rlf	??_LCDSendData,f
  7344  075A  0022               	movlb	2	; select bank2
  7345  075B  080E               	movf	14,w	;volatile
  7346  075C  0020               	movlb	0	; select bank0
  7347  075D  0620               	xorwf	??_LCDSendData,w
  7348  075E  39FD               	andlw	-3
  7349  075F  0620               	xorwf	??_LCDSendData,w
  7350  0760  0022               	movlb	2	; select bank2
  7351  0761  008E               	movwf	14	;volatile
  7352                           
  7353                           ;main.c: 88: LATCbits.LATC2 = (value & 4) >> 2;
  7354  0762  0875               	movf	LCDSendData@value,w
  7355  0763  0020               	movlb	0	; select bank0
  7356  0764  00A0               	movwf	??_LCDSendData
  7357  0765  3002               	movlw	2
  7358  0766                     u1245:	
  7359  0766  36A0               	lsrf	??_LCDSendData,f
  7360  0767  0B89               	decfsz	9,f
  7361  0768  2F66               	goto	u1245
  7362  0769  0820               	movf	??_LCDSendData,w
  7363  076A  3901               	andlw	1
  7364  076B  00A1               	movwf	??_LCDSendData+1
  7365  076C  0DA1               	rlf	??_LCDSendData+1,f
  7366  076D  0DA1               	rlf	??_LCDSendData+1,f
  7367  076E  0022               	movlb	2	; select bank2
  7368  076F  080E               	movf	14,w	;volatile
  7369  0770  0020               	movlb	0	; select bank0
  7370  0771  0621               	xorwf	??_LCDSendData+1,w
  7371  0772  39FB               	andlw	-5
  7372  0773  0621               	xorwf	??_LCDSendData+1,w
  7373  0774  0022               	movlb	2	; select bank2
  7374  0775  008E               	movwf	14	;volatile
  7375                           
  7376                           ;main.c: 89: LATCbits.LATC3 = (value & 8) >> 3;
  7377  0776  0875               	movf	LCDSendData@value,w
  7378  0777  0020               	movlb	0	; select bank0
  7379  0778  00A0               	movwf	??_LCDSendData
  7380  0779  3003               	movlw	3
  7381  077A                     u1255:	
  7382  077A  36A0               	lsrf	??_LCDSendData,f
  7383  077B  0B89               	decfsz	9,f
  7384  077C  2F7A               	goto	u1255
  7385  077D  0820               	movf	??_LCDSendData,w
  7386  077E  3901               	andlw	1
  7387  077F  00A1               	movwf	??_LCDSendData+1
  7388  0780  0DA1               	rlf	??_LCDSendData+1,f
  7389  0781  0DA1               	rlf	??_LCDSendData+1,f
  7390  0782  0DA1               	rlf	??_LCDSendData+1,f
  7391  0783  0022               	movlb	2	; select bank2
  7392  0784  080E               	movf	14,w	;volatile
  7393  0785  0020               	movlb	0	; select bank0
  7394  0786  0621               	xorwf	??_LCDSendData+1,w
  7395  0787  39F7               	andlw	-9
  7396  0788  0621               	xorwf	??_LCDSendData+1,w
  7397  0789  0022               	movlb	2	; select bank2
  7398  078A  008E               	movwf	14	;volatile
  7399                           
  7400                           ;main.c: 90: LATCbits.LATC4 = (value & 16) >> 4;
  7401  078B  0875               	movf	LCDSendData@value,w
  7402  078C  0020               	movlb	0	; select bank0
  7403  078D  00A0               	movwf	??_LCDSendData
  7404  078E  3004               	movlw	4
  7405  078F                     u1265:	
  7406  078F  36A0               	lsrf	??_LCDSendData,f
  7407  0790  0B89               	decfsz	9,f
  7408  0791  2F8F               	goto	u1265
  7409  0792  0820               	movf	??_LCDSendData,w
  7410  0793  3901               	andlw	1
  7411  0794  00A1               	movwf	??_LCDSendData+1
  7412  0795  0EA1               	swapf	??_LCDSendData+1,f
  7413  0796  0022               	movlb	2	; select bank2
  7414  0797  080E               	movf	14,w	;volatile
  7415  0798  0020               	movlb	0	; select bank0
  7416  0799  0621               	xorwf	??_LCDSendData+1,w
  7417  079A  39EF               	andlw	-17
  7418  079B  0621               	xorwf	??_LCDSendData+1,w
  7419  079C  0022               	movlb	2	; select bank2
  7420  079D  008E               	movwf	14	;volatile
  7421                           
  7422                           ;main.c: 91: LATCbits.LATC5 = (value & 32) >> 5;
  7423  079E  0875               	movf	LCDSendData@value,w
  7424  079F  0020               	movlb	0	; select bank0
  7425  07A0  00A0               	movwf	??_LCDSendData
  7426  07A1  3005               	movlw	5
  7427  07A2                     u1275:	
  7428  07A2  36A0               	lsrf	??_LCDSendData,f
  7429  07A3  0B89               	decfsz	9,f
  7430  07A4  2FA2               	goto	u1275
  7431  07A5  0820               	movf	??_LCDSendData,w
  7432  07A6  3901               	andlw	1
  7433  07A7  00A1               	movwf	??_LCDSendData+1
  7434  07A8  0EA1               	swapf	??_LCDSendData+1,f
  7435  07A9  0DA1               	rlf	??_LCDSendData+1,f
  7436  07AA  0022               	movlb	2	; select bank2
  7437  07AB  080E               	movf	14,w	;volatile
  7438  07AC  0020               	movlb	0	; select bank0
  7439  07AD  0621               	xorwf	??_LCDSendData+1,w
  7440  07AE  39DF               	andlw	-33
  7441  07AF  0621               	xorwf	??_LCDSendData+1,w
  7442  07B0  0022               	movlb	2	; select bank2
  7443  07B1  008E               	movwf	14	;volatile
  7444                           
  7445                           ;main.c: 92: LATCbits.LATC6 = (value & 64) >> 6;
  7446  07B2  0875               	movf	LCDSendData@value,w
  7447  07B3  0020               	movlb	0	; select bank0
  7448  07B4  00A0               	movwf	??_LCDSendData
  7449  07B5  3006               	movlw	6
  7450  07B6                     u1285:	
  7451  07B6  36A0               	lsrf	??_LCDSendData,f
  7452  07B7  0B89               	decfsz	9,f
  7453  07B8  2FB6               	goto	u1285
  7454  07B9  0820               	movf	??_LCDSendData,w
  7455  07BA  3901               	andlw	1
  7456  07BB  00A1               	movwf	??_LCDSendData+1
  7457  07BC  0EA1               	swapf	??_LCDSendData+1,f
  7458  07BD  0DA1               	rlf	??_LCDSendData+1,f
  7459  07BE  0DA1               	rlf	??_LCDSendData+1,f
  7460  07BF  0022               	movlb	2	; select bank2
  7461  07C0  080E               	movf	14,w	;volatile
  7462  07C1  0020               	movlb	0	; select bank0
  7463  07C2  0621               	xorwf	??_LCDSendData+1,w
  7464  07C3  39BF               	andlw	-65
  7465  07C4  0621               	xorwf	??_LCDSendData+1,w
  7466  07C5  0022               	movlb	2	; select bank2
  7467  07C6  008E               	movwf	14	;volatile
  7468                           
  7469                           ;main.c: 93: LATCbits.LATC7 = (value & 128) >> 7;
  7470  07C7  0875               	movf	LCDSendData@value,w
  7471  07C8  0020               	movlb	0	; select bank0
  7472  07C9  00A0               	movwf	??_LCDSendData
  7473  07CA  3007               	movlw	7
  7474  07CB                     u1295:	
  7475  07CB  36A0               	lsrf	??_LCDSendData,f
  7476  07CC  0B89               	decfsz	9,f
  7477  07CD  2FCB               	goto	u1295
  7478  07CE  0820               	movf	??_LCDSendData,w
  7479  07CF  3901               	andlw	1
  7480  07D0  00A1               	movwf	??_LCDSendData+1
  7481  07D1  0CA1               	rrf	??_LCDSendData+1,f
  7482  07D2  0CA1               	rrf	??_LCDSendData+1,f
  7483  07D3  0022               	movlb	2	; select bank2
  7484  07D4  080E               	movf	14,w	;volatile
  7485  07D5  0020               	movlb	0	; select bank0
  7486  07D6  0621               	xorwf	??_LCDSendData+1,w
  7487  07D7  397F               	andlw	-129
  7488  07D8  0621               	xorwf	??_LCDSendData+1,w
  7489  07D9  0022               	movlb	2	; select bank2
  7490  07DA  008E               	movwf	14	;volatile
  7491                           
  7492                           ;main.c: 94: if(RS > 0)
  7493  07DB  0874               	movf	LCDSendData@RS+1,w
  7494  07DC  3A80               	xorlw	128
  7495  07DD  0020               	movlb	0	; select bank0
  7496  07DE  00A0               	movwf	??_LCDSendData
  7497  07DF  3080               	movlw	128
  7498  07E0  0220               	subwf	??_LCDSendData,w
  7499  07E1  1D03               	skipz
  7500  07E2  2FE5               	goto	u1305
  7501  07E3  3001               	movlw	1
  7502  07E4  0273               	subwf	LCDSendData@RS,w
  7503  07E5                     u1305:	
  7504  07E5  1C03               	skipc
  7505  07E6  2FEA               	goto	l370
  7506                           
  7507                           ;main.c: 95: {
  7508                           ;main.c: 96: LATBbits.LATB7 = 1;
  7509  07E7  0022               	movlb	2	; select bank2
  7510  07E8  178D               	bsf	13,7	;volatile
  7511                           
  7512                           ;main.c: 97: }
  7513  07E9  2FEC               	goto	l372
  7514  07EA                     l370:	
  7515                           
  7516                           ;main.c: 98: else
  7517                           ;main.c: 99: {
  7518                           ;main.c: 100: LATBbits.LATB7 = 0;
  7519  07EA  0022               	movlb	2	; select bank2
  7520  07EB  138D               	bcf	13,7	;volatile
  7521  07EC                     l372:	
  7522                           ;main.c: 101: }
  7523                           ;main.c: 102: do { LATBbits.LATB6 = 1; } while(0);
  7524                           
  7525  07EC  170D               	bsf	13,6	;volatile
  7526                           
  7527                           ;main.c: 103: _delay((unsigned long)((1)*(2000000/4000.0)));
  7528  07ED  30A6               	movlw	166
  7529  07EE                     u2547:	
  7530  07EE  0B89               	decfsz	9,f
  7531  07EF  2FEE               	goto	u2547
  7532  07F0  3200               	nop2
  7533                           
  7534                           ;main.c: 104: do { LATBbits.LATB6 = 0; } while(0);
  7535  07F1  0022               	movlb	2	; select bank2
  7536  07F2  130D               	bcf	13,6	;volatile
  7537                           
  7538                           ;main.c: 105: _delay((unsigned long)((10)*(2000000/4000.0)));
  7539  07F3  3007               	movlw	7
  7540  07F4  0020               	movlb	0	; select bank0
  7541  07F5  00A0               	movwf	??_LCDSendData
  7542  07F6  307D               	movlw	125
  7543  07F7                     u2557:	
  7544  07F7  0B89               	decfsz	9,f
  7545  07F8  2FF7               	goto	u2557
  7546  07F9  0BA0               	decfsz	??_LCDSendData,f
  7547  07FA  2FF7               	goto	u2557
  7548  07FB  0008               	return
  7549  07FC                     __end_of_LCDSendData:	
  7550                           
  7551                           	psect	text16
  7552  0069                     __ptext16:	
  7553 ;; *************** function _HEFLASH_checkData *****************
  7554 ;; Defined at:
  7555 ;;		line 205 in file "main.c"
  7556 ;; Parameters:    Size  Location     Type
  7557 ;;		None
  7558 ;; Auto vars:     Size  Location     Type
  7559 ;;  r               2   30[BANK0 ] unsigned int 
  7560 ;; Return value:  Size  Location     Type
  7561 ;;                  1    wreg      void 
  7562 ;; Registers used:
  7563 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7564 ;; Tracked objects:
  7565 ;;		On entry : 0/0
  7566 ;;		On exit  : 0/0
  7567 ;;		Unchanged: 0/0
  7568 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7569 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7570 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7571 ;;      Temps:          0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7572 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7573 ;;Total ram usage:       11 bytes
  7574 ;; Hardware stack levels used:    1
  7575 ;; Hardware stack levels required when called:    7
  7576 ;; This function calls:
  7577 ;;		_HEFLASH_readBlock
  7578 ;;		_HEFLASH_writeBlock
  7579 ;;		___lldiv
  7580 ;;		___llmod
  7581 ;;		___lwdiv
  7582 ;;		___lwmod
  7583 ;;		__fassert
  7584 ;;		_memset
  7585 ;; This function is called by:
  7586 ;;		_main
  7587 ;; This function uses a non-reentrant model
  7588 ;;
  7589                           
  7590                           
  7591                           ;psect for function _HEFLASH_checkData
  7592  0069                     _HEFLASH_checkData:	
  7593                           
  7594                           ;main.c: 207: unsigned r;
  7595                           ;main.c: 208: _delay((unsigned long)((200)*(2000000/4000.0)));
  7596                           
  7597                           ;incstack = 0
  7598                           ; Regs used in _HEFLASH_checkData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7599  0069  3082               	movlw	130
  7600  006A  0020               	movlb	0	; select bank0
  7601  006B  00B5               	movwf	??_HEFLASH_checkData
  7602  006C  30DD               	movlw	221
  7603  006D                     u2567:	
  7604  006D  0B89               	decfsz	9,f
  7605  006E  286D               	goto	u2567
  7606  006F  0BB5               	decfsz	??_HEFLASH_checkData,f
  7607  0070  286D               	goto	u2567
  7608  0071  3200               	nop2
  7609                           
  7610                           ;main.c: 209: r = HEFLASH_readBlock(HEFBufferData, 0, 32);
  7611  0072  0020               	movlb	0	; select bank0
  7612  0073  01A0               	clrf	HEFLASH_readBlock@radd
  7613  0074  3020               	movlw	32
  7614  0075  00B5               	movwf	??_HEFLASH_checkData
  7615  0076  0835               	movf	??_HEFLASH_checkData,w
  7616  0077  00A1               	movwf	HEFLASH_readBlock@count
  7617  0078  30C6               	movlw	(low (_HEFBufferData| 0))& (0+255)
  7618  0079  318E  2661  3180   	fcall	_HEFLASH_readBlock
  7619  007C  0020               	movlb	0	; select bank0
  7620  007D  00B6               	movwf	??_HEFLASH_checkData+1
  7621  007E  01B7               	clrf	??_HEFLASH_checkData+2
  7622  007F  0836               	movf	??_HEFLASH_checkData+1,w
  7623  0080  00BE               	movwf	HEFLASH_checkData@r
  7624  0081  0837               	movf	??_HEFLASH_checkData+2,w
  7625  0082  00BF               	movwf	HEFLASH_checkData@r+1
  7626                           
  7627                           ;main.c: 210: if(!(0 == r)) {_fassert(210, "main.c", "0 == r");};
  7628  0083  083E               	movf	HEFLASH_checkData@r,w
  7629  0084  043F               	iorwf	HEFLASH_checkData@r+1,w
  7630  0085  1903               	btfsc	3,2
  7631  0086  2896               	goto	l2619
  7632  0087  30D2               	movlw	210
  7633  0088  00A0               	movwf	__fassert@line
  7634  0089  3000               	movlw	0
  7635  008A  00A1               	movwf	__fassert@line+1
  7636  008B  3000               	movlw	low (STR_1| (0+32768))
  7637  008C  00A2               	movwf	__fassert@file
  7638  008D  3090               	movlw	high (STR_1| (0+32768))
  7639  008E  00A3               	movwf	__fassert@file+1
  7640  008F  3007               	movlw	low (STR_2| (0+32768))
  7641  0090  00A4               	movwf	__fassert@expr
  7642  0091  3090               	movlw	high (STR_2| (0+32768))
  7643  0092  00A5               	movwf	__fassert@expr+1
  7644  0093  318B  23E0  3180   	fcall	__fassert
  7645  0096                     l2619:	
  7646                           
  7647                           ;main.c: 211: if(0xAA == HEFBufferData[0])
  7648  0096  30AA               	movlw	170
  7649  0097  0021               	movlb	1	; select bank1
  7650  0098  0646               	xorwf	_HEFBufferData^(0+128),w
  7651  0099  1D03               	btfss	3,2
  7652  009A  2AD3               	goto	l2653
  7653                           
  7654                           ;main.c: 212: {
  7655                           ;main.c: 213: gBoxCntStruct.SmallBoxCnt = (unsigned int)((HEFBufferData[3] << 8) + (HEFB
      +                          ufferData[4]));
  7656  009B  084A               	movf	(_HEFBufferData^(0+128)+4),w
  7657  009C  0020               	movlb	0	; select bank0
  7658  009D  00B5               	movwf	??_HEFLASH_checkData
  7659  009E  01B6               	clrf	??_HEFLASH_checkData+1
  7660  009F  0021               	movlb	1	; select bank1
  7661  00A0  0849               	movf	(_HEFBufferData^(0+128)+3),w
  7662  00A1  0020               	movlb	0	; select bank0
  7663  00A2  00B7               	movwf	??_HEFLASH_checkData+2
  7664  00A3  01B8               	clrf	??_HEFLASH_checkData+3
  7665  00A4  0837               	movf	??_HEFLASH_checkData+2,w
  7666  00A5  00B8               	movwf	??_HEFLASH_checkData+3
  7667  00A6  01B7               	clrf	??_HEFLASH_checkData+2
  7668  00A7  0835               	movf	??_HEFLASH_checkData,w
  7669  00A8  0737               	addwf	??_HEFLASH_checkData+2,w
  7670  00A9  00CB               	movwf	_gBoxCntStruct+9
  7671  00AA  0836               	movf	??_HEFLASH_checkData+1,w
  7672  00AB  3D38               	addwfc	??_HEFLASH_checkData+3,w
  7673  00AC  00CC               	movwf	_gBoxCntStruct+10
  7674                           
  7675                           ;main.c: 215: gBoxCntStruct.MiddleBoxCnt = (unsigned int)((HEFBufferData[7] << 8) + (HEF
      +                          BufferData[8]));
  7676  00AD  0021               	movlb	1	; select bank1
  7677  00AE  084E               	movf	(_HEFBufferData^(0+128)+8),w
  7678  00AF  0020               	movlb	0	; select bank0
  7679  00B0  00B5               	movwf	??_HEFLASH_checkData
  7680  00B1  01B6               	clrf	??_HEFLASH_checkData+1
  7681  00B2  0021               	movlb	1	; select bank1
  7682  00B3  084D               	movf	(_HEFBufferData^(0+128)+7),w
  7683  00B4  0020               	movlb	0	; select bank0
  7684  00B5  00B7               	movwf	??_HEFLASH_checkData+2
  7685  00B6  01B8               	clrf	??_HEFLASH_checkData+3
  7686  00B7  0837               	movf	??_HEFLASH_checkData+2,w
  7687  00B8  00B8               	movwf	??_HEFLASH_checkData+3
  7688  00B9  01B7               	clrf	??_HEFLASH_checkData+2
  7689  00BA  0835               	movf	??_HEFLASH_checkData,w
  7690  00BB  0737               	addwf	??_HEFLASH_checkData+2,w
  7691  00BC  00CD               	movwf	_gBoxCntStruct+11
  7692  00BD  0836               	movf	??_HEFLASH_checkData+1,w
  7693  00BE  3D38               	addwfc	??_HEFLASH_checkData+3,w
  7694  00BF  00CE               	movwf	_gBoxCntStruct+12
  7695                           
  7696                           ;main.c: 217: gBoxCntStruct.LargeBoxCnt = (unsigned int)((HEFBufferData[11] << 8) + (HEF
      +                          BufferData[12]));
  7697  00C0  0021               	movlb	1	; select bank1
  7698  00C1  0852               	movf	(_HEFBufferData^(0+128)+12),w
  7699  00C2  0020               	movlb	0	; select bank0
  7700  00C3  00B5               	movwf	??_HEFLASH_checkData
  7701  00C4  01B6               	clrf	??_HEFLASH_checkData+1
  7702  00C5  0021               	movlb	1	; select bank1
  7703  00C6  0851               	movf	(_HEFBufferData^(0+128)+11),w
  7704  00C7  0020               	movlb	0	; select bank0
  7705  00C8  00B7               	movwf	??_HEFLASH_checkData+2
  7706  00C9  01B8               	clrf	??_HEFLASH_checkData+3
  7707  00CA  0837               	movf	??_HEFLASH_checkData+2,w
  7708  00CB  00B8               	movwf	??_HEFLASH_checkData+3
  7709  00CC  01B7               	clrf	??_HEFLASH_checkData+2
  7710  00CD  0835               	movf	??_HEFLASH_checkData,w
  7711  00CE  0737               	addwf	??_HEFLASH_checkData+2,w
  7712  00CF  00CF               	movwf	_gBoxCntStruct+13
  7713  00D0  0836               	movf	??_HEFLASH_checkData+1,w
  7714  00D1  3D38               	addwfc	??_HEFLASH_checkData+3,w
  7715  00D2  00D0               	movwf	_gBoxCntStruct+14
  7716                           
  7717                           ;main.c: 219: gBoxCntStruct.BoxSum = (HEFBufferData[13] << 24) + (HEFBufferData[14] << 1
      +                          6) + (HEFBufferData[15] << 8) + (HEFBufferData[16]);
  7718  00D3  0021               	movlb	1	; select bank1
  7719  00D4  0856               	movf	(_HEFBufferData^(0+128)+16),w
  7720  00D5  0020               	movlb	0	; select bank0
  7721  00D6  00B5               	movwf	??_HEFLASH_checkData
  7722  00D7  01B6               	clrf	??_HEFLASH_checkData+1
  7723  00D8  0021               	movlb	1	; select bank1
  7724  00D9  0855               	movf	(_HEFBufferData^(0+128)+15),w
  7725  00DA  0020               	movlb	0	; select bank0
  7726  00DB  00B7               	movwf	??_HEFLASH_checkData+2
  7727  00DC  01B8               	clrf	??_HEFLASH_checkData+3
  7728  00DD  0837               	movf	??_HEFLASH_checkData+2,w
  7729  00DE  00B8               	movwf	??_HEFLASH_checkData+3
  7730  00DF  01B7               	clrf	??_HEFLASH_checkData+2
  7731  00E0  0021               	movlb	1	; select bank1
  7732  00E1  0853               	movf	(_HEFBufferData^(0+128)+13),w
  7733  00E2  0754               	addwf	(_HEFBufferData^(0+128)+14),w
  7734  00E3  0020               	movlb	0	; select bank0
  7735  00E4  00BA               	movwf	??_HEFLASH_checkData+5
  7736  00E5  01BB               	clrf	??_HEFLASH_checkData+6
  7737  00E6  0DBB               	rlf	??_HEFLASH_checkData+6,f
  7738  00E7  0837               	movf	??_HEFLASH_checkData+2,w
  7739  00E8  073A               	addwf	??_HEFLASH_checkData+5,w
  7740  00E9  00BC               	movwf	??_HEFLASH_checkData+7
  7741  00EA  0838               	movf	??_HEFLASH_checkData+3,w
  7742  00EB  3D3B               	addwfc	??_HEFLASH_checkData+6,w
  7743  00EC  00BD               	movwf	??_HEFLASH_checkData+8
  7744  00ED  0835               	movf	??_HEFLASH_checkData,w
  7745  00EE  073C               	addwf	??_HEFLASH_checkData+7,w
  7746  00EF  00D3               	movwf	_gBoxCntStruct+17
  7747  00F0  0836               	movf	??_HEFLASH_checkData+1,w
  7748  00F1  3D3D               	addwfc	??_HEFLASH_checkData+8,w
  7749  00F2  00D4               	movwf	_gBoxCntStruct+18
  7750  00F3  01D5               	clrf	_gBoxCntStruct+19
  7751  00F4  1BD4               	btfsc	_gBoxCntStruct+18,7
  7752  00F5  03D5               	decf	_gBoxCntStruct+19,f
  7753  00F6  0855               	movf	_gBoxCntStruct+19,w
  7754  00F7  00D6               	movwf	_gBoxCntStruct+20
  7755                           
  7756                           ;main.c: 222: gBoxCntStruct.JamCnt = (unsigned int)((HEFBufferData[19] << 8) + (HEFBuffe
      +                          rData[20]));
  7757  00F8  0021               	movlb	1	; select bank1
  7758  00F9  085A               	movf	(_HEFBufferData^(0+128)+20),w
  7759  00FA  0020               	movlb	0	; select bank0
  7760  00FB  00B5               	movwf	??_HEFLASH_checkData
  7761  00FC  01B6               	clrf	??_HEFLASH_checkData+1
  7762  00FD  0021               	movlb	1	; select bank1
  7763  00FE  0859               	movf	(_HEFBufferData^(0+128)+19),w
  7764  00FF  0020               	movlb	0	; select bank0
  7765  0100  00B7               	movwf	??_HEFLASH_checkData+2
  7766  0101  01B8               	clrf	??_HEFLASH_checkData+3
  7767  0102  0837               	movf	??_HEFLASH_checkData+2,w
  7768  0103  00B8               	movwf	??_HEFLASH_checkData+3
  7769  0104  01B7               	clrf	??_HEFLASH_checkData+2
  7770  0105  0835               	movf	??_HEFLASH_checkData,w
  7771  0106  0737               	addwf	??_HEFLASH_checkData+2,w
  7772  0107  00D1               	movwf	_gBoxCntStruct+15
  7773  0108  0836               	movf	??_HEFLASH_checkData+1,w
  7774  0109  3D38               	addwfc	??_HEFLASH_checkData+3,w
  7775  010A  00D2               	movwf	_gBoxCntStruct+16
  7776                           
  7777                           ;main.c: 224: display_data_1[2] = (gBoxCntStruct.SmallBoxCnt%1000/100)+0x30;
  7778  010B  3064               	movlw	100
  7779  010C  00A4               	movwf	___lwdiv@divisor
  7780  010D  3000               	movlw	0
  7781  010E  00A5               	movwf	___lwdiv@divisor+1
  7782  010F  084C               	movf	_gBoxCntStruct+10,w
  7783  0110  00A3               	movwf	___lwmod@dividend+1
  7784  0111  084B               	movf	_gBoxCntStruct+9,w
  7785  0112  00A2               	movwf	___lwmod@dividend
  7786  0113  30E8               	movlw	232
  7787  0114  00A0               	movwf	___lwmod@divisor
  7788  0115  3003               	movlw	3
  7789  0116  00A1               	movwf	___lwmod@divisor+1
  7790  0117  318D  25FF  3180   	fcall	___lwmod
  7791  011A  0020               	movlb	0	; select bank0
  7792  011B  0821               	movf	?___lwmod+1,w
  7793  011C  00A7               	movwf	___lwdiv@dividend+1
  7794  011D  0820               	movf	?___lwmod,w
  7795  011E  00A6               	movwf	___lwdiv@dividend
  7796  011F  318E  262C  3180   	fcall	___lwdiv
  7797  0122  0020               	movlb	0	; select bank0
  7798  0123  0824               	movf	?___lwdiv,w
  7799  0124  3E30               	addlw	48
  7800  0125  00B5               	movwf	??_HEFLASH_checkData
  7801  0126  0835               	movf	??_HEFLASH_checkData,w
  7802  0127  0021               	movlb	1	; select bank1
  7803  0128  00A2               	movwf	(_display_data_1^(0+128)+2)
  7804                           
  7805                           ;main.c: 225: display_data_1[3] = (gBoxCntStruct.SmallBoxCnt%100/10)+0x30;
  7806  0129  300A               	movlw	10
  7807  012A  0020               	movlb	0	; select bank0
  7808  012B  00A4               	movwf	___lwdiv@divisor
  7809  012C  3000               	movlw	0
  7810  012D  00A5               	movwf	___lwdiv@divisor+1
  7811  012E  084C               	movf	_gBoxCntStruct+10,w
  7812  012F  00A3               	movwf	___lwmod@dividend+1
  7813  0130  084B               	movf	_gBoxCntStruct+9,w
  7814  0131  00A2               	movwf	___lwmod@dividend
  7815  0132  3064               	movlw	100
  7816  0133  00A0               	movwf	___lwmod@divisor
  7817  0134  3000               	movlw	0
  7818  0135  00A1               	movwf	___lwmod@divisor+1
  7819  0136  318D  25FF  3180   	fcall	___lwmod
  7820  0139  0020               	movlb	0	; select bank0
  7821  013A  0821               	movf	?___lwmod+1,w
  7822  013B  00A7               	movwf	___lwdiv@dividend+1
  7823  013C  0820               	movf	?___lwmod,w
  7824  013D  00A6               	movwf	___lwdiv@dividend
  7825  013E  318E  262C  3180   	fcall	___lwdiv
  7826  0141  0020               	movlb	0	; select bank0
  7827  0142  0824               	movf	?___lwdiv,w
  7828  0143  3E30               	addlw	48
  7829  0144  00B5               	movwf	??_HEFLASH_checkData
  7830  0145  0835               	movf	??_HEFLASH_checkData,w
  7831  0146  0021               	movlb	1	; select bank1
  7832  0147  00A3               	movwf	(_display_data_1^(0+128)+3)
  7833                           
  7834                           ;main.c: 226: display_data_1[4] = (gBoxCntStruct.SmallBoxCnt%10)+0x30;
  7835  0148  300A               	movlw	10
  7836  0149  0020               	movlb	0	; select bank0
  7837  014A  00A0               	movwf	___lwmod@divisor
  7838  014B  3000               	movlw	0
  7839  014C  00A1               	movwf	___lwmod@divisor+1
  7840  014D  084C               	movf	_gBoxCntStruct+10,w
  7841  014E  00A3               	movwf	___lwmod@dividend+1
  7842  014F  084B               	movf	_gBoxCntStruct+9,w
  7843  0150  00A2               	movwf	___lwmod@dividend
  7844  0151  318D  25FF  3180   	fcall	___lwmod
  7845  0154  0020               	movlb	0	; select bank0
  7846  0155  0820               	movf	?___lwmod,w
  7847  0156  3E30               	addlw	48
  7848  0157  00B5               	movwf	??_HEFLASH_checkData
  7849  0158  0835               	movf	??_HEFLASH_checkData,w
  7850  0159  0021               	movlb	1	; select bank1
  7851  015A  00A4               	movwf	(_display_data_1^(0+128)+4)
  7852                           
  7853                           ;main.c: 229: display_data_1[7] = (gBoxCntStruct.MiddleBoxCnt%1000/100)+0x30;
  7854  015B  3064               	movlw	100
  7855  015C  0020               	movlb	0	; select bank0
  7856  015D  00A4               	movwf	___lwdiv@divisor
  7857  015E  3000               	movlw	0
  7858  015F  00A5               	movwf	___lwdiv@divisor+1
  7859  0160  084E               	movf	_gBoxCntStruct+12,w
  7860  0161  00A3               	movwf	___lwmod@dividend+1
  7861  0162  084D               	movf	_gBoxCntStruct+11,w
  7862  0163  00A2               	movwf	___lwmod@dividend
  7863  0164  30E8               	movlw	232
  7864  0165  00A0               	movwf	___lwmod@divisor
  7865  0166  3003               	movlw	3
  7866  0167  00A1               	movwf	___lwmod@divisor+1
  7867  0168  318D  25FF  3180   	fcall	___lwmod
  7868  016B  0020               	movlb	0	; select bank0
  7869  016C  0821               	movf	?___lwmod+1,w
  7870  016D  00A7               	movwf	___lwdiv@dividend+1
  7871  016E  0820               	movf	?___lwmod,w
  7872  016F  00A6               	movwf	___lwdiv@dividend
  7873  0170  318E  262C  3180   	fcall	___lwdiv
  7874  0173  0020               	movlb	0	; select bank0
  7875  0174  0824               	movf	?___lwdiv,w
  7876  0175  3E30               	addlw	48
  7877  0176  00B5               	movwf	??_HEFLASH_checkData
  7878  0177  0835               	movf	??_HEFLASH_checkData,w
  7879  0178  0021               	movlb	1	; select bank1
  7880  0179  00A7               	movwf	(_display_data_1^(0+128)+7)
  7881                           
  7882                           ;main.c: 230: display_data_1[8] = (gBoxCntStruct.MiddleBoxCnt%100/10)+0x30;
  7883  017A  300A               	movlw	10
  7884  017B  0020               	movlb	0	; select bank0
  7885  017C  00A4               	movwf	___lwdiv@divisor
  7886  017D  3000               	movlw	0
  7887  017E  00A5               	movwf	___lwdiv@divisor+1
  7888  017F  084E               	movf	_gBoxCntStruct+12,w
  7889  0180  00A3               	movwf	___lwmod@dividend+1
  7890  0181  084D               	movf	_gBoxCntStruct+11,w
  7891  0182  00A2               	movwf	___lwmod@dividend
  7892  0183  3064               	movlw	100
  7893  0184  00A0               	movwf	___lwmod@divisor
  7894  0185  3000               	movlw	0
  7895  0186  00A1               	movwf	___lwmod@divisor+1
  7896  0187  318D  25FF  3180   	fcall	___lwmod
  7897  018A  0020               	movlb	0	; select bank0
  7898  018B  0821               	movf	?___lwmod+1,w
  7899  018C  00A7               	movwf	___lwdiv@dividend+1
  7900  018D  0820               	movf	?___lwmod,w
  7901  018E  00A6               	movwf	___lwdiv@dividend
  7902  018F  318E  262C  3180   	fcall	___lwdiv
  7903  0192  0020               	movlb	0	; select bank0
  7904  0193  0824               	movf	?___lwdiv,w
  7905  0194  3E30               	addlw	48
  7906  0195  00B5               	movwf	??_HEFLASH_checkData
  7907  0196  0835               	movf	??_HEFLASH_checkData,w
  7908  0197  0021               	movlb	1	; select bank1
  7909  0198  00A8               	movwf	(_display_data_1^(0+128)+8)
  7910                           
  7911                           ;main.c: 231: display_data_1[9] = (gBoxCntStruct.MiddleBoxCnt%10)+0x30;
  7912  0199  300A               	movlw	10
  7913  019A  0020               	movlb	0	; select bank0
  7914  019B  00A0               	movwf	___lwmod@divisor
  7915  019C  3000               	movlw	0
  7916  019D  00A1               	movwf	___lwmod@divisor+1
  7917  019E  084E               	movf	_gBoxCntStruct+12,w
  7918  019F  00A3               	movwf	___lwmod@dividend+1
  7919  01A0  084D               	movf	_gBoxCntStruct+11,w
  7920  01A1  00A2               	movwf	___lwmod@dividend
  7921  01A2  318D  25FF  3180   	fcall	___lwmod
  7922  01A5  0020               	movlb	0	; select bank0
  7923  01A6  0820               	movf	?___lwmod,w
  7924  01A7  3E30               	addlw	48
  7925  01A8  00B5               	movwf	??_HEFLASH_checkData
  7926  01A9  0835               	movf	??_HEFLASH_checkData,w
  7927  01AA  0021               	movlb	1	; select bank1
  7928  01AB  00A9               	movwf	(_display_data_1^(0+128)+9)
  7929                           
  7930                           ;main.c: 233: display_data_1[12] = (gBoxCntStruct.LargeBoxCnt%1000/100)+0x30;
  7931  01AC  3064               	movlw	100
  7932  01AD  0020               	movlb	0	; select bank0
  7933  01AE  00A4               	movwf	___lwdiv@divisor
  7934  01AF  3000               	movlw	0
  7935  01B0  00A5               	movwf	___lwdiv@divisor+1
  7936  01B1  0850               	movf	_gBoxCntStruct+14,w
  7937  01B2  00A3               	movwf	___lwmod@dividend+1
  7938  01B3  084F               	movf	_gBoxCntStruct+13,w
  7939  01B4  00A2               	movwf	___lwmod@dividend
  7940  01B5  30E8               	movlw	232
  7941  01B6  00A0               	movwf	___lwmod@divisor
  7942  01B7  3003               	movlw	3
  7943  01B8  00A1               	movwf	___lwmod@divisor+1
  7944  01B9  318D  25FF  3180   	fcall	___lwmod
  7945  01BC  0020               	movlb	0	; select bank0
  7946  01BD  0821               	movf	?___lwmod+1,w
  7947  01BE  00A7               	movwf	___lwdiv@dividend+1
  7948  01BF  0820               	movf	?___lwmod,w
  7949  01C0  00A6               	movwf	___lwdiv@dividend
  7950  01C1  318E  262C  3180   	fcall	___lwdiv
  7951  01C4  0020               	movlb	0	; select bank0
  7952  01C5  0824               	movf	?___lwdiv,w
  7953  01C6  3E30               	addlw	48
  7954  01C7  00B5               	movwf	??_HEFLASH_checkData
  7955  01C8  0835               	movf	??_HEFLASH_checkData,w
  7956  01C9  0021               	movlb	1	; select bank1
  7957  01CA  00AC               	movwf	(_display_data_1^(0+128)+12)
  7958                           
  7959                           ;main.c: 234: display_data_1[13] = (gBoxCntStruct.LargeBoxCnt%100/10)+0x30;
  7960  01CB  300A               	movlw	10
  7961  01CC  0020               	movlb	0	; select bank0
  7962  01CD  00A4               	movwf	___lwdiv@divisor
  7963  01CE  3000               	movlw	0
  7964  01CF  00A5               	movwf	___lwdiv@divisor+1
  7965  01D0  0850               	movf	_gBoxCntStruct+14,w
  7966  01D1  00A3               	movwf	___lwmod@dividend+1
  7967  01D2  084F               	movf	_gBoxCntStruct+13,w
  7968  01D3  00A2               	movwf	___lwmod@dividend
  7969  01D4  3064               	movlw	100
  7970  01D5  00A0               	movwf	___lwmod@divisor
  7971  01D6  3000               	movlw	0
  7972  01D7  00A1               	movwf	___lwmod@divisor+1
  7973  01D8  318D  25FF  3180   	fcall	___lwmod
  7974  01DB  0020               	movlb	0	; select bank0
  7975  01DC  0821               	movf	?___lwmod+1,w
  7976  01DD  00A7               	movwf	___lwdiv@dividend+1
  7977  01DE  0820               	movf	?___lwmod,w
  7978  01DF  00A6               	movwf	___lwdiv@dividend
  7979  01E0  318E  262C  3180   	fcall	___lwdiv
  7980  01E3  0020               	movlb	0	; select bank0
  7981  01E4  0824               	movf	?___lwdiv,w
  7982  01E5  3E30               	addlw	48
  7983  01E6  00B5               	movwf	??_HEFLASH_checkData
  7984  01E7  0835               	movf	??_HEFLASH_checkData,w
  7985  01E8  0021               	movlb	1	; select bank1
  7986  01E9  00AD               	movwf	(_display_data_1^(0+128)+13)
  7987                           
  7988                           ;main.c: 235: display_data_1[14] = (gBoxCntStruct.LargeBoxCnt%10)+0x30;
  7989  01EA  300A               	movlw	10
  7990  01EB  0020               	movlb	0	; select bank0
  7991  01EC  00A0               	movwf	___lwmod@divisor
  7992  01ED  3000               	movlw	0
  7993  01EE  00A1               	movwf	___lwmod@divisor+1
  7994  01EF  0850               	movf	_gBoxCntStruct+14,w
  7995  01F0  00A3               	movwf	___lwmod@dividend+1
  7996  01F1  084F               	movf	_gBoxCntStruct+13,w
  7997  01F2  00A2               	movwf	___lwmod@dividend
  7998  01F3  318D  25FF  3180   	fcall	___lwmod
  7999  01F6  0020               	movlb	0	; select bank0
  8000  01F7  0820               	movf	?___lwmod,w
  8001  01F8  3E30               	addlw	48
  8002  01F9  00B5               	movwf	??_HEFLASH_checkData
  8003  01FA  0835               	movf	??_HEFLASH_checkData,w
  8004  01FB  0021               	movlb	1	; select bank1
  8005  01FC  00AE               	movwf	(_display_data_1^(0+128)+14)
  8006                           
  8007                           ;main.c: 237: display_data_2[2] = (gBoxCntStruct.BoxSum%1000/100)+0x30;
  8008  01FD  3000               	movlw	0
  8009  01FE  0020               	movlb	0	; select bank0
  8010  01FF  00AB               	movwf	___lldiv@divisor+3
  8011  0200  3000               	movlw	0
  8012  0201  00AA               	movwf	___lldiv@divisor+2
  8013  0202  3000               	movlw	0
  8014  0203  00A9               	movwf	___lldiv@divisor+1
  8015  0204  3064               	movlw	100
  8016  0205  00A8               	movwf	___lldiv@divisor
  8017  0206  3011               	movlw	17
  8018  0207  3E42               	addlw	(low (_gBoxCntStruct| 0))& (0+255)
  8019  0208  0086               	movwf	6
  8020  0209  0187               	clrf	7
  8021  020A  3F40               	moviw [0]fsr1
  8022  020B  00A4               	movwf	___llmod@dividend
  8023  020C  3F41               	moviw [1]fsr1
  8024  020D  00A5               	movwf	___llmod@dividend+1
  8025  020E  3F42               	moviw [2]fsr1
  8026  020F  00A6               	movwf	___llmod@dividend+2
  8027  0210  3F43               	moviw [3]fsr1
  8028  0211  00A7               	movwf	___llmod@dividend+3
  8029  0212  3000               	movlw	0
  8030  0213  00A3               	movwf	___llmod@divisor+3
  8031  0214  3000               	movlw	0
  8032  0215  00A2               	movwf	___llmod@divisor+2
  8033  0216  3003               	movlw	3
  8034  0217  00A1               	movwf	___llmod@divisor+1
  8035  0218  30E8               	movlw	232
  8036  0219  00A0               	movwf	___llmod@divisor
  8037  021A  318E  2699  3180   	fcall	___llmod
  8038  021D  0020               	movlb	0	; select bank0
  8039  021E  0823               	movf	?___llmod+3,w
  8040  021F  00AF               	movwf	___lldiv@dividend+3
  8041  0220  0822               	movf	?___llmod+2,w
  8042  0221  00AE               	movwf	___lldiv@dividend+2
  8043  0222  0821               	movf	?___llmod+1,w
  8044  0223  00AD               	movwf	___lldiv@dividend+1
  8045  0224  0820               	movf	?___llmod,w
  8046  0225  00AC               	movwf	___lldiv@dividend
  8047  0226  318E  26DC  3180   	fcall	___lldiv
  8048  0229  0020               	movlb	0	; select bank0
  8049  022A  0828               	movf	?___lldiv,w
  8050  022B  3E30               	addlw	48
  8051  022C  00B5               	movwf	??_HEFLASH_checkData
  8052  022D  0835               	movf	??_HEFLASH_checkData,w
  8053  022E  0021               	movlb	1	; select bank1
  8054  022F  00BD               	movwf	(_display_data_2^(0+128)+2)
  8055                           
  8056                           ;main.c: 238: display_data_2[3] = (gBoxCntStruct.BoxSum%100/10)+0x30;
  8057  0230  3000               	movlw	0
  8058  0231  0020               	movlb	0	; select bank0
  8059  0232  00AB               	movwf	___lldiv@divisor+3
  8060  0233  3000               	movlw	0
  8061  0234  00AA               	movwf	___lldiv@divisor+2
  8062  0235  3000               	movlw	0
  8063  0236  00A9               	movwf	___lldiv@divisor+1
  8064  0237  300A               	movlw	10
  8065  0238  00A8               	movwf	___lldiv@divisor
  8066  0239  3011               	movlw	17
  8067  023A  3E42               	addlw	(low (_gBoxCntStruct| 0))& (0+255)
  8068  023B  0086               	movwf	6
  8069  023C  0187               	clrf	7
  8070  023D  3F40               	moviw [0]fsr1
  8071  023E  00A4               	movwf	___llmod@dividend
  8072  023F  3F41               	moviw [1]fsr1
  8073  0240  00A5               	movwf	___llmod@dividend+1
  8074  0241  3F42               	moviw [2]fsr1
  8075  0242  00A6               	movwf	___llmod@dividend+2
  8076  0243  3F43               	moviw [3]fsr1
  8077  0244  00A7               	movwf	___llmod@dividend+3
  8078  0245  3000               	movlw	0
  8079  0246  00A3               	movwf	___llmod@divisor+3
  8080  0247  3000               	movlw	0
  8081  0248  00A2               	movwf	___llmod@divisor+2
  8082  0249  3000               	movlw	0
  8083  024A  00A1               	movwf	___llmod@divisor+1
  8084  024B  3064               	movlw	100
  8085  024C  00A0               	movwf	___llmod@divisor
  8086  024D  318E  2699  3180   	fcall	___llmod
  8087  0250  0020               	movlb	0	; select bank0
  8088  0251  0823               	movf	?___llmod+3,w
  8089  0252  00AF               	movwf	___lldiv@dividend+3
  8090  0253  0822               	movf	?___llmod+2,w
  8091  0254  00AE               	movwf	___lldiv@dividend+2
  8092  0255  0821               	movf	?___llmod+1,w
  8093  0256  00AD               	movwf	___lldiv@dividend+1
  8094  0257  0820               	movf	?___llmod,w
  8095  0258  00AC               	movwf	___lldiv@dividend
  8096  0259  318E  26DC  3180   	fcall	___lldiv
  8097  025C  0020               	movlb	0	; select bank0
  8098  025D  0828               	movf	?___lldiv,w
  8099  025E  3E30               	addlw	48
  8100  025F  00B5               	movwf	??_HEFLASH_checkData
  8101  0260  0835               	movf	??_HEFLASH_checkData,w
  8102  0261  0021               	movlb	1	; select bank1
  8103  0262  00BE               	movwf	(_display_data_2^(0+128)+3)
  8104                           
  8105                           ;main.c: 239: display_data_2[4] = (gBoxCntStruct.BoxSum%10)+0x30;
  8106  0263  3000               	movlw	0
  8107  0264  0020               	movlb	0	; select bank0
  8108  0265  00A3               	movwf	___llmod@divisor+3
  8109  0266  3000               	movlw	0
  8110  0267  00A2               	movwf	___llmod@divisor+2
  8111  0268  3000               	movlw	0
  8112  0269  00A1               	movwf	___llmod@divisor+1
  8113  026A  300A               	movlw	10
  8114  026B  00A0               	movwf	___llmod@divisor
  8115  026C  3011               	movlw	17
  8116  026D  3E42               	addlw	(low (_gBoxCntStruct| 0))& (0+255)
  8117  026E  0086               	movwf	6
  8118  026F  0187               	clrf	7
  8119  0270  3F40               	moviw [0]fsr1
  8120  0271  00A4               	movwf	___llmod@dividend
  8121  0272  3F41               	moviw [1]fsr1
  8122  0273  00A5               	movwf	___llmod@dividend+1
  8123  0274  3F42               	moviw [2]fsr1
  8124  0275  00A6               	movwf	___llmod@dividend+2
  8125  0276  3F43               	moviw [3]fsr1
  8126  0277  00A7               	movwf	___llmod@dividend+3
  8127  0278  318E  2699  3180   	fcall	___llmod
  8128  027B  0020               	movlb	0	; select bank0
  8129  027C  0820               	movf	?___llmod,w
  8130  027D  3E30               	addlw	48
  8131  027E  00B5               	movwf	??_HEFLASH_checkData
  8132  027F  0835               	movf	??_HEFLASH_checkData,w
  8133  0280  0021               	movlb	1	; select bank1
  8134  0281  00BF               	movwf	(_display_data_2^(0+128)+4)
  8135                           
  8136                           ;main.c: 241: display_data_2[7] = (gBoxCntStruct.JamCnt%1000/100)+0x30;
  8137  0282  3064               	movlw	100
  8138  0283  0020               	movlb	0	; select bank0
  8139  0284  00A4               	movwf	___lwdiv@divisor
  8140  0285  3000               	movlw	0
  8141  0286  00A5               	movwf	___lwdiv@divisor+1
  8142  0287  0852               	movf	_gBoxCntStruct+16,w
  8143  0288  00A3               	movwf	___lwmod@dividend+1
  8144  0289  0851               	movf	_gBoxCntStruct+15,w
  8145  028A  00A2               	movwf	___lwmod@dividend
  8146  028B  30E8               	movlw	232
  8147  028C  00A0               	movwf	___lwmod@divisor
  8148  028D  3003               	movlw	3
  8149  028E  00A1               	movwf	___lwmod@divisor+1
  8150  028F  318D  25FF  3180   	fcall	___lwmod
  8151  0292  0020               	movlb	0	; select bank0
  8152  0293  0821               	movf	?___lwmod+1,w
  8153  0294  00A7               	movwf	___lwdiv@dividend+1
  8154  0295  0820               	movf	?___lwmod,w
  8155  0296  00A6               	movwf	___lwdiv@dividend
  8156  0297  318E  262C  3180   	fcall	___lwdiv
  8157  029A  0020               	movlb	0	; select bank0
  8158  029B  0824               	movf	?___lwdiv,w
  8159  029C  3E30               	addlw	48
  8160  029D  00B5               	movwf	??_HEFLASH_checkData
  8161  029E  0835               	movf	??_HEFLASH_checkData,w
  8162  029F  0021               	movlb	1	; select bank1
  8163  02A0  00C2               	movwf	(_display_data_2^(0+128)+7)
  8164                           
  8165                           ;main.c: 242: display_data_2[8] = (gBoxCntStruct.JamCnt%100/10)+0x30;
  8166  02A1  300A               	movlw	10
  8167  02A2  0020               	movlb	0	; select bank0
  8168  02A3  00A4               	movwf	___lwdiv@divisor
  8169  02A4  3000               	movlw	0
  8170  02A5  00A5               	movwf	___lwdiv@divisor+1
  8171  02A6  0852               	movf	_gBoxCntStruct+16,w
  8172  02A7  00A3               	movwf	___lwmod@dividend+1
  8173  02A8  0851               	movf	_gBoxCntStruct+15,w
  8174  02A9  00A2               	movwf	___lwmod@dividend
  8175  02AA  3064               	movlw	100
  8176  02AB  00A0               	movwf	___lwmod@divisor
  8177  02AC  3000               	movlw	0
  8178  02AD  00A1               	movwf	___lwmod@divisor+1
  8179  02AE  318D  25FF  3180   	fcall	___lwmod
  8180  02B1  0020               	movlb	0	; select bank0
  8181  02B2  0821               	movf	?___lwmod+1,w
  8182  02B3  00A7               	movwf	___lwdiv@dividend+1
  8183  02B4  0820               	movf	?___lwmod,w
  8184  02B5  00A6               	movwf	___lwdiv@dividend
  8185  02B6  318E  262C  3180   	fcall	___lwdiv
  8186  02B9  0020               	movlb	0	; select bank0
  8187  02BA  0824               	movf	?___lwdiv,w
  8188  02BB  3E30               	addlw	48
  8189  02BC  00B5               	movwf	??_HEFLASH_checkData
  8190  02BD  0835               	movf	??_HEFLASH_checkData,w
  8191  02BE  0021               	movlb	1	; select bank1
  8192  02BF  00C3               	movwf	(_display_data_2^(0+128)+8)
  8193                           
  8194                           ;main.c: 243: display_data_2[9] = (gBoxCntStruct.JamCnt%10)+0x30;
  8195  02C0  300A               	movlw	10
  8196  02C1  0020               	movlb	0	; select bank0
  8197  02C2  00A0               	movwf	___lwmod@divisor
  8198  02C3  3000               	movlw	0
  8199  02C4  00A1               	movwf	___lwmod@divisor+1
  8200  02C5  0852               	movf	_gBoxCntStruct+16,w
  8201  02C6  00A3               	movwf	___lwmod@dividend+1
  8202  02C7  0851               	movf	_gBoxCntStruct+15,w
  8203  02C8  00A2               	movwf	___lwmod@dividend
  8204  02C9  318D  25FF         	fcall	___lwmod
  8205  02CB  0020               	movlb	0	; select bank0
  8206  02CC  0820               	movf	?___lwmod,w
  8207  02CD  3E30               	addlw	48
  8208  02CE  00B5               	movwf	??_HEFLASH_checkData
  8209  02CF  0835               	movf	??_HEFLASH_checkData,w
  8210  02D0  0021               	movlb	1	; select bank1
  8211  02D1  00C4               	movwf	(_display_data_2^(0+128)+9)
  8212                           
  8213                           ;main.c: 244: }
  8214  02D2  0008               	return
  8215  02D3                     l2653:	
  8216                           
  8217                           ;main.c: 245: else
  8218                           ;main.c: 246: {
  8219                           ;main.c: 247: memset(&HEFBufferData, 0, sizeof(HEFBufferData));
  8220  02D3  3000               	movlw	0
  8221  02D4  0020               	movlb	0	; select bank0
  8222  02D5  00A0               	movwf	memset@c
  8223  02D6  00A1               	movwf	memset@c+1
  8224  02D7  3020               	movlw	32
  8225  02D8  00A2               	movwf	memset@n
  8226  02D9  3000               	movlw	0
  8227  02DA  00A3               	movwf	memset@n+1
  8228  02DB  30C6               	movlw	(low (_HEFBufferData| 0))& (0+255)
  8229  02DC  318C  24EB  3180   	fcall	_memset
  8230                           
  8231                           ;main.c: 248: HEFBufferData[0] = 0xAA;
  8232  02DF  30AA               	movlw	170
  8233  02E0  0020               	movlb	0	; select bank0
  8234  02E1  00B5               	movwf	??_HEFLASH_checkData
  8235  02E2  0835               	movf	??_HEFLASH_checkData,w
  8236  02E3  0021               	movlb	1	; select bank1
  8237  02E4  00C6               	movwf	_HEFBufferData^(0+128)
  8238                           
  8239                           ;main.c: 249: r == HEFLASH_writeBlock(0, (void*)&HEFBufferData,sizeof(HEFBufferData));
  8240  02E5  30C6               	movlw	(low (_HEFBufferData| 0))& (0+255)
  8241  02E6  0020               	movlb	0	; select bank0
  8242  02E7  00B5               	movwf	??_HEFLASH_checkData
  8243  02E8  0835               	movf	??_HEFLASH_checkData,w
  8244  02E9  00A5               	movwf	HEFLASH_writeBlock@data
  8245  02EA  3020               	movlw	32
  8246  02EB  00B6               	movwf	??_HEFLASH_checkData+1
  8247  02EC  0836               	movf	??_HEFLASH_checkData+1,w
  8248  02ED  00A6               	movwf	HEFLASH_writeBlock@count
  8249  02EE  3000               	movlw	0
  8250  02EF  318F  272F  3180   	fcall	_HEFLASH_writeBlock
  8251                           
  8252                           ;main.c: 250: if(!(0 == r)) {_fassert(250, "main.c", "0 == r");};
  8253  02F2  0020               	movlb	0	; select bank0
  8254  02F3  083E               	movf	HEFLASH_checkData@r,w
  8255  02F4  043F               	iorwf	HEFLASH_checkData@r+1,w
  8256  02F5  1903               	btfsc	3,2
  8257  02F6  0008               	return
  8258  02F7  30FA               	movlw	250
  8259  02F8  00A0               	movwf	__fassert@line
  8260  02F9  3000               	movlw	0
  8261  02FA  00A1               	movwf	__fassert@line+1
  8262  02FB  3000               	movlw	low (STR_1| (0+32768))
  8263  02FC  00A2               	movwf	__fassert@file
  8264  02FD  3090               	movlw	high (STR_1| (0+32768))
  8265  02FE  00A3               	movwf	__fassert@file+1
  8266  02FF  3007               	movlw	low (STR_2| (0+32768))
  8267  0300  00A4               	movwf	__fassert@expr
  8268  0301  3090               	movlw	high (STR_2| (0+32768))
  8269  0302  00A5               	movwf	__fassert@expr+1
  8270  0303  318B  23E0         	fcall	__fassert
  8271  0305  0008               	return
  8272  0306                     __end_of_HEFLASH_checkData:	
  8273                           
  8274                           	psect	text17
  8275  0CEB                     __ptext17:	
  8276 ;; *************** function _memset *****************
  8277 ;; Defined at:
  8278 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\memset.c"
  8279 ;; Parameters:    Size  Location     Type
  8280 ;;  p1              1    wreg     PTR void 
  8281 ;;		 -> HEFBufferData(32), 
  8282 ;;  c               2    0[BANK0 ] int 
  8283 ;;  n               2    2[BANK0 ] unsigned int 
  8284 ;; Auto vars:     Size  Location     Type
  8285 ;;  p1              1    5[COMMON] PTR void 
  8286 ;;		 -> HEFBufferData(32), 
  8287 ;;  p               1    4[COMMON] PTR unsigned char 
  8288 ;;		 -> HEFBufferData(32), 
  8289 ;; Return value:  Size  Location     Type
  8290 ;;                  1    wreg      PTR void 
  8291 ;; Registers used:
  8292 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8293 ;; Tracked objects:
  8294 ;;		On entry : 0/0
  8295 ;;		On exit  : 0/0
  8296 ;;		Unchanged: 0/0
  8297 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8298 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8299 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8300 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8301 ;;      Totals:         3       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8302 ;;Total ram usage:        7 bytes
  8303 ;; Hardware stack levels used:    1
  8304 ;; Hardware stack levels required when called:    4
  8305 ;; This function calls:
  8306 ;;		Nothing
  8307 ;; This function is called by:
  8308 ;;		_HEFLASH_checkData
  8309 ;;		_main
  8310 ;; This function uses a non-reentrant model
  8311 ;;
  8312                           
  8313                           
  8314                           ;psect for function _memset
  8315  0CEB                     _memset:	
  8316                           
  8317                           ;incstack = 0
  8318                           ; Regs used in _memset: [wreg+fsr1l+fsr1h+status,2+status,0]
  8319                           ;memset@p1 stored from wreg
  8320  0CEB  00F5               	movwf	memset@p1
  8321  0CEC  0875               	movf	memset@p1,w
  8322  0CED  00F3               	movwf	??_memset
  8323  0CEE  0873               	movf	??_memset,w
  8324  0CEF  00F4               	movwf	memset@p
  8325  0CF0                     l2491:	
  8326  0CF0  3001               	movlw	1
  8327  0CF1  0020               	movlb	0	; select bank0
  8328  0CF2  02A2               	subwf	memset@n,f
  8329  0CF3  3000               	movlw	0
  8330  0CF4  3BA3               	subwfb	memset@n+1,f
  8331  0CF5  0A22               	incf	memset@n,w
  8332  0CF6  1903               	btfsc	3,2
  8333  0CF7  0A23               	incf	memset@n+1,w
  8334  0CF8  1903               	btfsc	3,2
  8335  0CF9  0008               	return
  8336  0CFA  0020               	movlb	0	; select bank0
  8337  0CFB  0820               	movf	memset@c,w
  8338  0CFC  00F3               	movwf	??_memset
  8339  0CFD  0874               	movf	memset@p,w
  8340  0CFE  0086               	movwf	6
  8341  0CFF  0187               	clrf	7
  8342  0D00  0873               	movf	??_memset,w
  8343  0D01  0081               	movwf	1
  8344  0D02  3001               	movlw	1
  8345  0D03  00F3               	movwf	??_memset
  8346  0D04  0873               	movf	??_memset,w
  8347  0D05  07F4               	addwf	memset@p,f
  8348  0D06  2CF0               	goto	l2491
  8349  0D07                     __end_of_memset:	
  8350                           ;	Return value of _memset is never used
  8351                           
  8352                           
  8353                           	psect	text18
  8354  0BE0                     __ptext18:	
  8355 ;; *************** function __fassert *****************
  8356 ;; Defined at:
  8357 ;;		line 77 in file "main.c"
  8358 ;; Parameters:    Size  Location     Type
  8359 ;;  line            2    0[BANK0 ] int 
  8360 ;;  file            2    2[BANK0 ] PTR const unsigned char 
  8361 ;;		 -> STR_3(7), STR_1(7), 
  8362 ;;  expr            2    4[BANK0 ] PTR const unsigned char 
  8363 ;;		 -> STR_4(7), STR_2(7), 
  8364 ;; Auto vars:     Size  Location     Type
  8365 ;;		None
  8366 ;; Return value:  Size  Location     Type
  8367 ;;                  1    wreg      void 
  8368 ;; Registers used:
  8369 ;;		wreg
  8370 ;; Tracked objects:
  8371 ;;		On entry : 0/0
  8372 ;;		On exit  : 0/0
  8373 ;;		Unchanged: 0/0
  8374 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8375 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8376 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8377 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8378 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8379 ;;Total ram usage:        6 bytes
  8380 ;; Hardware stack levels used:    1
  8381 ;; Hardware stack levels required when called:    4
  8382 ;; This function calls:
  8383 ;;		Nothing
  8384 ;; This function is called by:
  8385 ;;		_HEFLASH_checkData
  8386 ;; This function uses a non-reentrant model
  8387 ;;
  8388                           
  8389                           
  8390                           ;psect for function __fassert
  8391  0BE0                     __fassert:	
  8392                           
  8393                           ;main.c: 79: TRISC = 0xf0;
  8394                           
  8395                           ;incstack = 0
  8396                           ; Regs used in __fassert: [wreg]
  8397  0BE0  30F0               	movlw	240
  8398  0BE1  0021               	movlb	1	; select bank1
  8399  0BE2  008E               	movwf	14	;volatile
  8400                           
  8401                           ;main.c: 80: PORTC = PORTC;
  8402  0BE3  0020               	movlb	0	; select bank0
  8403  0BE4  080E               	movf	14,w	;volatile
  8404  0BE5  008E               	movwf	14	;volatile
  8405  0BE6  0008               	return
  8406  0BE7                     __end_of__fassert:	
  8407                           
  8408                           	psect	text19
  8409  0E61                     __ptext19:	
  8410 ;; *************** function _HEFLASH_readBlock *****************
  8411 ;; Defined at:
  8412 ;;		line 49 in file "HEFlash.c"
  8413 ;; Parameters:    Size  Location     Type
  8414 ;;  buffer          1    wreg     PTR unsigned char 
  8415 ;;		 -> HEFBufferData(32), 
  8416 ;;  radd            1    0[BANK0 ] unsigned char 
  8417 ;;  count           1    1[BANK0 ] unsigned char 
  8418 ;; Auto vars:     Size  Location     Type
  8419 ;;  buffer          1    6[BANK0 ] PTR unsigned char 
  8420 ;;		 -> HEFBufferData(32), 
  8421 ;;  add             2    4[BANK0 ] unsigned int 
  8422 ;; Return value:  Size  Location     Type
  8423 ;;                  1    wreg      unsigned char 
  8424 ;; Registers used:
  8425 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8426 ;; Tracked objects:
  8427 ;;		On entry : 0/0
  8428 ;;		On exit  : 0/0
  8429 ;;		Unchanged: 0/0
  8430 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8431 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8432 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8433 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8434 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8435 ;;Total ram usage:        7 bytes
  8436 ;; Hardware stack levels used:    1
  8437 ;; Hardware stack levels required when called:    5
  8438 ;; This function calls:
  8439 ;;		_FLASH_read
  8440 ;; This function is called by:
  8441 ;;		_HEFLASH_checkData
  8442 ;; This function uses a non-reentrant model
  8443 ;;
  8444                           
  8445                           
  8446                           ;psect for function _HEFLASH_readBlock
  8447  0E61                     _HEFLASH_readBlock:	
  8448                           
  8449                           ;incstack = 0
  8450                           ; Regs used in _HEFLASH_readBlock: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8451                           ;HEFLASH_readBlock@buffer stored from wreg
  8452  0E61  0020               	movlb	0	; select bank0
  8453  0E62  00A6               	movwf	HEFLASH_readBlock@buffer
  8454                           
  8455                           ;HEFlash.c: 52: unsigned add = radd * 32 + 0x1F80;
  8456  0E63  0820               	movf	HEFLASH_readBlock@radd,w
  8457  0E64  00A2               	movwf	??_HEFLASH_readBlock
  8458  0E65  01A3               	clrf	??_HEFLASH_readBlock+1
  8459  0E66  3005               	movlw	5
  8460  0E67                     u2055:	
  8461  0E67  35A2               	lslf	??_HEFLASH_readBlock,f
  8462  0E68  0DA3               	rlf	??_HEFLASH_readBlock+1,f
  8463  0E69  0B89               	decfsz	9,f
  8464  0E6A  2E67               	goto	u2055
  8465  0E6B  0822               	movf	??_HEFLASH_readBlock,w
  8466  0E6C  3E80               	addlw	128
  8467  0E6D  00A4               	movwf	HEFLASH_readBlock@add
  8468  0E6E  301F               	movlw	31
  8469  0E6F  3D23               	addwfc	??_HEFLASH_readBlock+1,w
  8470  0E70  00A5               	movwf	HEFLASH_readBlock@add+1
  8471                           
  8472                           ;HEFlash.c: 55: if ( ( count > 32) || (radd >= (0x1FFF-0x1F80+1)/32))
  8473  0E71  3021               	movlw	33
  8474  0E72  0221               	subwf	HEFLASH_readBlock@count,w
  8475  0E73  1803               	skipnc
  8476  0E74  2E79               	goto	l2467
  8477  0E75  3004               	movlw	4
  8478  0E76  0220               	subwf	HEFLASH_readBlock@radd,w
  8479  0E77  1C03               	skipc
  8480  0E78  2E94               	goto	l2479
  8481  0E79                     l2467:	
  8482                           
  8483                           ;HEFlash.c: 56: return -1;
  8484  0E79  30FF               	movlw	255
  8485  0E7A  0008               	return
  8486  0E7B                     l2471:	
  8487                           ;HEFlash.c: 59: while ( count > 0)
  8488                           
  8489                           
  8490                           ;HEFlash.c: 60: {
  8491                           ;HEFlash.c: 61: *buffer++ = (char) FLASH_read( add++);
  8492  0E7B  0825               	movf	HEFLASH_readBlock@add+1,w
  8493  0E7C  00F4               	movwf	FLASH_read@address+1
  8494  0E7D  0824               	movf	HEFLASH_readBlock@add,w
  8495  0E7E  00F3               	movwf	FLASH_read@address
  8496  0E7F  318C  2451  318E   	fcall	_FLASH_read
  8497  0E82  0873               	movf	?_FLASH_read,w
  8498  0E83  0020               	movlb	0	; select bank0
  8499  0E84  00A2               	movwf	??_HEFLASH_readBlock
  8500  0E85  0826               	movf	HEFLASH_readBlock@buffer,w
  8501  0E86  0086               	movwf	6
  8502  0E87  0187               	clrf	7
  8503  0E88  0822               	movf	??_HEFLASH_readBlock,w
  8504  0E89  0081               	movwf	1
  8505  0E8A  3001               	movlw	1
  8506  0E8B  07A4               	addwf	HEFLASH_readBlock@add,f
  8507  0E8C  3000               	movlw	0
  8508  0E8D  3DA5               	addwfc	HEFLASH_readBlock@add+1,f
  8509  0E8E  3001               	movlw	1
  8510  0E8F  00A2               	movwf	??_HEFLASH_readBlock
  8511  0E90  0822               	movf	??_HEFLASH_readBlock,w
  8512  0E91  07A6               	addwf	HEFLASH_readBlock@buffer,f
  8513                           
  8514                           ;HEFlash.c: 62: count--;
  8515  0E92  3001               	movlw	1
  8516  0E93  02A1               	subwf	HEFLASH_readBlock@count,f
  8517  0E94                     l2479:	
  8518  0E94  0821               	movf	HEFLASH_readBlock@count,w
  8519  0E95  1D03               	btfss	3,2
  8520  0E96  2E7B               	goto	l2471
  8521                           
  8522                           ;HEFlash.c: 63: }
  8523                           ;HEFlash.c: 66: return 0;
  8524  0E97  3000               	movlw	0
  8525  0E98  0008               	return
  8526  0E99                     __end_of_HEFLASH_readBlock:	
  8527                           
  8528                           	psect	text20
  8529  0C51                     __ptext20:	
  8530 ;; *************** function _FLASH_read *****************
  8531 ;; Defined at:
  8532 ;;		line 31 in file "Flash.c"
  8533 ;; Parameters:    Size  Location     Type
  8534 ;;  address         2    3[COMMON] unsigned int 
  8535 ;; Auto vars:     Size  Location     Type
  8536 ;;		None
  8537 ;; Return value:  Size  Location     Type
  8538 ;;                  2    3[COMMON] unsigned int 
  8539 ;; Registers used:
  8540 ;;		wreg
  8541 ;; Tracked objects:
  8542 ;;		On entry : 0/0
  8543 ;;		On exit  : 0/0
  8544 ;;		Unchanged: 0/0
  8545 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8546 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8547 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8548 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8549 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8550 ;;Total ram usage:        2 bytes
  8551 ;; Hardware stack levels used:    1
  8552 ;; Hardware stack levels required when called:    4
  8553 ;; This function calls:
  8554 ;;		Nothing
  8555 ;; This function is called by:
  8556 ;;		_HEFLASH_readBlock
  8557 ;;		_FLASH_readBlock
  8558 ;;		_HEFLASH_readByte
  8559 ;; This function uses a non-reentrant model
  8560 ;;
  8561                           
  8562                           
  8563                           ;psect for function _FLASH_read
  8564  0C51                     _FLASH_read:	
  8565                           
  8566                           ;Flash.c: 34: PMADR = address;
  8567                           
  8568                           ;incstack = 0
  8569                           ; Regs used in _FLASH_read: [wreg]
  8570  0C51  0874               	movf	FLASH_read@address+1,w
  8571  0C52  0023               	movlb	3	; select bank3
  8572  0C53  0092               	movwf	18	;volatile
  8573  0C54  0873               	movf	FLASH_read@address,w
  8574  0C55  0091               	movwf	17	;volatile
  8575                           
  8576                           ;Flash.c: 35: PMCON1bits.CFGS = 0;
  8577  0C56  1315               	bcf	21,6	;volatile
  8578                           
  8579                           ;Flash.c: 36: PMCON1bits.RD = 1;
  8580  0C57  1415               	bsf	21,0	;volatile
  8581                           
  8582                           ;Flash.c: 37: __nop();
  8583  0C58  0000               	nop
  8584                           
  8585                           ;Flash.c: 38: __nop();
  8586  0C59  0000               	nop
  8587                           
  8588                           ;Flash.c: 41: return PMDAT;
  8589  0C5A  0023               	movlb	3	; select bank3
  8590  0C5B  0814               	movf	20,w	;volatile
  8591  0C5C  00F4               	movwf	?_FLASH_read+1
  8592  0C5D  0813               	movf	19,w	;volatile
  8593  0C5E  00F3               	movwf	?_FLASH_read
  8594  0C5F  0008               	return
  8595  0C60                     __end_of_FLASH_read:	
  8596                           
  8597                           	psect	text21
  8598  0306                     __ptext21:	
  8599 ;; *************** function _Data_Toseg *****************
  8600 ;; Defined at:
  8601 ;;		line 157 in file "main.c"
  8602 ;; Parameters:    Size  Location     Type
  8603 ;;		None
  8604 ;; Auto vars:     Size  Location     Type
  8605 ;;		None
  8606 ;; Return value:  Size  Location     Type
  8607 ;;                  1    wreg      void 
  8608 ;; Registers used:
  8609 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8610 ;; Tracked objects:
  8611 ;;		On entry : 0/0
  8612 ;;		On exit  : 0/0
  8613 ;;		Unchanged: 0/0
  8614 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8615 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8616 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8617 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8618 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8619 ;;Total ram usage:        5 bytes
  8620 ;; Hardware stack levels used:    1
  8621 ;; Hardware stack levels required when called:    7
  8622 ;; This function calls:
  8623 ;;		_HEFLASH_writeBlock
  8624 ;;		___lldiv
  8625 ;;		___llmod
  8626 ;;		___lwdiv
  8627 ;;		___lwmod
  8628 ;; This function is called by:
  8629 ;;		_main
  8630 ;; This function uses a non-reentrant model
  8631 ;;
  8632                           
  8633                           
  8634                           ;psect for function _Data_Toseg
  8635  0306                     _Data_Toseg:	
  8636                           
  8637                           ;main.c: 159: display_data_1[2] = (gBoxCntStruct.SmallBoxCnt%1000/100)+0x30;
  8638                           
  8639                           ;incstack = 0
  8640                           ; Regs used in _Data_Toseg: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8641  0306  3064               	movlw	100
  8642  0307  0020               	movlb	0	; select bank0
  8643  0308  00A4               	movwf	___lwdiv@divisor
  8644  0309  3000               	movlw	0
  8645  030A  00A5               	movwf	___lwdiv@divisor+1
  8646  030B  084C               	movf	_gBoxCntStruct+10,w
  8647  030C  00A3               	movwf	___lwmod@dividend+1
  8648  030D  084B               	movf	_gBoxCntStruct+9,w
  8649  030E  00A2               	movwf	___lwmod@dividend
  8650  030F  30E8               	movlw	232
  8651  0310  00A0               	movwf	___lwmod@divisor
  8652  0311  3003               	movlw	3
  8653  0312  00A1               	movwf	___lwmod@divisor+1
  8654  0313  318D  25FF  3183   	fcall	___lwmod
  8655  0316  0020               	movlb	0	; select bank0
  8656  0317  0821               	movf	?___lwmod+1,w
  8657  0318  00A7               	movwf	___lwdiv@dividend+1
  8658  0319  0820               	movf	?___lwmod,w
  8659  031A  00A6               	movwf	___lwdiv@dividend
  8660  031B  318E  262C  3183   	fcall	___lwdiv
  8661  031E  0020               	movlb	0	; select bank0
  8662  031F  0824               	movf	?___lwdiv,w
  8663  0320  3E30               	addlw	48
  8664  0321  00B5               	movwf	??_Data_Toseg
  8665  0322  0835               	movf	??_Data_Toseg,w
  8666  0323  0021               	movlb	1	; select bank1
  8667  0324  00A2               	movwf	(_display_data_1^(0+128)+2)
  8668                           
  8669                           ;main.c: 160: display_data_1[3] = (gBoxCntStruct.SmallBoxCnt%100/10)+0x30;
  8670  0325  300A               	movlw	10
  8671  0326  0020               	movlb	0	; select bank0
  8672  0327  00A4               	movwf	___lwdiv@divisor
  8673  0328  3000               	movlw	0
  8674  0329  00A5               	movwf	___lwdiv@divisor+1
  8675  032A  084C               	movf	_gBoxCntStruct+10,w
  8676  032B  00A3               	movwf	___lwmod@dividend+1
  8677  032C  084B               	movf	_gBoxCntStruct+9,w
  8678  032D  00A2               	movwf	___lwmod@dividend
  8679  032E  3064               	movlw	100
  8680  032F  00A0               	movwf	___lwmod@divisor
  8681  0330  3000               	movlw	0
  8682  0331  00A1               	movwf	___lwmod@divisor+1
  8683  0332  318D  25FF  3183   	fcall	___lwmod
  8684  0335  0020               	movlb	0	; select bank0
  8685  0336  0821               	movf	?___lwmod+1,w
  8686  0337  00A7               	movwf	___lwdiv@dividend+1
  8687  0338  0820               	movf	?___lwmod,w
  8688  0339  00A6               	movwf	___lwdiv@dividend
  8689  033A  318E  262C  3183   	fcall	___lwdiv
  8690  033D  0020               	movlb	0	; select bank0
  8691  033E  0824               	movf	?___lwdiv,w
  8692  033F  3E30               	addlw	48
  8693  0340  00B5               	movwf	??_Data_Toseg
  8694  0341  0835               	movf	??_Data_Toseg,w
  8695  0342  0021               	movlb	1	; select bank1
  8696  0343  00A3               	movwf	(_display_data_1^(0+128)+3)
  8697                           
  8698                           ;main.c: 161: display_data_1[4] = (gBoxCntStruct.SmallBoxCnt%10)+0x30;
  8699  0344  300A               	movlw	10
  8700  0345  0020               	movlb	0	; select bank0
  8701  0346  00A0               	movwf	___lwmod@divisor
  8702  0347  3000               	movlw	0
  8703  0348  00A1               	movwf	___lwmod@divisor+1
  8704  0349  084C               	movf	_gBoxCntStruct+10,w
  8705  034A  00A3               	movwf	___lwmod@dividend+1
  8706  034B  084B               	movf	_gBoxCntStruct+9,w
  8707  034C  00A2               	movwf	___lwmod@dividend
  8708  034D  318D  25FF  3183   	fcall	___lwmod
  8709  0350  0020               	movlb	0	; select bank0
  8710  0351  0820               	movf	?___lwmod,w
  8711  0352  3E30               	addlw	48
  8712  0353  00B5               	movwf	??_Data_Toseg
  8713  0354  0835               	movf	??_Data_Toseg,w
  8714  0355  0021               	movlb	1	; select bank1
  8715  0356  00A4               	movwf	(_display_data_1^(0+128)+4)
  8716                           
  8717                           ;main.c: 164: display_data_1[7] = (gBoxCntStruct.MiddleBoxCnt%1000/100)+0x30;
  8718  0357  3064               	movlw	100
  8719  0358  0020               	movlb	0	; select bank0
  8720  0359  00A4               	movwf	___lwdiv@divisor
  8721  035A  3000               	movlw	0
  8722  035B  00A5               	movwf	___lwdiv@divisor+1
  8723  035C  084E               	movf	_gBoxCntStruct+12,w
  8724  035D  00A3               	movwf	___lwmod@dividend+1
  8725  035E  084D               	movf	_gBoxCntStruct+11,w
  8726  035F  00A2               	movwf	___lwmod@dividend
  8727  0360  30E8               	movlw	232
  8728  0361  00A0               	movwf	___lwmod@divisor
  8729  0362  3003               	movlw	3
  8730  0363  00A1               	movwf	___lwmod@divisor+1
  8731  0364  318D  25FF  3183   	fcall	___lwmod
  8732  0367  0020               	movlb	0	; select bank0
  8733  0368  0821               	movf	?___lwmod+1,w
  8734  0369  00A7               	movwf	___lwdiv@dividend+1
  8735  036A  0820               	movf	?___lwmod,w
  8736  036B  00A6               	movwf	___lwdiv@dividend
  8737  036C  318E  262C  3183   	fcall	___lwdiv
  8738  036F  0020               	movlb	0	; select bank0
  8739  0370  0824               	movf	?___lwdiv,w
  8740  0371  3E30               	addlw	48
  8741  0372  00B5               	movwf	??_Data_Toseg
  8742  0373  0835               	movf	??_Data_Toseg,w
  8743  0374  0021               	movlb	1	; select bank1
  8744  0375  00A7               	movwf	(_display_data_1^(0+128)+7)
  8745                           
  8746                           ;main.c: 165: display_data_1[8] = (gBoxCntStruct.MiddleBoxCnt%100/10)+0x30;
  8747  0376  300A               	movlw	10
  8748  0377  0020               	movlb	0	; select bank0
  8749  0378  00A4               	movwf	___lwdiv@divisor
  8750  0379  3000               	movlw	0
  8751  037A  00A5               	movwf	___lwdiv@divisor+1
  8752  037B  084E               	movf	_gBoxCntStruct+12,w
  8753  037C  00A3               	movwf	___lwmod@dividend+1
  8754  037D  084D               	movf	_gBoxCntStruct+11,w
  8755  037E  00A2               	movwf	___lwmod@dividend
  8756  037F  3064               	movlw	100
  8757  0380  00A0               	movwf	___lwmod@divisor
  8758  0381  3000               	movlw	0
  8759  0382  00A1               	movwf	___lwmod@divisor+1
  8760  0383  318D  25FF  3183   	fcall	___lwmod
  8761  0386  0020               	movlb	0	; select bank0
  8762  0387  0821               	movf	?___lwmod+1,w
  8763  0388  00A7               	movwf	___lwdiv@dividend+1
  8764  0389  0820               	movf	?___lwmod,w
  8765  038A  00A6               	movwf	___lwdiv@dividend
  8766  038B  318E  262C  3183   	fcall	___lwdiv
  8767  038E  0020               	movlb	0	; select bank0
  8768  038F  0824               	movf	?___lwdiv,w
  8769  0390  3E30               	addlw	48
  8770  0391  00B5               	movwf	??_Data_Toseg
  8771  0392  0835               	movf	??_Data_Toseg,w
  8772  0393  0021               	movlb	1	; select bank1
  8773  0394  00A8               	movwf	(_display_data_1^(0+128)+8)
  8774                           
  8775                           ;main.c: 166: display_data_1[9] = (gBoxCntStruct.MiddleBoxCnt%10)+0x30;
  8776  0395  300A               	movlw	10
  8777  0396  0020               	movlb	0	; select bank0
  8778  0397  00A0               	movwf	___lwmod@divisor
  8779  0398  3000               	movlw	0
  8780  0399  00A1               	movwf	___lwmod@divisor+1
  8781  039A  084E               	movf	_gBoxCntStruct+12,w
  8782  039B  00A3               	movwf	___lwmod@dividend+1
  8783  039C  084D               	movf	_gBoxCntStruct+11,w
  8784  039D  00A2               	movwf	___lwmod@dividend
  8785  039E  318D  25FF  3183   	fcall	___lwmod
  8786  03A1  0020               	movlb	0	; select bank0
  8787  03A2  0820               	movf	?___lwmod,w
  8788  03A3  3E30               	addlw	48
  8789  03A4  00B5               	movwf	??_Data_Toseg
  8790  03A5  0835               	movf	??_Data_Toseg,w
  8791  03A6  0021               	movlb	1	; select bank1
  8792  03A7  00A9               	movwf	(_display_data_1^(0+128)+9)
  8793                           
  8794                           ;main.c: 168: display_data_1[12] = (gBoxCntStruct.LargeBoxCnt%1000/100)+0x30;
  8795  03A8  3064               	movlw	100
  8796  03A9  0020               	movlb	0	; select bank0
  8797  03AA  00A4               	movwf	___lwdiv@divisor
  8798  03AB  3000               	movlw	0
  8799  03AC  00A5               	movwf	___lwdiv@divisor+1
  8800  03AD  0850               	movf	_gBoxCntStruct+14,w
  8801  03AE  00A3               	movwf	___lwmod@dividend+1
  8802  03AF  084F               	movf	_gBoxCntStruct+13,w
  8803  03B0  00A2               	movwf	___lwmod@dividend
  8804  03B1  30E8               	movlw	232
  8805  03B2  00A0               	movwf	___lwmod@divisor
  8806  03B3  3003               	movlw	3
  8807  03B4  00A1               	movwf	___lwmod@divisor+1
  8808  03B5  318D  25FF  3183   	fcall	___lwmod
  8809  03B8  0020               	movlb	0	; select bank0
  8810  03B9  0821               	movf	?___lwmod+1,w
  8811  03BA  00A7               	movwf	___lwdiv@dividend+1
  8812  03BB  0820               	movf	?___lwmod,w
  8813  03BC  00A6               	movwf	___lwdiv@dividend
  8814  03BD  318E  262C  3183   	fcall	___lwdiv
  8815  03C0  0020               	movlb	0	; select bank0
  8816  03C1  0824               	movf	?___lwdiv,w
  8817  03C2  3E30               	addlw	48
  8818  03C3  00B5               	movwf	??_Data_Toseg
  8819  03C4  0835               	movf	??_Data_Toseg,w
  8820  03C5  0021               	movlb	1	; select bank1
  8821  03C6  00AC               	movwf	(_display_data_1^(0+128)+12)
  8822                           
  8823                           ;main.c: 169: display_data_1[13] = (gBoxCntStruct.LargeBoxCnt%100/10)+0x30;
  8824  03C7  300A               	movlw	10
  8825  03C8  0020               	movlb	0	; select bank0
  8826  03C9  00A4               	movwf	___lwdiv@divisor
  8827  03CA  3000               	movlw	0
  8828  03CB  00A5               	movwf	___lwdiv@divisor+1
  8829  03CC  0850               	movf	_gBoxCntStruct+14,w
  8830  03CD  00A3               	movwf	___lwmod@dividend+1
  8831  03CE  084F               	movf	_gBoxCntStruct+13,w
  8832  03CF  00A2               	movwf	___lwmod@dividend
  8833  03D0  3064               	movlw	100
  8834  03D1  00A0               	movwf	___lwmod@divisor
  8835  03D2  3000               	movlw	0
  8836  03D3  00A1               	movwf	___lwmod@divisor+1
  8837  03D4  318D  25FF  3183   	fcall	___lwmod
  8838  03D7  0020               	movlb	0	; select bank0
  8839  03D8  0821               	movf	?___lwmod+1,w
  8840  03D9  00A7               	movwf	___lwdiv@dividend+1
  8841  03DA  0820               	movf	?___lwmod,w
  8842  03DB  00A6               	movwf	___lwdiv@dividend
  8843  03DC  318E  262C  3183   	fcall	___lwdiv
  8844  03DF  0020               	movlb	0	; select bank0
  8845  03E0  0824               	movf	?___lwdiv,w
  8846  03E1  3E30               	addlw	48
  8847  03E2  00B5               	movwf	??_Data_Toseg
  8848  03E3  0835               	movf	??_Data_Toseg,w
  8849  03E4  0021               	movlb	1	; select bank1
  8850  03E5  00AD               	movwf	(_display_data_1^(0+128)+13)
  8851                           
  8852                           ;main.c: 170: display_data_1[14] = (gBoxCntStruct.LargeBoxCnt%10)+0x30;
  8853  03E6  300A               	movlw	10
  8854  03E7  0020               	movlb	0	; select bank0
  8855  03E8  00A0               	movwf	___lwmod@divisor
  8856  03E9  3000               	movlw	0
  8857  03EA  00A1               	movwf	___lwmod@divisor+1
  8858  03EB  0850               	movf	_gBoxCntStruct+14,w
  8859  03EC  00A3               	movwf	___lwmod@dividend+1
  8860  03ED  084F               	movf	_gBoxCntStruct+13,w
  8861  03EE  00A2               	movwf	___lwmod@dividend
  8862  03EF  318D  25FF  3183   	fcall	___lwmod
  8863  03F2  0020               	movlb	0	; select bank0
  8864  03F3  0820               	movf	?___lwmod,w
  8865  03F4  3E30               	addlw	48
  8866  03F5  00B5               	movwf	??_Data_Toseg
  8867  03F6  0835               	movf	??_Data_Toseg,w
  8868  03F7  0021               	movlb	1	; select bank1
  8869  03F8  00AE               	movwf	(_display_data_1^(0+128)+14)
  8870                           
  8871                           ;main.c: 172: display_data_2[2] = (gBoxCntStruct.BoxSum%1000/100)+0x30;
  8872  03F9  3000               	movlw	0
  8873  03FA  0020               	movlb	0	; select bank0
  8874  03FB  00AB               	movwf	___lldiv@divisor+3
  8875  03FC  3000               	movlw	0
  8876  03FD  00AA               	movwf	___lldiv@divisor+2
  8877  03FE  3000               	movlw	0
  8878  03FF  00A9               	movwf	___lldiv@divisor+1
  8879  0400  3064               	movlw	100
  8880  0401  00A8               	movwf	___lldiv@divisor
  8881  0402  3011               	movlw	17
  8882  0403  3E42               	addlw	(low (_gBoxCntStruct| 0))& (0+255)
  8883  0404  0086               	movwf	6
  8884  0405  0187               	clrf	7
  8885  0406  3F40               	moviw [0]fsr1
  8886  0407  00A4               	movwf	___llmod@dividend
  8887  0408  3F41               	moviw [1]fsr1
  8888  0409  00A5               	movwf	___llmod@dividend+1
  8889  040A  3F42               	moviw [2]fsr1
  8890  040B  00A6               	movwf	___llmod@dividend+2
  8891  040C  3F43               	moviw [3]fsr1
  8892  040D  00A7               	movwf	___llmod@dividend+3
  8893  040E  3000               	movlw	0
  8894  040F  00A3               	movwf	___llmod@divisor+3
  8895  0410  3000               	movlw	0
  8896  0411  00A2               	movwf	___llmod@divisor+2
  8897  0412  3003               	movlw	3
  8898  0413  00A1               	movwf	___llmod@divisor+1
  8899  0414  30E8               	movlw	232
  8900  0415  00A0               	movwf	___llmod@divisor
  8901  0416  318E  2699  3183   	fcall	___llmod
  8902  0419  0020               	movlb	0	; select bank0
  8903  041A  0823               	movf	?___llmod+3,w
  8904  041B  00AF               	movwf	___lldiv@dividend+3
  8905  041C  0822               	movf	?___llmod+2,w
  8906  041D  00AE               	movwf	___lldiv@dividend+2
  8907  041E  0821               	movf	?___llmod+1,w
  8908  041F  00AD               	movwf	___lldiv@dividend+1
  8909  0420  0820               	movf	?___llmod,w
  8910  0421  00AC               	movwf	___lldiv@dividend
  8911  0422  318E  26DC  3183   	fcall	___lldiv
  8912  0425  0020               	movlb	0	; select bank0
  8913  0426  0828               	movf	?___lldiv,w
  8914  0427  3E30               	addlw	48
  8915  0428  00B5               	movwf	??_Data_Toseg
  8916  0429  0835               	movf	??_Data_Toseg,w
  8917  042A  0021               	movlb	1	; select bank1
  8918  042B  00BD               	movwf	(_display_data_2^(0+128)+2)
  8919                           
  8920                           ;main.c: 173: display_data_2[3] = (gBoxCntStruct.BoxSum%100/10)+0x30;
  8921  042C  3000               	movlw	0
  8922  042D  0020               	movlb	0	; select bank0
  8923  042E  00AB               	movwf	___lldiv@divisor+3
  8924  042F  3000               	movlw	0
  8925  0430  00AA               	movwf	___lldiv@divisor+2
  8926  0431  3000               	movlw	0
  8927  0432  00A9               	movwf	___lldiv@divisor+1
  8928  0433  300A               	movlw	10
  8929  0434  00A8               	movwf	___lldiv@divisor
  8930  0435  3011               	movlw	17
  8931  0436  3E42               	addlw	(low (_gBoxCntStruct| 0))& (0+255)
  8932  0437  0086               	movwf	6
  8933  0438  0187               	clrf	7
  8934  0439  3F40               	moviw [0]fsr1
  8935  043A  00A4               	movwf	___llmod@dividend
  8936  043B  3F41               	moviw [1]fsr1
  8937  043C  00A5               	movwf	___llmod@dividend+1
  8938  043D  3F42               	moviw [2]fsr1
  8939  043E  00A6               	movwf	___llmod@dividend+2
  8940  043F  3F43               	moviw [3]fsr1
  8941  0440  00A7               	movwf	___llmod@dividend+3
  8942  0441  3000               	movlw	0
  8943  0442  00A3               	movwf	___llmod@divisor+3
  8944  0443  3000               	movlw	0
  8945  0444  00A2               	movwf	___llmod@divisor+2
  8946  0445  3000               	movlw	0
  8947  0446  00A1               	movwf	___llmod@divisor+1
  8948  0447  3064               	movlw	100
  8949  0448  00A0               	movwf	___llmod@divisor
  8950  0449  318E  2699  3183   	fcall	___llmod
  8951  044C  0020               	movlb	0	; select bank0
  8952  044D  0823               	movf	?___llmod+3,w
  8953  044E  00AF               	movwf	___lldiv@dividend+3
  8954  044F  0822               	movf	?___llmod+2,w
  8955  0450  00AE               	movwf	___lldiv@dividend+2
  8956  0451  0821               	movf	?___llmod+1,w
  8957  0452  00AD               	movwf	___lldiv@dividend+1
  8958  0453  0820               	movf	?___llmod,w
  8959  0454  00AC               	movwf	___lldiv@dividend
  8960  0455  318E  26DC  3183   	fcall	___lldiv
  8961  0458  0020               	movlb	0	; select bank0
  8962  0459  0828               	movf	?___lldiv,w
  8963  045A  3E30               	addlw	48
  8964  045B  00B5               	movwf	??_Data_Toseg
  8965  045C  0835               	movf	??_Data_Toseg,w
  8966  045D  0021               	movlb	1	; select bank1
  8967  045E  00BE               	movwf	(_display_data_2^(0+128)+3)
  8968                           
  8969                           ;main.c: 174: display_data_2[4] = (gBoxCntStruct.BoxSum%10)+0x30;
  8970  045F  3000               	movlw	0
  8971  0460  0020               	movlb	0	; select bank0
  8972  0461  00A3               	movwf	___llmod@divisor+3
  8973  0462  3000               	movlw	0
  8974  0463  00A2               	movwf	___llmod@divisor+2
  8975  0464  3000               	movlw	0
  8976  0465  00A1               	movwf	___llmod@divisor+1
  8977  0466  300A               	movlw	10
  8978  0467  00A0               	movwf	___llmod@divisor
  8979  0468  3011               	movlw	17
  8980  0469  3E42               	addlw	(low (_gBoxCntStruct| 0))& (0+255)
  8981  046A  0086               	movwf	6
  8982  046B  0187               	clrf	7
  8983  046C  3F40               	moviw [0]fsr1
  8984  046D  00A4               	movwf	___llmod@dividend
  8985  046E  3F41               	moviw [1]fsr1
  8986  046F  00A5               	movwf	___llmod@dividend+1
  8987  0470  3F42               	moviw [2]fsr1
  8988  0471  00A6               	movwf	___llmod@dividend+2
  8989  0472  3F43               	moviw [3]fsr1
  8990  0473  00A7               	movwf	___llmod@dividend+3
  8991  0474  318E  2699  3183   	fcall	___llmod
  8992  0477  0020               	movlb	0	; select bank0
  8993  0478  0820               	movf	?___llmod,w
  8994  0479  3E30               	addlw	48
  8995  047A  00B5               	movwf	??_Data_Toseg
  8996  047B  0835               	movf	??_Data_Toseg,w
  8997  047C  0021               	movlb	1	; select bank1
  8998  047D  00BF               	movwf	(_display_data_2^(0+128)+4)
  8999                           
  9000                           ;main.c: 176: display_data_2[7] = (gBoxCntStruct.JamCnt%1000/100)+0x30;
  9001  047E  3064               	movlw	100
  9002  047F  0020               	movlb	0	; select bank0
  9003  0480  00A4               	movwf	___lwdiv@divisor
  9004  0481  3000               	movlw	0
  9005  0482  00A5               	movwf	___lwdiv@divisor+1
  9006  0483  0852               	movf	_gBoxCntStruct+16,w
  9007  0484  00A3               	movwf	___lwmod@dividend+1
  9008  0485  0851               	movf	_gBoxCntStruct+15,w
  9009  0486  00A2               	movwf	___lwmod@dividend
  9010  0487  30E8               	movlw	232
  9011  0488  00A0               	movwf	___lwmod@divisor
  9012  0489  3003               	movlw	3
  9013  048A  00A1               	movwf	___lwmod@divisor+1
  9014  048B  318D  25FF  3183   	fcall	___lwmod
  9015  048E  0020               	movlb	0	; select bank0
  9016  048F  0821               	movf	?___lwmod+1,w
  9017  0490  00A7               	movwf	___lwdiv@dividend+1
  9018  0491  0820               	movf	?___lwmod,w
  9019  0492  00A6               	movwf	___lwdiv@dividend
  9020  0493  318E  262C  3183   	fcall	___lwdiv
  9021  0496  0020               	movlb	0	; select bank0
  9022  0497  0824               	movf	?___lwdiv,w
  9023  0498  3E30               	addlw	48
  9024  0499  00B5               	movwf	??_Data_Toseg
  9025  049A  0835               	movf	??_Data_Toseg,w
  9026  049B  0021               	movlb	1	; select bank1
  9027  049C  00C2               	movwf	(_display_data_2^(0+128)+7)
  9028                           
  9029                           ;main.c: 177: display_data_2[8] = (gBoxCntStruct.JamCnt%100/10)+0x30;
  9030  049D  300A               	movlw	10
  9031  049E  0020               	movlb	0	; select bank0
  9032  049F  00A4               	movwf	___lwdiv@divisor
  9033  04A0  3000               	movlw	0
  9034  04A1  00A5               	movwf	___lwdiv@divisor+1
  9035  04A2  0852               	movf	_gBoxCntStruct+16,w
  9036  04A3  00A3               	movwf	___lwmod@dividend+1
  9037  04A4  0851               	movf	_gBoxCntStruct+15,w
  9038  04A5  00A2               	movwf	___lwmod@dividend
  9039  04A6  3064               	movlw	100
  9040  04A7  00A0               	movwf	___lwmod@divisor
  9041  04A8  3000               	movlw	0
  9042  04A9  00A1               	movwf	___lwmod@divisor+1
  9043  04AA  318D  25FF  3183   	fcall	___lwmod
  9044  04AD  0020               	movlb	0	; select bank0
  9045  04AE  0821               	movf	?___lwmod+1,w
  9046  04AF  00A7               	movwf	___lwdiv@dividend+1
  9047  04B0  0820               	movf	?___lwmod,w
  9048  04B1  00A6               	movwf	___lwdiv@dividend
  9049  04B2  318E  262C  3183   	fcall	___lwdiv
  9050  04B5  0020               	movlb	0	; select bank0
  9051  04B6  0824               	movf	?___lwdiv,w
  9052  04B7  3E30               	addlw	48
  9053  04B8  00B5               	movwf	??_Data_Toseg
  9054  04B9  0835               	movf	??_Data_Toseg,w
  9055  04BA  0021               	movlb	1	; select bank1
  9056  04BB  00C3               	movwf	(_display_data_2^(0+128)+8)
  9057                           
  9058                           ;main.c: 178: display_data_2[9] = (gBoxCntStruct.JamCnt%10)+0x30;
  9059  04BC  300A               	movlw	10
  9060  04BD  0020               	movlb	0	; select bank0
  9061  04BE  00A0               	movwf	___lwmod@divisor
  9062  04BF  3000               	movlw	0
  9063  04C0  00A1               	movwf	___lwmod@divisor+1
  9064  04C1  0852               	movf	_gBoxCntStruct+16,w
  9065  04C2  00A3               	movwf	___lwmod@dividend+1
  9066  04C3  0851               	movf	_gBoxCntStruct+15,w
  9067  04C4  00A2               	movwf	___lwmod@dividend
  9068  04C5  318D  25FF  3183   	fcall	___lwmod
  9069  04C8  0020               	movlb	0	; select bank0
  9070  04C9  0820               	movf	?___lwmod,w
  9071  04CA  3E30               	addlw	48
  9072  04CB  00B5               	movwf	??_Data_Toseg
  9073  04CC  0835               	movf	??_Data_Toseg,w
  9074  04CD  0021               	movlb	1	; select bank1
  9075  04CE  00C4               	movwf	(_display_data_2^(0+128)+9)
  9076                           
  9077                           ;main.c: 181: HEFBufferData[3] = (unsigned char)(gBoxCntStruct.SmallBoxCnt >> 8);
  9078  04CF  0020               	movlb	0	; select bank0
  9079  04D0  084C               	movf	_gBoxCntStruct+10,w
  9080  04D1  00B5               	movwf	??_Data_Toseg
  9081  04D2  0835               	movf	??_Data_Toseg,w
  9082  04D3  0021               	movlb	1	; select bank1
  9083  04D4  00C9               	movwf	(_HEFBufferData^(0+128)+3)
  9084                           
  9085                           ;main.c: 182: HEFBufferData[4] = (unsigned char)(gBoxCntStruct.SmallBoxCnt);
  9086  04D5  0020               	movlb	0	; select bank0
  9087  04D6  084B               	movf	_gBoxCntStruct+9,w
  9088  04D7  00B5               	movwf	??_Data_Toseg
  9089  04D8  0835               	movf	??_Data_Toseg,w
  9090  04D9  0021               	movlb	1	; select bank1
  9091  04DA  00CA               	movwf	(_HEFBufferData^(0+128)+4)
  9092                           
  9093                           ;main.c: 185: HEFBufferData[7] = (unsigned char)(gBoxCntStruct.MiddleBoxCnt >> 8);
  9094  04DB  0020               	movlb	0	; select bank0
  9095  04DC  084E               	movf	_gBoxCntStruct+12,w
  9096  04DD  00B5               	movwf	??_Data_Toseg
  9097  04DE  0835               	movf	??_Data_Toseg,w
  9098  04DF  0021               	movlb	1	; select bank1
  9099  04E0  00CD               	movwf	(_HEFBufferData^(0+128)+7)
  9100                           
  9101                           ;main.c: 186: HEFBufferData[8] = (unsigned char)(gBoxCntStruct.MiddleBoxCnt);
  9102  04E1  0020               	movlb	0	; select bank0
  9103  04E2  084D               	movf	_gBoxCntStruct+11,w
  9104  04E3  00B5               	movwf	??_Data_Toseg
  9105  04E4  0835               	movf	??_Data_Toseg,w
  9106  04E5  0021               	movlb	1	; select bank1
  9107  04E6  00CE               	movwf	(_HEFBufferData^(0+128)+8)
  9108                           
  9109                           ;main.c: 189: HEFBufferData[11] = (unsigned char)(gBoxCntStruct.LargeBoxCnt >> 8);
  9110  04E7  0020               	movlb	0	; select bank0
  9111  04E8  0850               	movf	_gBoxCntStruct+14,w
  9112  04E9  00B5               	movwf	??_Data_Toseg
  9113  04EA  0835               	movf	??_Data_Toseg,w
  9114  04EB  0021               	movlb	1	; select bank1
  9115  04EC  00D1               	movwf	(_HEFBufferData^(0+128)+11)
  9116                           
  9117                           ;main.c: 190: HEFBufferData[12] = (unsigned char)(gBoxCntStruct.LargeBoxCnt );
  9118  04ED  0020               	movlb	0	; select bank0
  9119  04EE  084F               	movf	_gBoxCntStruct+13,w
  9120  04EF  00B5               	movwf	??_Data_Toseg
  9121  04F0  0835               	movf	??_Data_Toseg,w
  9122  04F1  0021               	movlb	1	; select bank1
  9123  04F2  00D2               	movwf	(_HEFBufferData^(0+128)+12)
  9124                           
  9125                           ;main.c: 193: HEFBufferData[15] = (unsigned char)(gBoxCntStruct.BoxSum >> 8);
  9126  04F3  0020               	movlb	0	; select bank0
  9127  04F4  0853               	movf	_gBoxCntStruct+17,w
  9128  04F5  00B5               	movwf	??_Data_Toseg
  9129  04F6  0854               	movf	_gBoxCntStruct+18,w
  9130  04F7  00B6               	movwf	??_Data_Toseg+1
  9131  04F8  0855               	movf	_gBoxCntStruct+19,w
  9132  04F9  00B7               	movwf	??_Data_Toseg+2
  9133  04FA  0856               	movf	_gBoxCntStruct+20,w
  9134  04FB  00B8               	movwf	??_Data_Toseg+3
  9135  04FC  3008               	movlw	8
  9136  04FD                     u2245:	
  9137  04FD  36B8               	lsrf	??_Data_Toseg+3,f
  9138  04FE  0CB7               	rrf	??_Data_Toseg+2,f
  9139  04FF  0CB6               	rrf	??_Data_Toseg+1,f
  9140  0500  0CB5               	rrf	??_Data_Toseg,f
  9141  0501  0B89               	decfsz	9,f
  9142  0502  2CFD               	goto	u2245
  9143  0503  0835               	movf	??_Data_Toseg,w
  9144  0504  00B9               	movwf	??_Data_Toseg+4
  9145  0505  0839               	movf	??_Data_Toseg+4,w
  9146  0506  0021               	movlb	1	; select bank1
  9147  0507  00D5               	movwf	(_HEFBufferData^(0+128)+15)
  9148                           
  9149                           ;main.c: 194: HEFBufferData[16] = (unsigned char)(gBoxCntStruct.BoxSum );
  9150  0508  0020               	movlb	0	; select bank0
  9151  0509  0853               	movf	_gBoxCntStruct+17,w
  9152  050A  00B5               	movwf	??_Data_Toseg
  9153  050B  0835               	movf	??_Data_Toseg,w
  9154  050C  0021               	movlb	1	; select bank1
  9155  050D  00D6               	movwf	(_HEFBufferData^(0+128)+16)
  9156                           
  9157                           ;main.c: 197: HEFBufferData[19] = (unsigned char)(gBoxCntStruct.JamCnt >> 8);
  9158  050E  0020               	movlb	0	; select bank0
  9159  050F  0852               	movf	_gBoxCntStruct+16,w
  9160  0510  00B5               	movwf	??_Data_Toseg
  9161  0511  0835               	movf	??_Data_Toseg,w
  9162  0512  0021               	movlb	1	; select bank1
  9163  0513  00D9               	movwf	(_HEFBufferData^(0+128)+19)
  9164                           
  9165                           ;main.c: 198: HEFBufferData[20] = (unsigned char)(gBoxCntStruct.JamCnt );
  9166  0514  0020               	movlb	0	; select bank0
  9167  0515  0851               	movf	_gBoxCntStruct+15,w
  9168  0516  00B5               	movwf	??_Data_Toseg
  9169  0517  0835               	movf	??_Data_Toseg,w
  9170  0518  0021               	movlb	1	; select bank1
  9171  0519  00DA               	movwf	(_HEFBufferData^(0+128)+20)
  9172                           
  9173                           ;main.c: 200: (INTCONbits.GIE = 0);
  9174  051A  138B               	bcf	11,7	;volatile
  9175                           
  9176                           ;main.c: 201: HEFLASH_writeBlock(0, (void*)&HEFBufferData,sizeof(HEFBufferData));
  9177  051B  30C6               	movlw	(low (_HEFBufferData| 0))& (0+255)
  9178  051C  0020               	movlb	0	; select bank0
  9179  051D  00B5               	movwf	??_Data_Toseg
  9180  051E  0835               	movf	??_Data_Toseg,w
  9181  051F  00A5               	movwf	HEFLASH_writeBlock@data
  9182  0520  3020               	movlw	32
  9183  0521  00B6               	movwf	??_Data_Toseg+1
  9184  0522  0836               	movf	??_Data_Toseg+1,w
  9185  0523  00A6               	movwf	HEFLASH_writeBlock@count
  9186  0524  3000               	movlw	0
  9187  0525  318F  272F         	fcall	_HEFLASH_writeBlock
  9188                           
  9189                           ;main.c: 202: (INTCONbits.GIE = 1);
  9190  0527  178B               	bsf	11,7	;volatile
  9191  0528  0008               	return
  9192  0529                     __end_of_Data_Toseg:	
  9193                           
  9194                           	psect	text22
  9195  0DFF                     __ptext22:	
  9196 ;; *************** function ___lwmod *****************
  9197 ;; Defined at:
  9198 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
  9199 ;; Parameters:    Size  Location     Type
  9200 ;;  divisor         2    0[BANK0 ] unsigned int 
  9201 ;;  dividend        2    2[BANK0 ] unsigned int 
  9202 ;; Auto vars:     Size  Location     Type
  9203 ;;  counter         1    4[COMMON] unsigned char 
  9204 ;; Return value:  Size  Location     Type
  9205 ;;                  2    0[BANK0 ] unsigned int 
  9206 ;; Registers used:
  9207 ;;		wreg, status,2, status,0
  9208 ;; Tracked objects:
  9209 ;;		On entry : 0/0
  9210 ;;		On exit  : 0/0
  9211 ;;		Unchanged: 0/0
  9212 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9213 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9214 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9215 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9216 ;;      Totals:         2       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9217 ;;Total ram usage:        6 bytes
  9218 ;; Hardware stack levels used:    1
  9219 ;; Hardware stack levels required when called:    4
  9220 ;; This function calls:
  9221 ;;		Nothing
  9222 ;; This function is called by:
  9223 ;;		_Data_Toseg
  9224 ;;		_HEFLASH_checkData
  9225 ;; This function uses a non-reentrant model
  9226 ;;
  9227                           
  9228                           
  9229                           ;psect for function ___lwmod
  9230  0DFF                     ___lwmod:	
  9231                           
  9232                           ;incstack = 0
  9233                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  9234  0DFF  0020               	movlb	0	; select bank0
  9235  0E00  0820               	movf	___lwmod@divisor,w
  9236  0E01  0421               	iorwf	___lwmod@divisor+1,w
  9237  0E02  1903               	btfsc	3,2
  9238  0E03  2E27               	goto	l2537
  9239  0E04  01F4               	clrf	___lwmod@counter
  9240  0E05  0AF4               	incf	___lwmod@counter,f
  9241  0E06                     l2527:	
  9242  0E06  1BA1               	btfsc	___lwmod@divisor+1,7
  9243  0E07  2E12               	goto	l2529
  9244  0E08  3001               	movlw	1
  9245  0E09                     u2185:	
  9246  0E09  35A0               	lslf	___lwmod@divisor,f
  9247  0E0A  0DA1               	rlf	___lwmod@divisor+1,f
  9248  0E0B  0B89               	decfsz	9,f
  9249  0E0C  2E09               	goto	u2185
  9250  0E0D  3001               	movlw	1
  9251  0E0E  00F3               	movwf	??___lwmod
  9252  0E0F  0873               	movf	??___lwmod,w
  9253  0E10  07F4               	addwf	___lwmod@counter,f
  9254  0E11  2E06               	goto	l2527
  9255  0E12                     l2529:	
  9256  0E12  0821               	movf	___lwmod@divisor+1,w
  9257  0E13  0223               	subwf	___lwmod@dividend+1,w
  9258  0E14  1D03               	skipz
  9259  0E15  2E18               	goto	u2205
  9260  0E16  0820               	movf	___lwmod@divisor,w
  9261  0E17  0222               	subwf	___lwmod@dividend,w
  9262  0E18                     u2205:	
  9263  0E18  1C03               	skipc
  9264  0E19  2E1E               	goto	l2533
  9265  0E1A  0820               	movf	___lwmod@divisor,w
  9266  0E1B  02A2               	subwf	___lwmod@dividend,f
  9267  0E1C  0821               	movf	___lwmod@divisor+1,w
  9268  0E1D  3BA3               	subwfb	___lwmod@dividend+1,f
  9269  0E1E                     l2533:	
  9270  0E1E  3001               	movlw	1
  9271  0E1F                     u2215:	
  9272  0E1F  36A1               	lsrf	___lwmod@divisor+1,f
  9273  0E20  0CA0               	rrf	___lwmod@divisor,f
  9274  0E21  0B89               	decfsz	9,f
  9275  0E22  2E1F               	goto	u2215
  9276  0E23  3001               	movlw	1
  9277  0E24  02F4               	subwf	___lwmod@counter,f
  9278  0E25  1D03               	btfss	3,2
  9279  0E26  2E12               	goto	l2529
  9280  0E27                     l2537:	
  9281  0E27  0823               	movf	___lwmod@dividend+1,w
  9282  0E28  00A1               	movwf	?___lwmod+1
  9283  0E29  0822               	movf	___lwmod@dividend,w
  9284  0E2A  00A0               	movwf	?___lwmod
  9285  0E2B  0008               	return
  9286  0E2C                     __end_of___lwmod:	
  9287                           
  9288                           	psect	text23
  9289  0E2C                     __ptext23:	
  9290 ;; *************** function ___lwdiv *****************
  9291 ;; Defined at:
  9292 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
  9293 ;; Parameters:    Size  Location     Type
  9294 ;;  divisor         2    4[BANK0 ] unsigned int 
  9295 ;;  dividend        2    6[BANK0 ] unsigned int 
  9296 ;; Auto vars:     Size  Location     Type
  9297 ;;  quotient        2    9[BANK0 ] unsigned int 
  9298 ;;  counter         1    8[BANK0 ] unsigned char 
  9299 ;; Return value:  Size  Location     Type
  9300 ;;                  2    4[BANK0 ] unsigned int 
  9301 ;; Registers used:
  9302 ;;		wreg, status,2, status,0
  9303 ;; Tracked objects:
  9304 ;;		On entry : 0/0
  9305 ;;		On exit  : 0/0
  9306 ;;		Unchanged: 0/0
  9307 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9308 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9309 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9310 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9311 ;;      Totals:         1       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9312 ;;Total ram usage:        8 bytes
  9313 ;; Hardware stack levels used:    1
  9314 ;; Hardware stack levels required when called:    4
  9315 ;; This function calls:
  9316 ;;		Nothing
  9317 ;; This function is called by:
  9318 ;;		_Data_Toseg
  9319 ;;		_HEFLASH_checkData
  9320 ;; This function uses a non-reentrant model
  9321 ;;
  9322                           
  9323                           
  9324                           ;psect for function ___lwdiv
  9325  0E2C                     ___lwdiv:	
  9326                           
  9327                           ;incstack = 0
  9328                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  9329  0E2C  0020               	movlb	0	; select bank0
  9330  0E2D  01A9               	clrf	___lwdiv@quotient
  9331  0E2E  01AA               	clrf	___lwdiv@quotient+1
  9332  0E2F  0824               	movf	___lwdiv@divisor,w
  9333  0E30  0425               	iorwf	___lwdiv@divisor+1,w
  9334  0E31  1903               	btfsc	3,2
  9335  0E32  2E5C               	goto	l2515
  9336  0E33  01A8               	clrf	___lwdiv@counter
  9337  0E34  0AA8               	incf	___lwdiv@counter,f
  9338  0E35                     l2503:	
  9339  0E35  1BA5               	btfsc	___lwdiv@divisor+1,7
  9340  0E36  2E41               	goto	l2505
  9341  0E37  3001               	movlw	1
  9342  0E38                     u2115:	
  9343  0E38  35A4               	lslf	___lwdiv@divisor,f
  9344  0E39  0DA5               	rlf	___lwdiv@divisor+1,f
  9345  0E3A  0B89               	decfsz	9,f
  9346  0E3B  2E38               	goto	u2115
  9347  0E3C  3001               	movlw	1
  9348  0E3D  00F5               	movwf	??___lwdiv
  9349  0E3E  0875               	movf	??___lwdiv,w
  9350  0E3F  07A8               	addwf	___lwdiv@counter,f
  9351  0E40  2E35               	goto	l2503
  9352  0E41                     l2505:	
  9353  0E41  3001               	movlw	1
  9354  0E42                     u2135:	
  9355  0E42  35A9               	lslf	___lwdiv@quotient,f
  9356  0E43  0DAA               	rlf	___lwdiv@quotient+1,f
  9357  0E44  0B89               	decfsz	9,f
  9358  0E45  2E42               	goto	u2135
  9359  0E46  0825               	movf	___lwdiv@divisor+1,w
  9360  0E47  0227               	subwf	___lwdiv@dividend+1,w
  9361  0E48  1D03               	skipz
  9362  0E49  2E4C               	goto	u2145
  9363  0E4A  0824               	movf	___lwdiv@divisor,w
  9364  0E4B  0226               	subwf	___lwdiv@dividend,w
  9365  0E4C                     u2145:	
  9366  0E4C  1C03               	skipc
  9367  0E4D  2E53               	goto	l2511
  9368  0E4E  0824               	movf	___lwdiv@divisor,w
  9369  0E4F  02A6               	subwf	___lwdiv@dividend,f
  9370  0E50  0825               	movf	___lwdiv@divisor+1,w
  9371  0E51  3BA7               	subwfb	___lwdiv@dividend+1,f
  9372  0E52  1429               	bsf	___lwdiv@quotient,0
  9373  0E53                     l2511:	
  9374  0E53  3001               	movlw	1
  9375  0E54                     u2155:	
  9376  0E54  36A5               	lsrf	___lwdiv@divisor+1,f
  9377  0E55  0CA4               	rrf	___lwdiv@divisor,f
  9378  0E56  0B89               	decfsz	9,f
  9379  0E57  2E54               	goto	u2155
  9380  0E58  3001               	movlw	1
  9381  0E59  02A8               	subwf	___lwdiv@counter,f
  9382  0E5A  1D03               	btfss	3,2
  9383  0E5B  2E41               	goto	l2505
  9384  0E5C                     l2515:	
  9385  0E5C  082A               	movf	___lwdiv@quotient+1,w
  9386  0E5D  00A5               	movwf	?___lwdiv+1
  9387  0E5E  0829               	movf	___lwdiv@quotient,w
  9388  0E5F  00A4               	movwf	?___lwdiv
  9389  0E60  0008               	return
  9390  0E61                     __end_of___lwdiv:	
  9391                           
  9392                           	psect	text24
  9393  0E99                     __ptext24:	
  9394 ;; *************** function ___llmod *****************
  9395 ;; Defined at:
  9396 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\llmod.c"
  9397 ;; Parameters:    Size  Location     Type
  9398 ;;  divisor         4    0[BANK0 ] unsigned long 
  9399 ;;  dividend        4    4[BANK0 ] unsigned long 
  9400 ;; Auto vars:     Size  Location     Type
  9401 ;;  counter         1    4[COMMON] unsigned char 
  9402 ;; Return value:  Size  Location     Type
  9403 ;;                  4    0[BANK0 ] unsigned long 
  9404 ;; Registers used:
  9405 ;;		wreg, status,2, status,0
  9406 ;; Tracked objects:
  9407 ;;		On entry : 0/0
  9408 ;;		On exit  : 0/0
  9409 ;;		Unchanged: 0/0
  9410 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9411 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9412 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9413 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9414 ;;      Totals:         2       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9415 ;;Total ram usage:       10 bytes
  9416 ;; Hardware stack levels used:    1
  9417 ;; Hardware stack levels required when called:    4
  9418 ;; This function calls:
  9419 ;;		Nothing
  9420 ;; This function is called by:
  9421 ;;		_Data_Toseg
  9422 ;;		_HEFLASH_checkData
  9423 ;; This function uses a non-reentrant model
  9424 ;;
  9425                           
  9426                           
  9427                           ;psect for function ___llmod
  9428  0E99                     ___llmod:	
  9429                           
  9430                           ;incstack = 0
  9431                           ; Regs used in ___llmod: [wreg+status,2+status,0]
  9432  0E99  0020               	movlb	0	; select bank0
  9433  0E9A  0823               	movf	___llmod@divisor+3,w
  9434  0E9B  0422               	iorwf	___llmod@divisor+2,w
  9435  0E9C  0421               	iorwf	___llmod@divisor+1,w
  9436  0E9D  0420               	iorwf	___llmod@divisor,w
  9437  0E9E  1903               	skipnz
  9438  0E9F  2ED3               	goto	l2095
  9439  0EA0  01F4               	clrf	___llmod@counter
  9440  0EA1  0AF4               	incf	___llmod@counter,f
  9441  0EA2                     l2085:	
  9442  0EA2  1BA3               	btfsc	___llmod@divisor+3,7
  9443  0EA3  2EB0               	goto	l2087
  9444  0EA4  3001               	movlw	1
  9445  0EA5                     u1485:	
  9446  0EA5  35A0               	lslf	___llmod@divisor,f
  9447  0EA6  0DA1               	rlf	___llmod@divisor+1,f
  9448  0EA7  0DA2               	rlf	___llmod@divisor+2,f
  9449  0EA8  0DA3               	rlf	___llmod@divisor+3,f
  9450  0EA9  0B89               	decfsz	9,f
  9451  0EAA  2EA5               	goto	u1485
  9452  0EAB  3001               	movlw	1
  9453  0EAC  00F3               	movwf	??___llmod
  9454  0EAD  0873               	movf	??___llmod,w
  9455  0EAE  07F4               	addwf	___llmod@counter,f
  9456  0EAF  2EA2               	goto	l2085
  9457  0EB0                     l2087:	
  9458  0EB0  0823               	movf	___llmod@divisor+3,w
  9459  0EB1  0227               	subwf	___llmod@dividend+3,w
  9460  0EB2  1D03               	skipz
  9461  0EB3  2EBE               	goto	u1505
  9462  0EB4  0822               	movf	___llmod@divisor+2,w
  9463  0EB5  0226               	subwf	___llmod@dividend+2,w
  9464  0EB6  1D03               	skipz
  9465  0EB7  2EBE               	goto	u1505
  9466  0EB8  0821               	movf	___llmod@divisor+1,w
  9467  0EB9  0225               	subwf	___llmod@dividend+1,w
  9468  0EBA  1D03               	skipz
  9469  0EBB  2EBE               	goto	u1505
  9470  0EBC  0820               	movf	___llmod@divisor,w
  9471  0EBD  0224               	subwf	___llmod@dividend,w
  9472  0EBE                     u1505:	
  9473  0EBE  1C03               	skipc
  9474  0EBF  2EC8               	goto	l2091
  9475  0EC0  0820               	movf	___llmod@divisor,w
  9476  0EC1  02A4               	subwf	___llmod@dividend,f
  9477  0EC2  0821               	movf	___llmod@divisor+1,w
  9478  0EC3  3BA5               	subwfb	___llmod@dividend+1,f
  9479  0EC4  0822               	movf	___llmod@divisor+2,w
  9480  0EC5  3BA6               	subwfb	___llmod@dividend+2,f
  9481  0EC6  0823               	movf	___llmod@divisor+3,w
  9482  0EC7  3BA7               	subwfb	___llmod@dividend+3,f
  9483  0EC8                     l2091:	
  9484  0EC8  3001               	movlw	1
  9485  0EC9                     u1515:	
  9486  0EC9  36A3               	lsrf	___llmod@divisor+3,f
  9487  0ECA  0CA2               	rrf	___llmod@divisor+2,f
  9488  0ECB  0CA1               	rrf	___llmod@divisor+1,f
  9489  0ECC  0CA0               	rrf	___llmod@divisor,f
  9490  0ECD  0B89               	decfsz	9,f
  9491  0ECE  2EC9               	goto	u1515
  9492  0ECF  3001               	movlw	1
  9493  0ED0  02F4               	subwf	___llmod@counter,f
  9494  0ED1  1D03               	btfss	3,2
  9495  0ED2  2EB0               	goto	l2087
  9496  0ED3                     l2095:	
  9497  0ED3  0827               	movf	___llmod@dividend+3,w
  9498  0ED4  00A3               	movwf	?___llmod+3
  9499  0ED5  0826               	movf	___llmod@dividend+2,w
  9500  0ED6  00A2               	movwf	?___llmod+2
  9501  0ED7  0825               	movf	___llmod@dividend+1,w
  9502  0ED8  00A1               	movwf	?___llmod+1
  9503  0ED9  0824               	movf	___llmod@dividend,w
  9504  0EDA  00A0               	movwf	?___llmod
  9505  0EDB  0008               	return
  9506  0EDC                     __end_of___llmod:	
  9507                           
  9508                           	psect	text25
  9509  0EDC                     __ptext25:	
  9510 ;; *************** function ___lldiv *****************
  9511 ;; Defined at:
  9512 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
  9513 ;; Parameters:    Size  Location     Type
  9514 ;;  divisor         4    8[BANK0 ] unsigned long 
  9515 ;;  dividend        4   12[BANK0 ] unsigned long 
  9516 ;; Auto vars:     Size  Location     Type
  9517 ;;  quotient        4   16[BANK0 ] unsigned long 
  9518 ;;  counter         1   20[BANK0 ] unsigned char 
  9519 ;; Return value:  Size  Location     Type
  9520 ;;                  4    8[BANK0 ] unsigned long 
  9521 ;; Registers used:
  9522 ;;		wreg, status,2, status,0
  9523 ;; Tracked objects:
  9524 ;;		On entry : 0/0
  9525 ;;		On exit  : 0/0
  9526 ;;		Unchanged: 0/0
  9527 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9528 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9529 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9530 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9531 ;;      Totals:         1      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9532 ;;Total ram usage:       14 bytes
  9533 ;; Hardware stack levels used:    1
  9534 ;; Hardware stack levels required when called:    4
  9535 ;; This function calls:
  9536 ;;		Nothing
  9537 ;; This function is called by:
  9538 ;;		_Data_Toseg
  9539 ;;		_HEFLASH_checkData
  9540 ;; This function uses a non-reentrant model
  9541 ;;
  9542                           
  9543                           
  9544                           ;psect for function ___lldiv
  9545  0EDC                     ___lldiv:	
  9546                           
  9547                           ;incstack = 0
  9548                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  9549  0EDC  3000               	movlw	0
  9550  0EDD  0020               	movlb	0	; select bank0
  9551  0EDE  00B3               	movwf	___lldiv@quotient+3
  9552  0EDF  3000               	movlw	0
  9553  0EE0  00B2               	movwf	___lldiv@quotient+2
  9554  0EE1  3000               	movlw	0
  9555  0EE2  00B1               	movwf	___lldiv@quotient+1
  9556  0EE3  3000               	movlw	0
  9557  0EE4  00B0               	movwf	___lldiv@quotient
  9558  0EE5  082B               	movf	___lldiv@divisor+3,w
  9559  0EE6  042A               	iorwf	___lldiv@divisor+2,w
  9560  0EE7  0429               	iorwf	___lldiv@divisor+1,w
  9561  0EE8  0428               	iorwf	___lldiv@divisor,w
  9562  0EE9  1903               	skipnz
  9563  0EEA  2F26               	goto	l2075
  9564  0EEB  01B4               	clrf	___lldiv@counter
  9565  0EEC  0AB4               	incf	___lldiv@counter,f
  9566  0EED                     l2061:	
  9567  0EED  1BAB               	btfsc	___lldiv@divisor+3,7
  9568  0EEE  2EFB               	goto	l2063
  9569  0EEF  3001               	movlw	1
  9570  0EF0                     u1415:	
  9571  0EF0  35A8               	lslf	___lldiv@divisor,f
  9572  0EF1  0DA9               	rlf	___lldiv@divisor+1,f
  9573  0EF2  0DAA               	rlf	___lldiv@divisor+2,f
  9574  0EF3  0DAB               	rlf	___lldiv@divisor+3,f
  9575  0EF4  0B89               	decfsz	9,f
  9576  0EF5  2EF0               	goto	u1415
  9577  0EF6  3001               	movlw	1
  9578  0EF7  00F5               	movwf	??___lldiv
  9579  0EF8  0875               	movf	??___lldiv,w
  9580  0EF9  07B4               	addwf	___lldiv@counter,f
  9581  0EFA  2EED               	goto	l2061
  9582  0EFB                     l2063:	
  9583  0EFB  3001               	movlw	1
  9584  0EFC                     u1435:	
  9585  0EFC  35B0               	lslf	___lldiv@quotient,f
  9586  0EFD  0DB1               	rlf	___lldiv@quotient+1,f
  9587  0EFE  0DB2               	rlf	___lldiv@quotient+2,f
  9588  0EFF  0DB3               	rlf	___lldiv@quotient+3,f
  9589  0F00  0B89               	decfsz	9,f
  9590  0F01  2EFC               	goto	u1435
  9591  0F02  082B               	movf	___lldiv@divisor+3,w
  9592  0F03  022F               	subwf	___lldiv@dividend+3,w
  9593  0F04  1D03               	skipz
  9594  0F05  2F10               	goto	u1445
  9595  0F06  082A               	movf	___lldiv@divisor+2,w
  9596  0F07  022E               	subwf	___lldiv@dividend+2,w
  9597  0F08  1D03               	skipz
  9598  0F09  2F10               	goto	u1445
  9599  0F0A  0829               	movf	___lldiv@divisor+1,w
  9600  0F0B  022D               	subwf	___lldiv@dividend+1,w
  9601  0F0C  1D03               	skipz
  9602  0F0D  2F10               	goto	u1445
  9603  0F0E  0828               	movf	___lldiv@divisor,w
  9604  0F0F  022C               	subwf	___lldiv@dividend,w
  9605  0F10                     u1445:	
  9606  0F10  1C03               	skipc
  9607  0F11  2F1B               	goto	l2071
  9608  0F12  0828               	movf	___lldiv@divisor,w
  9609  0F13  02AC               	subwf	___lldiv@dividend,f
  9610  0F14  0829               	movf	___lldiv@divisor+1,w
  9611  0F15  3BAD               	subwfb	___lldiv@dividend+1,f
  9612  0F16  082A               	movf	___lldiv@divisor+2,w
  9613  0F17  3BAE               	subwfb	___lldiv@dividend+2,f
  9614  0F18  082B               	movf	___lldiv@divisor+3,w
  9615  0F19  3BAF               	subwfb	___lldiv@dividend+3,f
  9616  0F1A  1430               	bsf	___lldiv@quotient,0
  9617  0F1B                     l2071:	
  9618  0F1B  3001               	movlw	1
  9619  0F1C                     u1455:	
  9620  0F1C  36AB               	lsrf	___lldiv@divisor+3,f
  9621  0F1D  0CAA               	rrf	___lldiv@divisor+2,f
  9622  0F1E  0CA9               	rrf	___lldiv@divisor+1,f
  9623  0F1F  0CA8               	rrf	___lldiv@divisor,f
  9624  0F20  0B89               	decfsz	9,f
  9625  0F21  2F1C               	goto	u1455
  9626  0F22  3001               	movlw	1
  9627  0F23  02B4               	subwf	___lldiv@counter,f
  9628  0F24  1D03               	btfss	3,2
  9629  0F25  2EFB               	goto	l2063
  9630  0F26                     l2075:	
  9631  0F26  0833               	movf	___lldiv@quotient+3,w
  9632  0F27  00AB               	movwf	?___lldiv+3
  9633  0F28  0832               	movf	___lldiv@quotient+2,w
  9634  0F29  00AA               	movwf	?___lldiv+2
  9635  0F2A  0831               	movf	___lldiv@quotient+1,w
  9636  0F2B  00A9               	movwf	?___lldiv+1
  9637  0F2C  0830               	movf	___lldiv@quotient,w
  9638  0F2D  00A8               	movwf	?___lldiv
  9639  0F2E  0008               	return
  9640  0F2F                     __end_of___lldiv:	
  9641                           
  9642                           	psect	text26
  9643  0F2F                     __ptext26:	
  9644 ;; *************** function _HEFLASH_writeBlock *****************
  9645 ;; Defined at:
  9646 ;;		line 17 in file "HEFlash.c"
  9647 ;; Parameters:    Size  Location     Type
  9648 ;;  radd            1    wreg     unsigned char 
  9649 ;;  data            1    5[BANK0 ] PTR unsigned char 
  9650 ;;		 -> HEFBufferData(32), 
  9651 ;;  count           1    6[BANK0 ] unsigned char 
  9652 ;; Auto vars:     Size  Location     Type
  9653 ;;  radd            1    9[BANK0 ] unsigned char 
  9654 ;;  add             2   10[BANK0 ] unsigned int 
  9655 ;; Return value:  Size  Location     Type
  9656 ;;                  1    wreg      unsigned char 
  9657 ;; Registers used:
  9658 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9659 ;; Tracked objects:
  9660 ;;		On entry : 0/0
  9661 ;;		On exit  : 0/0
  9662 ;;		Unchanged: 0/0
  9663 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9664 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9665 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9666 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9667 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9668 ;;Total ram usage:        7 bytes
  9669 ;; Hardware stack levels used:    1
  9670 ;; Hardware stack levels required when called:    6
  9671 ;; This function calls:
  9672 ;;		_FLASH_erase
  9673 ;;		_FLASH_write
  9674 ;; This function is called by:
  9675 ;;		_Data_Toseg
  9676 ;;		_HEFLASH_checkData
  9677 ;;		_main
  9678 ;; This function uses a non-reentrant model
  9679 ;;
  9680                           
  9681                           
  9682                           ;psect for function _HEFLASH_writeBlock
  9683  0F2F                     _HEFLASH_writeBlock:	
  9684                           
  9685                           ;incstack = 0
  9686                           ; Regs used in _HEFLASH_writeBlock: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9687                           ;HEFLASH_writeBlock@radd stored from wreg
  9688  0F2F  0020               	movlb	0	; select bank0
  9689  0F30  00A9               	movwf	HEFLASH_writeBlock@radd
  9690                           
  9691                           ;HEFlash.c: 20: unsigned add = radd * 32 + 0x1F80;
  9692  0F31  0829               	movf	HEFLASH_writeBlock@radd,w
  9693  0F32  00A7               	movwf	??_HEFLASH_writeBlock
  9694  0F33  01A8               	clrf	??_HEFLASH_writeBlock+1
  9695  0F34  3005               	movlw	5
  9696  0F35                     u1315:	
  9697  0F35  35A7               	lslf	??_HEFLASH_writeBlock,f
  9698  0F36  0DA8               	rlf	??_HEFLASH_writeBlock+1,f
  9699  0F37  0B89               	decfsz	9,f
  9700  0F38  2F35               	goto	u1315
  9701  0F39  0827               	movf	??_HEFLASH_writeBlock,w
  9702  0F3A  3E80               	addlw	128
  9703  0F3B  00AA               	movwf	HEFLASH_writeBlock@add
  9704  0F3C  301F               	movlw	31
  9705  0F3D  3D28               	addwfc	??_HEFLASH_writeBlock+1,w
  9706  0F3E  00AB               	movwf	HEFLASH_writeBlock@add+1
  9707                           
  9708                           ;HEFlash.c: 23: if ( ( count > 32) || (radd >= (0x1FFF-0x1F80+1)/32))
  9709  0F3F  3021               	movlw	33
  9710  0F40  0226               	subwf	HEFLASH_writeBlock@count,w
  9711  0F41  1803               	skipnc
  9712  0F42  0008               	return
  9713  0F43  3004               	movlw	4
  9714  0F44  0229               	subwf	HEFLASH_writeBlock@radd,w
  9715  0F45  1803               	btfsc	3,0
  9716  0F46  0008               	return
  9717                           
  9718                           ;HEFlash.c: 27: FLASH_erase( add);
  9719                           
  9720                           ;HEFlash.c: 24: return -1;
  9721                           ;	Return value of _HEFLASH_writeBlock is never used
  9722  0F47  082B               	movf	HEFLASH_writeBlock@add+1,w
  9723  0F48  00F4               	movwf	FLASH_erase@address+1
  9724  0F49  082A               	movf	HEFLASH_writeBlock@add,w
  9725  0F4A  00F3               	movwf	FLASH_erase@address
  9726  0F4B  318C  2487  318F   	fcall	_FLASH_erase
  9727  0F4E                     l2015:	
  9728                           ;HEFlash.c: 30: while( count > 1)
  9729                           
  9730  0F4E  3002               	movlw	2
  9731  0F4F  0020               	movlb	0	; select bank0
  9732  0F50  0226               	subwf	HEFLASH_writeBlock@count,w
  9733  0F51  1C03               	btfss	3,0
  9734  0F52  2F73               	goto	l2017
  9735                           
  9736                           ;HEFlash.c: 31: {
  9737                           ;HEFlash.c: 33: FLASH_write( add++, (unsigned) *data++, 1);
  9738  0F53  0020               	movlb	0	; select bank0
  9739  0F54  082B               	movf	HEFLASH_writeBlock@add+1,w
  9740  0F55  00A1               	movwf	FLASH_write@address+1
  9741  0F56  082A               	movf	HEFLASH_writeBlock@add,w
  9742  0F57  00A0               	movwf	FLASH_write@address
  9743  0F58  0825               	movf	HEFLASH_writeBlock@data,w
  9744  0F59  0086               	movwf	6
  9745  0F5A  0187               	clrf	7
  9746  0F5B  0801               	movf	1,w
  9747  0F5C  00A7               	movwf	??_HEFLASH_writeBlock
  9748  0F5D  01A8               	clrf	??_HEFLASH_writeBlock+1
  9749  0F5E  0827               	movf	??_HEFLASH_writeBlock,w
  9750  0F5F  00A2               	movwf	FLASH_write@data
  9751  0F60  0828               	movf	??_HEFLASH_writeBlock+1,w
  9752  0F61  00A3               	movwf	FLASH_write@data+1
  9753  0F62  01A4               	clrf	FLASH_write@latch
  9754  0F63  0AA4               	incf	FLASH_write@latch,f
  9755  0F64  318D  25D8  318F   	fcall	_FLASH_write
  9756  0F67  3001               	movlw	1
  9757  0F68  0020               	movlb	0	; select bank0
  9758  0F69  00A7               	movwf	??_HEFLASH_writeBlock
  9759  0F6A  0827               	movf	??_HEFLASH_writeBlock,w
  9760  0F6B  07A5               	addwf	HEFLASH_writeBlock@data,f
  9761  0F6C  3001               	movlw	1
  9762  0F6D  07AA               	addwf	HEFLASH_writeBlock@add,f
  9763  0F6E  3000               	movlw	0
  9764  0F6F  3DAB               	addwfc	HEFLASH_writeBlock@add+1,f
  9765                           
  9766                           ;HEFlash.c: 34: count--;
  9767  0F70  3001               	movlw	1
  9768  0F71  02A6               	subwf	HEFLASH_writeBlock@count,f
  9769  0F72  2F4E               	goto	l2015
  9770  0F73                     l2017:	
  9771                           
  9772                           ;HEFlash.c: 35: }
  9773                           ;HEFlash.c: 39: FLASH_write( add, (unsigned) *data, 0);
  9774  0F73  082B               	movf	HEFLASH_writeBlock@add+1,w
  9775  0F74  00A1               	movwf	FLASH_write@address+1
  9776  0F75  082A               	movf	HEFLASH_writeBlock@add,w
  9777  0F76  00A0               	movwf	FLASH_write@address
  9778  0F77  0825               	movf	HEFLASH_writeBlock@data,w
  9779  0F78  0086               	movwf	6
  9780  0F79  0187               	clrf	7
  9781  0F7A  0801               	movf	1,w
  9782  0F7B  00A7               	movwf	??_HEFLASH_writeBlock
  9783  0F7C  01A8               	clrf	??_HEFLASH_writeBlock+1
  9784  0F7D  0827               	movf	??_HEFLASH_writeBlock,w
  9785  0F7E  00A2               	movwf	FLASH_write@data
  9786  0F7F  0828               	movf	??_HEFLASH_writeBlock+1,w
  9787  0F80  00A3               	movwf	FLASH_write@data+1
  9788  0F81  01A4               	clrf	FLASH_write@latch
  9789  0F82  318D  25D8         	fcall	_FLASH_write
  9790                           
  9791                           ;HEFlash.c: 44: return PMCON1bits.WRERR;
  9792                           ;	Return value of _HEFLASH_writeBlock is never used
  9793  0F84  0023               	movlb	3	; select bank3
  9794  0F85  0815               	movf	21,w	;volatile
  9795  0F86  0008               	return
  9796  0F87                     __end_of_HEFLASH_writeBlock:	
  9797                           
  9798                           	psect	text27
  9799  0DD8                     __ptext27:	
  9800 ;; *************** function _FLASH_write *****************
  9801 ;; Defined at:
  9802 ;;		line 73 in file "Flash.c"
  9803 ;; Parameters:    Size  Location     Type
  9804 ;;  address         2    0[BANK0 ] unsigned int 
  9805 ;;  data            2    2[BANK0 ] unsigned int 
  9806 ;;  latch           1    4[BANK0 ] unsigned char 
  9807 ;; Auto vars:     Size  Location     Type
  9808 ;;  temp            1    3[COMMON] unsigned char 
  9809 ;; Return value:  Size  Location     Type
  9810 ;;                  1    wreg      void 
  9811 ;; Registers used:
  9812 ;;		wreg, status,2, status,0, pclath, cstack
  9813 ;; Tracked objects:
  9814 ;;		On entry : 0/0
  9815 ;;		On exit  : 0/0
  9816 ;;		Unchanged: 0/0
  9817 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9818 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9819 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9820 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9821 ;;      Totals:         1       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9822 ;;Total ram usage:        6 bytes
  9823 ;; Hardware stack levels used:    1
  9824 ;; Hardware stack levels required when called:    5
  9825 ;; This function calls:
  9826 ;;		__unlock
  9827 ;; This function is called by:
  9828 ;;		_HEFLASH_writeBlock
  9829 ;; This function uses a non-reentrant model
  9830 ;;
  9831                           
  9832                           
  9833                           ;psect for function _FLASH_write
  9834  0DD8                     _FLASH_write:	
  9835                           
  9836                           ;Flash.c: 76: char temp = INTCONbits.GIE;
  9837                           
  9838                           ;incstack = 0
  9839                           ; Regs used in _FLASH_write: [wreg+status,2+status,0+pclath+cstack]
  9840  0DD8  3000               	movlw	0
  9841  0DD9  1B8B               	btfsc	11,7	;volatile
  9842  0DDA  3001               	movlw	1
  9843  0DDB  00F3               	movwf	FLASH_write@temp
  9844                           
  9845                           ;Flash.c: 77: INTCONbits.GIE = 0;
  9846  0DDC  138B               	bcf	11,7	;volatile
  9847                           
  9848                           ;Flash.c: 80: PMADR = address;
  9849  0DDD  0020               	movlb	0	; select bank0
  9850  0DDE  0821               	movf	FLASH_write@address+1,w
  9851  0DDF  0023               	movlb	3	; select bank3
  9852  0DE0  0092               	movwf	18	;volatile
  9853  0DE1  0020               	movlb	0	; select bank0
  9854  0DE2  0820               	movf	FLASH_write@address,w
  9855  0DE3  0023               	movlb	3	; select bank3
  9856  0DE4  0091               	movwf	17	;volatile
  9857                           
  9858                           ;Flash.c: 81: PMDAT = data;
  9859  0DE5  0020               	movlb	0	; select bank0
  9860  0DE6  0823               	movf	FLASH_write@data+1,w
  9861  0DE7  0023               	movlb	3	; select bank3
  9862  0DE8  0094               	movwf	20	;volatile
  9863  0DE9  0020               	movlb	0	; select bank0
  9864  0DEA  0822               	movf	FLASH_write@data,w
  9865  0DEB  0023               	movlb	3	; select bank3
  9866  0DEC  0093               	movwf	19	;volatile
  9867                           
  9868                           ;Flash.c: 82: PMCON1bits.LWLO = latch;
  9869  0DED  0020               	movlb	0	; select bank0
  9870  0DEE  0C24               	rrf	FLASH_write@latch,w
  9871  0DEF  0023               	movlb	3	; select bank3
  9872  0DF0  1C03               	skipc
  9873  0DF1  1295               	bcf	21,5	;volatile
  9874  0DF2  1803               	skipnc
  9875  0DF3  1695               	bsf	21,5	;volatile
  9876                           
  9877                           ;Flash.c: 83: PMCON1bits.CFGS = 0;
  9878  0DF4  1315               	bcf	21,6	;volatile
  9879                           
  9880                           ;Flash.c: 84: PMCON1bits.FREE = 0;
  9881  0DF5  1215               	bcf	21,4	;volatile
  9882                           
  9883                           ;Flash.c: 85: PMCON1bits.WREN = 1;
  9884  0DF6  1515               	bsf	21,2	;volatile
  9885                           
  9886                           ;Flash.c: 88: _unlock();
  9887  0DF7  318B  23EE  318D   	fcall	__unlock
  9888                           
  9889                           ;Flash.c: 91: if ( temp)
  9890  0DFA  0873               	movf	FLASH_write@temp,w
  9891  0DFB  1903               	btfsc	3,2
  9892  0DFC  0008               	return
  9893                           
  9894                           ;Flash.c: 92: INTCONbits.GIE = 1;
  9895  0DFD  178B               	bsf	11,7	;volatile
  9896  0DFE  0008               	return
  9897  0DFF                     __end_of_FLASH_write:	
  9898                           
  9899                           	psect	text28
  9900  0C87                     __ptext28:	
  9901 ;; *************** function _FLASH_erase *****************
  9902 ;; Defined at:
  9903 ;;		line 97 in file "Flash.c"
  9904 ;; Parameters:    Size  Location     Type
  9905 ;;  address         2    3[COMMON] unsigned int 
  9906 ;; Auto vars:     Size  Location     Type
  9907 ;;  temp            1    5[COMMON] unsigned char 
  9908 ;; Return value:  Size  Location     Type
  9909 ;;                  1    wreg      void 
  9910 ;; Registers used:
  9911 ;;		wreg, status,2, status,0, pclath, cstack
  9912 ;; Tracked objects:
  9913 ;;		On entry : 0/0
  9914 ;;		On exit  : 0/0
  9915 ;;		Unchanged: 0/0
  9916 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9917 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9918 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9919 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9920 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9921 ;;Total ram usage:        3 bytes
  9922 ;; Hardware stack levels used:    1
  9923 ;; Hardware stack levels required when called:    5
  9924 ;; This function calls:
  9925 ;;		__unlock
  9926 ;; This function is called by:
  9927 ;;		_HEFLASH_writeBlock
  9928 ;; This function uses a non-reentrant model
  9929 ;;
  9930                           
  9931                           
  9932                           ;psect for function _FLASH_erase
  9933  0C87                     _FLASH_erase:	
  9934                           
  9935                           ;Flash.c: 100: char temp = INTCONbits.GIE;
  9936                           
  9937                           ;incstack = 0
  9938                           ; Regs used in _FLASH_erase: [wreg+status,2+status,0+pclath+cstack]
  9939  0C87  3000               	movlw	0
  9940  0C88  1B8B               	btfsc	11,7	;volatile
  9941  0C89  3001               	movlw	1
  9942  0C8A  00F5               	movwf	FLASH_erase@temp
  9943                           
  9944                           ;Flash.c: 101: INTCONbits.GIE = 0;
  9945  0C8B  138B               	bcf	11,7	;volatile
  9946                           
  9947                           ;Flash.c: 105: PMADR = address;
  9948  0C8C  0874               	movf	FLASH_erase@address+1,w
  9949  0C8D  0023               	movlb	3	; select bank3
  9950  0C8E  0092               	movwf	18	;volatile
  9951  0C8F  0873               	movf	FLASH_erase@address,w
  9952  0C90  0091               	movwf	17	;volatile
  9953                           
  9954                           ;Flash.c: 106: PMCON1bits.CFGS = 0;
  9955  0C91  1315               	bcf	21,6	;volatile
  9956                           
  9957                           ;Flash.c: 107: PMCON1bits.FREE = 1;
  9958  0C92  1615               	bsf	21,4	;volatile
  9959                           
  9960                           ;Flash.c: 108: PMCON1bits.WREN = 1;
  9961  0C93  1515               	bsf	21,2	;volatile
  9962                           
  9963                           ;Flash.c: 111: _unlock();
  9964  0C94  318B  23EE  318C   	fcall	__unlock
  9965                           
  9966                           ;Flash.c: 114: PMCON1bits.WREN = 0;
  9967  0C97  0023               	movlb	3	; select bank3
  9968  0C98  1115               	bcf	21,2	;volatile
  9969                           
  9970                           ;Flash.c: 115: if ( temp)
  9971  0C99  0875               	movf	FLASH_erase@temp,w
  9972  0C9A  1903               	btfsc	3,2
  9973  0C9B  0008               	return
  9974                           
  9975                           ;Flash.c: 116: INTCONbits.GIE = 1;
  9976  0C9C  178B               	bsf	11,7	;volatile
  9977  0C9D  0008               	return
  9978  0C9E                     __end_of_FLASH_erase:	
  9979                           
  9980                           	psect	text29
  9981  0BEE                     __ptext29:	
  9982 ;; *************** function __unlock *****************
  9983 ;; Defined at:
  9984 ;;		line 58 in file "Flash.c"
  9985 ;; Parameters:    Size  Location     Type
  9986 ;;		None
  9987 ;; Auto vars:     Size  Location     Type
  9988 ;;		None
  9989 ;; Return value:  Size  Location     Type
  9990 ;;                  1    wreg      void 
  9991 ;; Registers used:
  9992 ;;		None
  9993 ;; Tracked objects:
  9994 ;;		On entry : 0/0
  9995 ;;		On exit  : 0/0
  9996 ;;		Unchanged: 0/0
  9997 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9998 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9999 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10000 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10001 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10002 ;;Total ram usage:        0 bytes
 10003 ;; Hardware stack levels used:    1
 10004 ;; Hardware stack levels required when called:    4
 10005 ;; This function calls:
 10006 ;;		Nothing
 10007 ;; This function is called by:
 10008 ;;		_FLASH_write
 10009 ;;		_FLASH_erase
 10010 ;; This function uses a non-reentrant model
 10011 ;;
 10012                           
 10013                           
 10014                           ;psect for function __unlock
 10015  0BEE                     __unlock:	
 10016                           
 10017                           ;incstack = 0
 10018                           ; Regs used in __unlock: []
 10019  0BEE  0023               	banksel	406	;# 
 10020  0BEF  3055               	movlw	85	;# 
 10021  0BF0  0096               	movwf	22	;# 
 10022  0BF1  30AA               	movlw	170	;# 
 10023  0BF2  0096               	movwf	22	;# 
 10024  0BF3  1495               	bsf	21,1	; set WR bit ;# 
 10025  0BF4  0000               	nop	;# 
 10026  0BF5  0000               	nop	;# 
 10027  0BF6  0008               	return
 10028  0BF7                     __end_of__unlock:	
 10029                           
 10030                           	psect	intentry
 10031  0004                     __pintentry:	
 10032 ;; *************** function _INTERRUPT_InterruptManager *****************
 10033 ;; Defined at:
 10034 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
 10035 ;; Parameters:    Size  Location     Type
 10036 ;;		None
 10037 ;; Auto vars:     Size  Location     Type
 10038 ;;		None
 10039 ;; Return value:  Size  Location     Type
 10040 ;;                  1    wreg      void 
 10041 ;; Registers used:
 10042 ;;		wreg, status,2, status,0, pclath, cstack
 10043 ;; Tracked objects:
 10044 ;;		On entry : 0/0
 10045 ;;		On exit  : 0/0
 10046 ;;		Unchanged: 0/0
 10047 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10048 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10049 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10050 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10051 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10052 ;;Total ram usage:        1 bytes
 10053 ;; Hardware stack levels used:    1
 10054 ;; Hardware stack levels required when called:    3
 10055 ;; This function calls:
 10056 ;;		_INT_ISR
 10057 ;;		_PIN_MANAGER_IOC
 10058 ;;		_TMR0_ISR
 10059 ;;		_TMR1_ISR
 10060 ;;		_TMR3_ISR
 10061 ;; This function is called by:
 10062 ;;		Interrupt level 1
 10063 ;; This function uses a non-reentrant model
 10064 ;;
 10065                           
 10066  0004                     _INTERRUPT_InterruptManager:	
 10067                           
 10068                           ;incstack = 0
 10069  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 10070                           
 10071                           ; Regs used in _INTERRUPT_InterruptManager: [wreg+status,2+status,0+pclath+cstack]
 10072  0005  3180               	pagesel	$
 10073  0006  0020               	movlb	0	; select bank0
 10074  0007  087F               	movf	127,w
 10075  0008  00F2               	movwf	??_INTERRUPT_InterruptManager
 10076                           
 10077                           ;interrupt_manager.c: 55: if(INTCONbits.TMR0IE == 1 && INTCONbits.TMR0IF == 1)
 10078  0009  1A8B               	btfsc	11,5	;volatile
 10079  000A  1D0B               	btfss	11,2	;volatile
 10080  000B  2810               	goto	i1l162
 10081                           
 10082                           ;interrupt_manager.c: 56: {
 10083                           ;interrupt_manager.c: 57: TMR0_ISR();
 10084  000C  318B  23D9  3180   	fcall	_TMR0_ISR
 10085                           
 10086                           ;interrupt_manager.c: 58: }
 10087  000F  2832               	goto	i1l174
 10088  0010                     i1l162:	
 10089                           
 10090                           ;interrupt_manager.c: 59: else if(INTCONbits.INTE == 1 && INTCONbits.INTF == 1)
 10091  0010  1A0B               	btfsc	11,4	;volatile
 10092  0011  1C8B               	btfss	11,1	;volatile
 10093  0012  2817               	goto	i1l164
 10094                           
 10095                           ;interrupt_manager.c: 60: {
 10096                           ;interrupt_manager.c: 61: INT_ISR();
 10097  0013  3187  27FC  3180   	fcall	_INT_ISR
 10098                           
 10099                           ;interrupt_manager.c: 62: }
 10100  0016  2832               	goto	i1l174
 10101  0017                     i1l164:	
 10102                           
 10103                           ;interrupt_manager.c: 63: else if(INTCONbits.IOCIE == 1 && INTCONbits.IOCIF == 1)
 10104  0017  198B               	btfsc	11,3	;volatile
 10105  0018  1C0B               	btfss	11,0	;volatile
 10106  0019  281E               	goto	i1l166
 10107                           
 10108                           ;interrupt_manager.c: 64: {
 10109                           ;interrupt_manager.c: 65: PIN_MANAGER_IOC();
 10110  001A  318B  23B2  3180   	fcall	_PIN_MANAGER_IOC
 10111                           
 10112                           ;interrupt_manager.c: 66: }
 10113  001D  2832               	goto	i1l174
 10114  001E                     i1l166:	
 10115                           
 10116                           ;interrupt_manager.c: 67: else if(INTCONbits.PEIE == 1)
 10117  001E  1F0B               	btfss	11,6	;volatile
 10118  001F  2832               	goto	i1l174
 10119                           
 10120                           ;interrupt_manager.c: 68: {
 10121                           ;interrupt_manager.c: 69: if(PIE5bits.TMR3IE == 1 && PIR5bits.TMR3IF == 1)
 10122  0020  0021               	movlb	1	; select bank1
 10123  0021  1F14               	btfss	20,6	;volatile
 10124  0022  282A               	goto	i1l169
 10125  0023  0020               	movlb	0	; select bank0
 10126  0024  1F14               	btfss	20,6	;volatile
 10127  0025  282A               	goto	i1l169
 10128                           
 10129                           ;interrupt_manager.c: 70: {
 10130                           ;interrupt_manager.c: 71: TMR3_ISR();
 10131  0026  318C  2419  3180   	fcall	_TMR3_ISR
 10132                           
 10133                           ;interrupt_manager.c: 72: }
 10134  0029  2832               	goto	i1l174
 10135  002A                     i1l169:	
 10136                           
 10137                           ;interrupt_manager.c: 73: else if(PIE1bits.TMR1IE == 1 && PIR1bits.TMR1IF == 1)
 10138  002A  0021               	movlb	1	; select bank1
 10139  002B  1C10               	btfss	16,0	;volatile
 10140  002C  2832               	goto	i1l174
 10141  002D  0020               	movlb	0	; select bank0
 10142  002E  1C10               	btfss	16,0	;volatile
 10143  002F  2832               	goto	i1l174
 10144                           
 10145                           ;interrupt_manager.c: 74: {
 10146                           ;interrupt_manager.c: 75: TMR1_ISR();
 10147  0030  318C  240D         	fcall	_TMR1_ISR
 10148  0032                     i1l174:	
 10149                           ;interrupt_manager.c: 82: else
 10150                           ;interrupt_manager.c: 83: {
 10151                           
 10152                           ;interrupt_manager.c: 80: }
 10153                           ;interrupt_manager.c: 81: }
 10154                           
 10155                           ;interrupt_manager.c: 77: else
 10156                           ;interrupt_manager.c: 78: {
 10157                           
 10158                           ;interrupt_manager.c: 76: }
 10159                           
 10160  0032  0872               	movf	??_INTERRUPT_InterruptManager,w
 10161  0033  0020               	movlb	0	; select bank0
 10162  0034  00FF               	movwf	127
 10163  0035  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 10164  0036  0009               	retfie
 10165  0037                     __end_of_INTERRUPT_InterruptManager:	
 10166                           
 10167                           	psect	text31
 10168  0C19                     __ptext31:	
 10169 ;; *************** function _TMR3_ISR *****************
 10170 ;; Defined at:
 10171 ;;		line 160 in file "mcc_generated_files/tmr3.c"
 10172 ;; Parameters:    Size  Location     Type
 10173 ;;		None
 10174 ;; Auto vars:     Size  Location     Type
 10175 ;;		None
 10176 ;; Return value:  Size  Location     Type
 10177 ;;                  1    wreg      void 
 10178 ;; Registers used:
 10179 ;;		wreg, status,2, status,0, pclath, cstack
 10180 ;; Tracked objects:
 10181 ;;		On entry : 0/0
 10182 ;;		On exit  : 0/0
 10183 ;;		Unchanged: 0/0
 10184 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10185 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10186 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10187 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10188 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10189 ;;Total ram usage:        0 bytes
 10190 ;; Hardware stack levels used:    1
 10191 ;; Hardware stack levels required when called:    2
 10192 ;; This function calls:
 10193 ;;		_TMR3_CallBack
 10194 ;;		_TMR3_WriteTimer
 10195 ;; This function is called by:
 10196 ;;		_INTERRUPT_InterruptManager
 10197 ;; This function uses a non-reentrant model
 10198 ;;
 10199                           
 10200                           
 10201                           ;psect for function _TMR3_ISR
 10202  0C19                     _TMR3_ISR:	
 10203                           
 10204                           ;tmr3.c: 164: PIR5bits.TMR3IF = 0;
 10205                           
 10206                           ;incstack = 0
 10207                           ; Regs used in _TMR3_ISR: [wreg+status,2+status,0+pclath+cstack]
 10208  0C19  0020               	movlb	0	; select bank0
 10209  0C1A  1314               	bcf	20,6	;volatile
 10210                           
 10211                           ;tmr3.c: 165: TMR3_WriteTimer(timer3ReloadVal);
 10212  0C1B  0861               	movf	_timer3ReloadVal+1,w	;volatile
 10213  0C1C  00F1               	movwf	TMR3_WriteTimer@timerVal+1
 10214  0C1D  0860               	movf	_timer3ReloadVal,w	;volatile
 10215  0C1E  00F0               	movwf	TMR3_WriteTimer@timerVal
 10216  0C1F  318C  2442  318C   	fcall	_TMR3_WriteTimer
 10217                           
 10218                           ;tmr3.c: 169: TMR3_CallBack();
 10219  0C22  318C  2425         	fcall	_TMR3_CallBack
 10220  0C24  0008               	return
 10221  0C25                     __end_of_TMR3_ISR:	
 10222                           
 10223                           	psect	text32
 10224  0C42                     __ptext32:	
 10225 ;; *************** function _TMR3_WriteTimer *****************
 10226 ;; Defined at:
 10227 ;;		line 123 in file "mcc_generated_files/tmr3.c"
 10228 ;; Parameters:    Size  Location     Type
 10229 ;;  timerVal        2    0[COMMON] unsigned int 
 10230 ;; Auto vars:     Size  Location     Type
 10231 ;;		None
 10232 ;; Return value:  Size  Location     Type
 10233 ;;                  1    wreg      void 
 10234 ;; Registers used:
 10235 ;;		wreg, status,2
 10236 ;; Tracked objects:
 10237 ;;		On entry : 0/0
 10238 ;;		On exit  : 0/0
 10239 ;;		Unchanged: 0/0
 10240 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10241 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10242 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10243 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10244 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10245 ;;Total ram usage:        2 bytes
 10246 ;; Hardware stack levels used:    1
 10247 ;; This function calls:
 10248 ;;		Nothing
 10249 ;; This function is called by:
 10250 ;;		_TMR3_ISR
 10251 ;;		_TMR3_Reload
 10252 ;; This function uses a non-reentrant model
 10253 ;;
 10254                           
 10255                           
 10256                           ;psect for function _TMR3_WriteTimer
 10257  0C42                     _TMR3_WriteTimer:	
 10258                           
 10259                           ;tmr3.c: 125: if (T3CONbits.T3SYNC == 1)
 10260                           
 10261                           ;incstack = 0
 10262                           ; Regs used in _TMR3_WriteTimer: [wreg+status,2]
 10263  0C42  0029               	movlb	9	; select bank9
 10264  0C43  1D15               	btfss	21,2	;volatile
 10265  0C44  2C4C               	goto	i1l1953
 10266                           
 10267                           ;tmr3.c: 126: {
 10268                           ;tmr3.c: 128: T3CONbits.TMR3ON = 0;
 10269  0C45  1015               	bcf	21,0	;volatile
 10270                           
 10271                           ;tmr3.c: 131: TMR3H = (timerVal >> 8);
 10272  0C46  0871               	movf	TMR3_WriteTimer@timerVal+1,w
 10273  0C47  0094               	movwf	20	;volatile
 10274                           
 10275                           ;tmr3.c: 132: TMR3L = timerVal;
 10276  0C48  0870               	movf	TMR3_WriteTimer@timerVal,w
 10277  0C49  0093               	movwf	19	;volatile
 10278                           
 10279                           ;tmr3.c: 135: T3CONbits.TMR3ON =1;
 10280  0C4A  1415               	bsf	21,0	;volatile
 10281                           
 10282                           ;tmr3.c: 136: }
 10283  0C4B  0008               	return
 10284  0C4C                     i1l1953:	
 10285                           
 10286                           ;tmr3.c: 137: else
 10287                           ;tmr3.c: 138: {
 10288                           ;tmr3.c: 140: TMR3H = (timerVal >> 8);
 10289  0C4C  0871               	movf	TMR3_WriteTimer@timerVal+1,w
 10290  0C4D  0094               	movwf	20	;volatile
 10291                           
 10292                           ;tmr3.c: 141: TMR3L = timerVal;
 10293  0C4E  0870               	movf	TMR3_WriteTimer@timerVal,w
 10294  0C4F  0093               	movwf	19	;volatile
 10295  0C50  0008               	return
 10296  0C51                     __end_of_TMR3_WriteTimer:	
 10297                           
 10298                           	psect	text33
 10299  0C25                     __ptext33:	
 10300 ;; *************** function _TMR3_CallBack *****************
 10301 ;; Defined at:
 10302 ;;		line 172 in file "mcc_generated_files/tmr3.c"
 10303 ;; Parameters:    Size  Location     Type
 10304 ;;		None
 10305 ;; Auto vars:     Size  Location     Type
 10306 ;;		None
 10307 ;; Return value:  Size  Location     Type
 10308 ;;                  1    wreg      void 
 10309 ;; Registers used:
 10310 ;;		wreg, status,2, status,0, pclath, cstack
 10311 ;; Tracked objects:
 10312 ;;		On entry : 0/0
 10313 ;;		On exit  : 0/0
 10314 ;;		Unchanged: 0/0
 10315 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10316 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10317 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10318 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10319 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10320 ;;Total ram usage:        0 bytes
 10321 ;; Hardware stack levels used:    1
 10322 ;; Hardware stack levels required when called:    1
 10323 ;; This function calls:
 10324 ;;		Absolute function
 10325 ;;		_TMR3_DefaultInterruptHandler
 10326 ;;		_bsp_TimerInterruptISRCallback
 10327 ;; This function is called by:
 10328 ;;		_TMR3_ISR
 10329 ;; This function uses a non-reentrant model
 10330 ;;
 10331                           
 10332                           
 10333                           ;psect for function _TMR3_CallBack
 10334  0C25                     _TMR3_CallBack:	
 10335                           
 10336                           ;tmr3.c: 175: bsp_TimerInterruptISRCallback();
 10337                           
 10338                           ;incstack = 0
 10339                           ; Regs used in _TMR3_CallBack: [wreg+status,2+status,0+pclath+cstack]
 10340  0C25  3186  267B  318C   	fcall	_bsp_TimerInterruptISRCallback
 10341                           
 10342                           ;tmr3.c: 176: if(TMR3_InterruptHandler)
 10343  0C28  0020               	movlb	0	; select bank0
 10344  0C29  085E               	movf	_TMR3_InterruptHandler,w
 10345  0C2A  045F               	iorwf	_TMR3_InterruptHandler+1,w
 10346  0C2B  1903               	btfsc	3,2
 10347  0C2C  0008               	return
 10348                           
 10349                           ;tmr3.c: 177: {
 10350                           ;tmr3.c: 178: TMR3_InterruptHandler();
 10351  0C2D  085F               	movf	_TMR3_InterruptHandler+1,w
 10352  0C2E  008A               	movwf	10
 10353  0C2F  085E               	movf	_TMR3_InterruptHandler,w
 10354  0C30  000A               	callw
 10355  0C31  318C               	pagesel	$
 10356  0C32  0008               	return
 10357  0C33                     __end_of_TMR3_CallBack:	
 10358                           
 10359                           	psect	text34
 10360  067B                     __ptext34:	
 10361 ;; *************** function _bsp_TimerInterruptISRCallback *****************
 10362 ;; Defined at:
 10363 ;;		line 37 in file "bsp_counter.c"
 10364 ;; Parameters:    Size  Location     Type
 10365 ;;		None
 10366 ;; Auto vars:     Size  Location     Type
 10367 ;;		None
 10368 ;; Return value:  Size  Location     Type
 10369 ;;                  1    wreg      void 
 10370 ;; Registers used:
 10371 ;;		wreg, status,2, status,0
 10372 ;; Tracked objects:
 10373 ;;		On entry : 0/0
 10374 ;;		On exit  : 0/0
 10375 ;;		Unchanged: 0/0
 10376 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10377 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10378 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10379 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10380 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10381 ;;Total ram usage:        0 bytes
 10382 ;; Hardware stack levels used:    1
 10383 ;; This function calls:
 10384 ;;		Nothing
 10385 ;; This function is called by:
 10386 ;;		_TMR3_CallBack
 10387 ;; This function uses a non-reentrant model
 10388 ;;
 10389                           
 10390                           
 10391                           ;psect for function _bsp_TimerInterruptISRCallback
 10392  067B                     _bsp_TimerInterruptISRCallback:	
 10393                           
 10394                           ;bsp_counter.c: 39: if(0 == gBoxCntStruct.TimeCntStartFlag && 0 == gBoxCntStruct.TimeCnt
      +                          EndFlag)
 10395                           
 10396                           ;incstack = 0
 10397                           ; Regs used in _bsp_TimerInterruptISRCallback: [wreg+status,2+status,0]
 10398  067B  0020               	movlb	0	; select bank0
 10399  067C  0842               	movf	_gBoxCntStruct,w
 10400  067D  1903               	btfsc	3,2
 10401  067E  0843               	movf	_gBoxCntStruct+1,w
 10402  067F  1903               	btfsc	3,2
 10403  0680  0008               	return
 10404                           
 10405                           ;bsp_counter.c: 42: }
 10406                           ;bsp_counter.c: 44: if(1 == gBoxCntStruct.TimeCntStartFlag)
 10407                           
 10408                           ;bsp_counter.c: 40: {
 10409                           ;bsp_counter.c: 41: return;
 10410  0681  0342               	decf	_gBoxCntStruct,w
 10411  0682  1D03               	btfss	3,2
 10412  0683  2EAD               	goto	i1l1749
 10413                           
 10414                           ;bsp_counter.c: 45: {
 10415                           ;bsp_counter.c: 46: gBoxCntStruct.SingleTimeCnt++;
 10416  0684  3001               	movlw	1
 10417  0685  07C7               	addwf	_gBoxCntStruct+5,f
 10418  0686  3000               	movlw	0
 10419  0687  3DC8               	addwfc	_gBoxCntStruct+6,f
 10420  0688  3000               	movlw	0
 10421  0689  3DC9               	addwfc	_gBoxCntStruct+7,f
 10422  068A  3000               	movlw	0
 10423  068B  3DCA               	addwfc	_gBoxCntStruct+8,f
 10424                           
 10425                           ;bsp_counter.c: 47: if(500 < gBoxCntStruct.SingleTimeCnt)
 10426  068C  084A               	movf	_gBoxCntStruct+8,w
 10427  068D  1D03               	btfss	3,2
 10428  068E  2E98               	goto	i1l1737
 10429  068F  0849               	movf	_gBoxCntStruct+7,w
 10430  0690  1D03               	btfss	3,2
 10431  0691  2E98               	goto	i1l1737
 10432  0692  30F5               	movlw	245
 10433  0693  0247               	subwf	_gBoxCntStruct+5,w
 10434  0694  3001               	movlw	1
 10435  0695  3B48               	subwfb	_gBoxCntStruct+6,w
 10436  0696  1C03               	btfss	3,0
 10437  0697  0008               	return
 10438  0698                     i1l1737:	
 10439                           
 10440                           ;bsp_counter.c: 48: {
 10441                           ;bsp_counter.c: 50: gBoxCntStruct.JamFlag = 1;
 10442  0698  01C5               	clrf	_gBoxCntStruct+3
 10443  0699  0AC5               	incf	_gBoxCntStruct+3,f
 10444                           
 10445                           ;bsp_counter.c: 51: gBoxCntStruct.AlarmFlag = 1;
 10446  069A  01C4               	clrf	_gBoxCntStruct+2
 10447  069B  0AC4               	incf	_gBoxCntStruct+2,f
 10448                           
 10449                           ;bsp_counter.c: 52: gBoxCntStruct.JamCnt ++;
 10450  069C  3001               	movlw	1
 10451  069D  07D1               	addwf	_gBoxCntStruct+15,f
 10452  069E  3000               	movlw	0
 10453  069F  3DD2               	addwfc	_gBoxCntStruct+16,f
 10454                           
 10455                           ;bsp_counter.c: 53: gBoxCntStruct.SingleTimeCnt = 0;
 10456  06A0  3000               	movlw	0
 10457  06A1  00CA               	movwf	_gBoxCntStruct+8
 10458  06A2  3000               	movlw	0
 10459  06A3  00C9               	movwf	_gBoxCntStruct+7
 10460  06A4  3000               	movlw	0
 10461  06A5  00C8               	movwf	_gBoxCntStruct+6
 10462  06A6  3000               	movlw	0
 10463  06A7  00C7               	movwf	_gBoxCntStruct+5
 10464                           
 10465                           ;bsp_counter.c: 54: gBoxCntStruct.TimeCntEndFlag = 0;
 10466  06A8  01C3               	clrf	_gBoxCntStruct+1
 10467                           
 10468                           ;bsp_counter.c: 55: gBoxCntStruct.TimeCntStartFlag = 0;
 10469  06A9  01C2               	clrf	_gBoxCntStruct
 10470                           
 10471                           ;bsp_counter.c: 56: gBoxCntStruct.DisplayReflashFlag = 1;
 10472  06AA  01C6               	clrf	_gBoxCntStruct+4
 10473  06AB  0AC6               	incf	_gBoxCntStruct+4,f
 10474                           
 10475                           ;bsp_counter.c: 57: }
 10476                           ;bsp_counter.c: 58: return;
 10477  06AC  0008               	return
 10478  06AD                     i1l1749:	
 10479                           
 10480                           ;bsp_counter.c: 59: }
 10481                           ;bsp_counter.c: 63: if(1 == gBoxCntStruct.TimeCntEndFlag)
 10482  06AD  0343               	decf	_gBoxCntStruct+1,w
 10483  06AE  1D03               	btfss	3,2
 10484  06AF  0008               	return
 10485                           
 10486                           ;bsp_counter.c: 64: {
 10487                           ;bsp_counter.c: 65: gBoxCntStruct.TimeCntEndFlag = 0;
 10488  06B0  01C3               	clrf	_gBoxCntStruct+1
 10489                           
 10490                           ;bsp_counter.c: 66: gBoxCntStruct.TimeCntStartFlag = 0;
 10491  06B1  01C2               	clrf	_gBoxCntStruct
 10492                           
 10493                           ;bsp_counter.c: 68: if(100 > gBoxCntStruct.SingleTimeCnt)
 10494  06B2  084A               	movf	_gBoxCntStruct+8,w
 10495  06B3  1D03               	btfss	3,2
 10496  06B4  2EC8               	goto	i1l448
 10497  06B5  0849               	movf	_gBoxCntStruct+7,w
 10498  06B6  1D03               	btfss	3,2
 10499  06B7  2EC8               	goto	i1l448
 10500  06B8  0848               	movf	_gBoxCntStruct+6,w
 10501  06B9  1D03               	btfss	3,2
 10502  06BA  2EC8               	goto	i1l448
 10503  06BB  3064               	movlw	100
 10504  06BC  0247               	subwf	_gBoxCntStruct+5,w
 10505  06BD  1803               	btfsc	3,0
 10506  06BE  2EC8               	goto	i1l448
 10507                           
 10508                           ;bsp_counter.c: 69: {
 10509                           ;bsp_counter.c: 70: gBoxCntStruct.SingleTimeCnt = 0;
 10510  06BF  3000               	movlw	0
 10511  06C0  00CA               	movwf	_gBoxCntStruct+8
 10512  06C1  3000               	movlw	0
 10513  06C2  00C9               	movwf	_gBoxCntStruct+7
 10514  06C3  3000               	movlw	0
 10515  06C4  00C8               	movwf	_gBoxCntStruct+6
 10516  06C5  3000               	movlw	0
 10517  06C6  00C7               	movwf	_gBoxCntStruct+5
 10518                           
 10519                           ;bsp_counter.c: 71: return;
 10520  06C7  0008               	return
 10521  06C8                     i1l448:	
 10522                           
 10523                           ;bsp_counter.c: 72: }
 10524                           ;bsp_counter.c: 73: gBoxCntStruct.DisplayReflashFlag = 1;
 10525  06C8  01C6               	clrf	_gBoxCntStruct+4
 10526  06C9  0AC6               	incf	_gBoxCntStruct+4,f
 10527                           
 10528                           ;bsp_counter.c: 83: if(140 < gBoxCntStruct.SingleTimeCnt && 283 > gBoxCntStruct.SingleTi
      +                          meCnt)
 10529  06CA  084A               	movf	_gBoxCntStruct+8,w
 10530  06CB  1D03               	btfss	3,2
 10531  06CC  2ED7               	goto	i1l1761
 10532  06CD  0849               	movf	_gBoxCntStruct+7,w
 10533  06CE  1D03               	btfss	3,2
 10534  06CF  2ED7               	goto	i1l1761
 10535  06D0  0848               	movf	_gBoxCntStruct+6,w
 10536  06D1  1D03               	btfss	3,2
 10537  06D2  2ED7               	goto	i1l1761
 10538  06D3  308D               	movlw	141
 10539  06D4  0247               	subwf	_gBoxCntStruct+5,w
 10540  06D5  1C03               	btfss	3,0
 10541  06D6  2EF8               	goto	i1l1767
 10542  06D7                     i1l1761:	
 10543  06D7  084A               	movf	_gBoxCntStruct+8,w
 10544  06D8  1D03               	btfss	3,2
 10545  06D9  2EF8               	goto	i1l1767
 10546  06DA  0849               	movf	_gBoxCntStruct+7,w
 10547  06DB  1D03               	btfss	3,2
 10548  06DC  2EF8               	goto	i1l1767
 10549  06DD  301B               	movlw	27
 10550  06DE  0247               	subwf	_gBoxCntStruct+5,w
 10551  06DF  3001               	movlw	1
 10552  06E0  3B48               	subwfb	_gBoxCntStruct+6,w
 10553  06E1  1803               	btfsc	3,0
 10554  06E2  2EF8               	goto	i1l1767
 10555                           
 10556                           ;bsp_counter.c: 84: {
 10557                           ;bsp_counter.c: 85: gBoxCntStruct.MiddleBoxCnt++;
 10558  06E3  3001               	movlw	1
 10559  06E4  07CD               	addwf	_gBoxCntStruct+11,f
 10560  06E5  3000               	movlw	0
 10561  06E6  3DCE               	addwfc	_gBoxCntStruct+12,f
 10562                           
 10563                           ;bsp_counter.c: 86: gBoxCntStruct.BoxSum++;
 10564  06E7  3001               	movlw	1
 10565  06E8  07D3               	addwf	_gBoxCntStruct+17,f
 10566  06E9  3000               	movlw	0
 10567  06EA  3DD4               	addwfc	_gBoxCntStruct+18,f
 10568  06EB  3000               	movlw	0
 10569  06EC  3DD5               	addwfc	_gBoxCntStruct+19,f
 10570  06ED  3000               	movlw	0
 10571  06EE  3DD6               	addwfc	_gBoxCntStruct+20,f
 10572                           
 10573                           ;bsp_counter.c: 87: gBoxCntStruct.SingleTimeCnt = 0;
 10574  06EF  3000               	movlw	0
 10575  06F0  00CA               	movwf	_gBoxCntStruct+8
 10576  06F1  3000               	movlw	0
 10577  06F2  00C9               	movwf	_gBoxCntStruct+7
 10578  06F3  3000               	movlw	0
 10579  06F4  00C8               	movwf	_gBoxCntStruct+6
 10580  06F5  3000               	movlw	0
 10581  06F6  00C7               	movwf	_gBoxCntStruct+5
 10582                           
 10583                           ;bsp_counter.c: 88: return;
 10584  06F7  0008               	return
 10585  06F8                     i1l1767:	
 10586                           
 10587                           ;bsp_counter.c: 89: }
 10588                           ;bsp_counter.c: 91: if(283 < gBoxCntStruct.SingleTimeCnt && 424 > gBoxCntStruct.SingleTi
      +                          meCnt)
 10589  06F8  084A               	movf	_gBoxCntStruct+8,w
 10590  06F9  1D03               	btfss	3,2
 10591  06FA  2F04               	goto	i1l1769
 10592  06FB  0849               	movf	_gBoxCntStruct+7,w
 10593  06FC  1D03               	btfss	3,2
 10594  06FD  2F04               	goto	i1l1769
 10595  06FE  301C               	movlw	28
 10596  06FF  0247               	subwf	_gBoxCntStruct+5,w
 10597  0700  3001               	movlw	1
 10598  0701  3B48               	subwfb	_gBoxCntStruct+6,w
 10599  0702  1C03               	btfss	3,0
 10600  0703  2F25               	goto	i1l1775
 10601  0704                     i1l1769:	
 10602  0704  084A               	movf	_gBoxCntStruct+8,w
 10603  0705  1D03               	btfss	3,2
 10604  0706  2F25               	goto	i1l1775
 10605  0707  0849               	movf	_gBoxCntStruct+7,w
 10606  0708  1D03               	btfss	3,2
 10607  0709  2F25               	goto	i1l1775
 10608  070A  30A8               	movlw	168
 10609  070B  0247               	subwf	_gBoxCntStruct+5,w
 10610  070C  3001               	movlw	1
 10611  070D  3B48               	subwfb	_gBoxCntStruct+6,w
 10612  070E  1803               	btfsc	3,0
 10613  070F  2F25               	goto	i1l1775
 10614                           
 10615                           ;bsp_counter.c: 92: {
 10616                           ;bsp_counter.c: 93: gBoxCntStruct.LargeBoxCnt++;
 10617  0710  3001               	movlw	1
 10618  0711  07CF               	addwf	_gBoxCntStruct+13,f
 10619  0712  3000               	movlw	0
 10620  0713  3DD0               	addwfc	_gBoxCntStruct+14,f
 10621                           
 10622                           ;bsp_counter.c: 94: gBoxCntStruct.BoxSum++;
 10623  0714  3001               	movlw	1
 10624  0715  07D3               	addwf	_gBoxCntStruct+17,f
 10625  0716  3000               	movlw	0
 10626  0717  3DD4               	addwfc	_gBoxCntStruct+18,f
 10627  0718  3000               	movlw	0
 10628  0719  3DD5               	addwfc	_gBoxCntStruct+19,f
 10629  071A  3000               	movlw	0
 10630  071B  3DD6               	addwfc	_gBoxCntStruct+20,f
 10631                           
 10632                           ;bsp_counter.c: 95: gBoxCntStruct.SingleTimeCnt = 0;
 10633  071C  3000               	movlw	0
 10634  071D  00CA               	movwf	_gBoxCntStruct+8
 10635  071E  3000               	movlw	0
 10636  071F  00C9               	movwf	_gBoxCntStruct+7
 10637  0720  3000               	movlw	0
 10638  0721  00C8               	movwf	_gBoxCntStruct+6
 10639  0722  3000               	movlw	0
 10640  0723  00C7               	movwf	_gBoxCntStruct+5
 10641                           
 10642                           ;bsp_counter.c: 96: return ;
 10643  0724  0008               	return
 10644  0725                     i1l1775:	
 10645                           
 10646                           ;bsp_counter.c: 97: }
 10647                           ;bsp_counter.c: 99: if(140 > gBoxCntStruct.SingleTimeCnt)
 10648  0725  084A               	movf	_gBoxCntStruct+8,w
 10649  0726  1D03               	btfss	3,2
 10650  0727  0008               	return
 10651  0728  0849               	movf	_gBoxCntStruct+7,w
 10652  0729  1D03               	btfss	3,2
 10653  072A  0008               	return
 10654  072B  0848               	movf	_gBoxCntStruct+6,w
 10655  072C  1D03               	btfss	3,2
 10656  072D  0008               	return
 10657  072E  308C               	movlw	140
 10658  072F  0247               	subwf	_gBoxCntStruct+5,w
 10659  0730  1803               	btfsc	3,0
 10660  0731  0008               	return
 10661                           
 10662                           ;bsp_counter.c: 100: {
 10663                           ;bsp_counter.c: 101: gBoxCntStruct.SmallBoxCnt++;
 10664  0732  3001               	movlw	1
 10665  0733  07CB               	addwf	_gBoxCntStruct+9,f
 10666  0734  3000               	movlw	0
 10667  0735  3DCC               	addwfc	_gBoxCntStruct+10,f
 10668                           
 10669                           ;bsp_counter.c: 102: gBoxCntStruct.BoxSum++;
 10670  0736  3001               	movlw	1
 10671  0737  07D3               	addwf	_gBoxCntStruct+17,f
 10672  0738  3000               	movlw	0
 10673  0739  3DD4               	addwfc	_gBoxCntStruct+18,f
 10674  073A  3000               	movlw	0
 10675  073B  3DD5               	addwfc	_gBoxCntStruct+19,f
 10676  073C  3000               	movlw	0
 10677  073D  3DD6               	addwfc	_gBoxCntStruct+20,f
 10678                           
 10679                           ;bsp_counter.c: 103: gBoxCntStruct.SingleTimeCnt = 0;
 10680  073E  3000               	movlw	0
 10681  073F  00CA               	movwf	_gBoxCntStruct+8
 10682  0740  3000               	movlw	0
 10683  0741  00C9               	movwf	_gBoxCntStruct+7
 10684  0742  3000               	movlw	0
 10685  0743  00C8               	movwf	_gBoxCntStruct+6
 10686  0744  3000               	movlw	0
 10687  0745  00C7               	movwf	_gBoxCntStruct+5
 10688                           
 10689                           ;bsp_counter.c: 104: return;
 10690  0746  0008               	return
 10691  0747                     __end_of_bsp_TimerInterruptISRCallback:	
 10692                           
 10693                           	psect	text35
 10694  0003                     __ptext35:	
 10695 ;; *************** function _TMR3_DefaultInterruptHandler *****************
 10696 ;; Defined at:
 10697 ;;		line 186 in file "mcc_generated_files/tmr3.c"
 10698 ;; Parameters:    Size  Location     Type
 10699 ;;		None
 10700 ;; Auto vars:     Size  Location     Type
 10701 ;;		None
 10702 ;; Return value:  Size  Location     Type
 10703 ;;                  1    wreg      void 
 10704 ;; Registers used:
 10705 ;;		None
 10706 ;; Tracked objects:
 10707 ;;		On entry : 0/0
 10708 ;;		On exit  : 0/0
 10709 ;;		Unchanged: 0/0
 10710 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10711 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10712 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10713 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10714 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10715 ;;Total ram usage:        0 bytes
 10716 ;; Hardware stack levels used:    1
 10717 ;; This function calls:
 10718 ;;		Nothing
 10719 ;; This function is called by:
 10720 ;;		_TMR3_Initialize
 10721 ;;		_TMR3_CallBack
 10722 ;; This function uses a non-reentrant model
 10723 ;;
 10724                           
 10725                           
 10726                           ;psect for function _TMR3_DefaultInterruptHandler
 10727  0003                     _TMR3_DefaultInterruptHandler:	
 10728                           
 10729                           ;incstack = 0
 10730                           ; Regs used in _TMR3_DefaultInterruptHandler: []
 10731  0003  0008               	return
 10732  0004                     __end_of_TMR3_DefaultInterruptHandler:	
 10733                           
 10734                           	psect	text36
 10735  0C0D                     __ptext36:	
 10736 ;; *************** function _TMR1_ISR *****************
 10737 ;; Defined at:
 10738 ;;		line 157 in file "mcc_generated_files/tmr1.c"
 10739 ;; Parameters:    Size  Location     Type
 10740 ;;		None
 10741 ;; Auto vars:     Size  Location     Type
 10742 ;;		None
 10743 ;; Return value:  Size  Location     Type
 10744 ;;                  1    wreg      void 
 10745 ;; Registers used:
 10746 ;;		wreg, status,2, status,0, pclath, cstack
 10747 ;; Tracked objects:
 10748 ;;		On entry : 0/0
 10749 ;;		On exit  : 0/0
 10750 ;;		Unchanged: 0/0
 10751 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10752 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10753 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10754 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10755 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10756 ;;Total ram usage:        0 bytes
 10757 ;; Hardware stack levels used:    1
 10758 ;; Hardware stack levels required when called:    2
 10759 ;; This function calls:
 10760 ;;		_TMR1_CallBack
 10761 ;;		_TMR1_WriteTimer
 10762 ;; This function is called by:
 10763 ;;		_INTERRUPT_InterruptManager
 10764 ;; This function uses a non-reentrant model
 10765 ;;
 10766                           
 10767                           
 10768                           ;psect for function _TMR1_ISR
 10769  0C0D                     _TMR1_ISR:	
 10770                           
 10771                           ;tmr1.c: 161: PIR1bits.TMR1IF = 0;
 10772                           
 10773                           ;incstack = 0
 10774                           ; Regs used in _TMR1_ISR: [wreg+status,2+status,0+pclath+cstack]
 10775  0C0D  0020               	movlb	0	; select bank0
 10776  0C0E  1010               	bcf	16,0	;volatile
 10777                           
 10778                           ;tmr1.c: 162: TMR1_WriteTimer(timer1ReloadVal);
 10779  0C0F  0865               	movf	_timer1ReloadVal+1,w	;volatile
 10780  0C10  00F1               	movwf	TMR1_WriteTimer@timerVal+1
 10781  0C11  0864               	movf	_timer1ReloadVal,w	;volatile
 10782  0C12  00F0               	movwf	TMR1_WriteTimer@timerVal
 10783  0C13  318C  2433  318C   	fcall	_TMR1_WriteTimer
 10784                           
 10785                           ;tmr1.c: 166: TMR1_CallBack();
 10786  0C16  318B  23F7         	fcall	_TMR1_CallBack
 10787  0C18  0008               	return
 10788  0C19                     __end_of_TMR1_ISR:	
 10789                           
 10790                           	psect	text37
 10791  0C33                     __ptext37:	
 10792 ;; *************** function _TMR1_WriteTimer *****************
 10793 ;; Defined at:
 10794 ;;		line 120 in file "mcc_generated_files/tmr1.c"
 10795 ;; Parameters:    Size  Location     Type
 10796 ;;  timerVal        2    0[COMMON] unsigned int 
 10797 ;; Auto vars:     Size  Location     Type
 10798 ;;		None
 10799 ;; Return value:  Size  Location     Type
 10800 ;;                  1    wreg      void 
 10801 ;; Registers used:
 10802 ;;		wreg, status,2
 10803 ;; Tracked objects:
 10804 ;;		On entry : 0/0
 10805 ;;		On exit  : 0/0
 10806 ;;		Unchanged: 0/0
 10807 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10808 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10809 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10810 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10811 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10812 ;;Total ram usage:        2 bytes
 10813 ;; Hardware stack levels used:    1
 10814 ;; This function calls:
 10815 ;;		Nothing
 10816 ;; This function is called by:
 10817 ;;		_TMR1_ISR
 10818 ;;		_TMR1_Reload
 10819 ;; This function uses a non-reentrant model
 10820 ;;
 10821                           
 10822                           
 10823                           ;psect for function _TMR1_WriteTimer
 10824  0C33                     _TMR1_WriteTimer:	
 10825                           
 10826                           ;tmr1.c: 122: if (T1CONbits.nT1SYNC == 1)
 10827                           
 10828                           ;incstack = 0
 10829                           ; Regs used in _TMR1_WriteTimer: [wreg+status,2]
 10830  0C33  0020               	movlb	0	; select bank0
 10831  0C34  1D18               	btfss	24,2	;volatile
 10832  0C35  2C3D               	goto	i1l1889
 10833                           
 10834                           ;tmr1.c: 123: {
 10835                           ;tmr1.c: 125: T1CONbits.TMR1ON = 0;
 10836  0C36  1018               	bcf	24,0	;volatile
 10837                           
 10838                           ;tmr1.c: 128: TMR1H = (timerVal >> 8);
 10839  0C37  0871               	movf	TMR1_WriteTimer@timerVal+1,w
 10840  0C38  0097               	movwf	23	;volatile
 10841                           
 10842                           ;tmr1.c: 129: TMR1L = timerVal;
 10843  0C39  0870               	movf	TMR1_WriteTimer@timerVal,w
 10844  0C3A  0096               	movwf	22	;volatile
 10845                           
 10846                           ;tmr1.c: 132: T1CONbits.TMR1ON =1;
 10847  0C3B  1418               	bsf	24,0	;volatile
 10848                           
 10849                           ;tmr1.c: 133: }
 10850  0C3C  0008               	return
 10851  0C3D                     i1l1889:	
 10852                           
 10853                           ;tmr1.c: 134: else
 10854                           ;tmr1.c: 135: {
 10855                           ;tmr1.c: 137: TMR1H = (timerVal >> 8);
 10856  0C3D  0871               	movf	TMR1_WriteTimer@timerVal+1,w
 10857  0C3E  0097               	movwf	23	;volatile
 10858                           
 10859                           ;tmr1.c: 138: TMR1L = timerVal;
 10860  0C3F  0870               	movf	TMR1_WriteTimer@timerVal,w
 10861  0C40  0096               	movwf	22	;volatile
 10862  0C41  0008               	return
 10863  0C42                     __end_of_TMR1_WriteTimer:	
 10864                           
 10865                           	psect	text38
 10866  0BF7                     __ptext38:	
 10867 ;; *************** function _TMR1_CallBack *****************
 10868 ;; Defined at:
 10869 ;;		line 169 in file "mcc_generated_files/tmr1.c"
 10870 ;; Parameters:    Size  Location     Type
 10871 ;;		None
 10872 ;; Auto vars:     Size  Location     Type
 10873 ;;		None
 10874 ;; Return value:  Size  Location     Type
 10875 ;;                  1    wreg      void 
 10876 ;; Registers used:
 10877 ;;		wreg, status,2, status,0, pclath, cstack
 10878 ;; Tracked objects:
 10879 ;;		On entry : 0/0
 10880 ;;		On exit  : 0/0
 10881 ;;		Unchanged: 0/0
 10882 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10883 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10884 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10885 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10886 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10887 ;;Total ram usage:        0 bytes
 10888 ;; Hardware stack levels used:    1
 10889 ;; Hardware stack levels required when called:    1
 10890 ;; This function calls:
 10891 ;;		Absolute function
 10892 ;;		_TMR1_DefaultInterruptHandler
 10893 ;; This function is called by:
 10894 ;;		_TMR1_ISR
 10895 ;; This function uses a non-reentrant model
 10896 ;;
 10897                           
 10898                           
 10899                           ;psect for function _TMR1_CallBack
 10900  0BF7                     _TMR1_CallBack:	
 10901                           
 10902                           ;tmr1.c: 172: if(TMR1_InterruptHandler)
 10903                           
 10904                           ;incstack = 0
 10905                           ; Regs used in _TMR1_CallBack: [wreg+status,2+status,0+pclath+cstack]
 10906  0BF7  0020               	movlb	0	; select bank0
 10907  0BF8  0862               	movf	_TMR1_InterruptHandler,w
 10908  0BF9  0463               	iorwf	_TMR1_InterruptHandler+1,w
 10909  0BFA  1903               	btfsc	3,2
 10910  0BFB  0008               	return
 10911                           
 10912                           ;tmr1.c: 173: {
 10913                           ;tmr1.c: 174: TMR1_InterruptHandler();
 10914  0BFC  0863               	movf	_TMR1_InterruptHandler+1,w
 10915  0BFD  008A               	movwf	10
 10916  0BFE  0862               	movf	_TMR1_InterruptHandler,w
 10917  0BFF  000A               	callw
 10918  0C00  318B               	pagesel	$
 10919  0C01  0008               	return
 10920  0C02                     __end_of_TMR1_CallBack:	
 10921                           
 10922                           	psect	text39
 10923  0BB4                     __ptext39:	
 10924 ;; *************** function _TMR1_DefaultInterruptHandler *****************
 10925 ;; Defined at:
 10926 ;;		line 182 in file "mcc_generated_files/tmr1.c"
 10927 ;; Parameters:    Size  Location     Type
 10928 ;;		None
 10929 ;; Auto vars:     Size  Location     Type
 10930 ;;		None
 10931 ;; Return value:  Size  Location     Type
 10932 ;;                  1    wreg      void 
 10933 ;; Registers used:
 10934 ;;		None
 10935 ;; Tracked objects:
 10936 ;;		On entry : 0/0
 10937 ;;		On exit  : 0/0
 10938 ;;		Unchanged: 0/0
 10939 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10940 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10941 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10942 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10943 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10944 ;;Total ram usage:        0 bytes
 10945 ;; Hardware stack levels used:    1
 10946 ;; This function calls:
 10947 ;;		Nothing
 10948 ;; This function is called by:
 10949 ;;		_TMR1_Initialize
 10950 ;;		_TMR1_CallBack
 10951 ;; This function uses a non-reentrant model
 10952 ;;
 10953                           
 10954                           
 10955                           ;psect for function _TMR1_DefaultInterruptHandler
 10956  0BB4                     _TMR1_DefaultInterruptHandler:	
 10957                           
 10958                           ;incstack = 0
 10959                           ; Regs used in _TMR1_DefaultInterruptHandler: []
 10960  0BB4  0008               	return
 10961  0BB5                     __end_of_TMR1_DefaultInterruptHandler:	
 10962                           
 10963                           	psect	text40
 10964  0BD9                     __ptext40:	
 10965 ;; *************** function _TMR0_ISR *****************
 10966 ;; Defined at:
 10967 ;;		line 112 in file "mcc_generated_files/tmr0.c"
 10968 ;; Parameters:    Size  Location     Type
 10969 ;;		None
 10970 ;; Auto vars:     Size  Location     Type
 10971 ;;		None
 10972 ;; Return value:  Size  Location     Type
 10973 ;;                  1    wreg      void 
 10974 ;; Registers used:
 10975 ;;		wreg, status,2, status,0, pclath, cstack
 10976 ;; Tracked objects:
 10977 ;;		On entry : 0/0
 10978 ;;		On exit  : 0/0
 10979 ;;		Unchanged: 0/0
 10980 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10981 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10982 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10983 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10984 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10985 ;;Total ram usage:        0 bytes
 10986 ;; Hardware stack levels used:    1
 10987 ;; Hardware stack levels required when called:    2
 10988 ;; This function calls:
 10989 ;;		_TMR0_CallBack
 10990 ;; This function is called by:
 10991 ;;		_INTERRUPT_InterruptManager
 10992 ;; This function uses a non-reentrant model
 10993 ;;
 10994                           
 10995                           
 10996                           ;psect for function _TMR0_ISR
 10997  0BD9                     _TMR0_ISR:	
 10998                           
 10999                           ;tmr0.c: 116: INTCONbits.TMR0IF = 0;
 11000                           
 11001                           ;incstack = 0
 11002                           ; Regs used in _TMR0_ISR: [wreg+status,2+status,0+pclath+cstack]
 11003  0BD9  110B               	bcf	11,2	;volatile
 11004                           
 11005                           ;tmr0.c: 118: TMR0 = timer0ReloadVal;
 11006  0BDA  0020               	movlb	0	; select bank0
 11007  0BDB  0868               	movf	_timer0ReloadVal,w	;volatile
 11008  0BDC  0095               	movwf	21	;volatile
 11009                           
 11010                           ;tmr0.c: 122: TMR0_CallBack();
 11011  0BDD  318C  24CF         	fcall	_TMR0_CallBack
 11012  0BDF  0008               	return
 11013  0BE0                     __end_of_TMR0_ISR:	
 11014                           
 11015                           	psect	text41
 11016  0CCF                     __ptext41:	
 11017 ;; *************** function _TMR0_CallBack *****************
 11018 ;; Defined at:
 11019 ;;		line 127 in file "mcc_generated_files/tmr0.c"
 11020 ;; Parameters:    Size  Location     Type
 11021 ;;		None
 11022 ;; Auto vars:     Size  Location     Type
 11023 ;;		None
 11024 ;; Return value:  Size  Location     Type
 11025 ;;                  1    wreg      void 
 11026 ;; Registers used:
 11027 ;;		wreg, status,2, status,0, pclath, cstack
 11028 ;; Tracked objects:
 11029 ;;		On entry : 0/0
 11030 ;;		On exit  : 0/0
 11031 ;;		Unchanged: 0/0
 11032 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11033 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11034 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11035 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11036 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11037 ;;Total ram usage:        1 bytes
 11038 ;; Hardware stack levels used:    1
 11039 ;; Hardware stack levels required when called:    1
 11040 ;; This function calls:
 11041 ;;		Absolute function
 11042 ;;		_TMR0_DefaultInterruptHandler
 11043 ;; This function is called by:
 11044 ;;		_TMR0_ISR
 11045 ;; This function uses a non-reentrant model
 11046 ;;
 11047                           
 11048                           
 11049                           ;psect for function _TMR0_CallBack
 11050  0CCF                     _TMR0_CallBack:	
 11051                           
 11052                           ;tmr0.c: 130: gTimer0AlarmFlashFlag = 1;
 11053                           
 11054                           ;incstack = 0
 11055                           ; Regs used in _TMR0_CallBack: [wreg+status,2+status,0+pclath+cstack]
 11056  0CCF  3001               	movlw	1
 11057  0CD0  00F0               	movwf	??_TMR0_CallBack
 11058  0CD1  0870               	movf	??_TMR0_CallBack,w
 11059  0CD2  00FA               	movwf	_gTimer0AlarmFlashFlag	;volatile
 11060                           
 11061                           ;tmr0.c: 131: gTimer0NormalFalshCnt++;
 11062  0CD3  3001               	movlw	1
 11063  0CD4  00F0               	movwf	??_TMR0_CallBack
 11064  0CD5  0870               	movf	??_TMR0_CallBack,w
 11065  0CD6  07F9               	addwf	_gTimer0NormalFalshCnt,f	;volatile
 11066                           
 11067                           ;tmr0.c: 132: if(gTimer0NormalFalshCnt > 5)
 11068  0CD7  3006               	movlw	6
 11069  0CD8  0279               	subwf	_gTimer0NormalFalshCnt,w	;volatile
 11070  0CD9  1C03               	skipc
 11071  0CDA  2CE0               	goto	i1l1859
 11072                           
 11073                           ;tmr0.c: 133: {
 11074                           ;tmr0.c: 134: gTimer0NormalFalshCnt = 0;
 11075  0CDB  01F9               	clrf	_gTimer0NormalFalshCnt	;volatile
 11076                           
 11077                           ;tmr0.c: 135: gTimer0NormalFlashFlag= 1;
 11078  0CDC  3001               	movlw	1
 11079  0CDD  00F0               	movwf	??_TMR0_CallBack
 11080  0CDE  0870               	movf	??_TMR0_CallBack,w
 11081  0CDF  00F8               	movwf	_gTimer0NormalFlashFlag	;volatile
 11082  0CE0                     i1l1859:	
 11083                           
 11084                           ;tmr0.c: 136: }
 11085                           ;tmr0.c: 138: if(TMR0_InterruptHandler)
 11086  0CE0  0020               	movlb	0	; select bank0
 11087  0CE1  0866               	movf	_TMR0_InterruptHandler,w
 11088  0CE2  0467               	iorwf	_TMR0_InterruptHandler+1,w
 11089  0CE3  1903               	btfsc	3,2
 11090  0CE4  0008               	return
 11091                           
 11092                           ;tmr0.c: 139: {
 11093                           ;tmr0.c: 140: TMR0_InterruptHandler();
 11094  0CE5  0867               	movf	_TMR0_InterruptHandler+1,w
 11095  0CE6  008A               	movwf	10
 11096  0CE7  0866               	movf	_TMR0_InterruptHandler,w
 11097  0CE8  000A               	callw
 11098  0CE9  318C               	pagesel	$
 11099  0CEA  0008               	return
 11100  0CEB                     __end_of_TMR0_CallBack:	
 11101                           
 11102                           	psect	text42
 11103  0BB3                     __ptext42:	
 11104 ;; *************** function _TMR0_DefaultInterruptHandler *****************
 11105 ;; Defined at:
 11106 ;;		line 148 in file "mcc_generated_files/tmr0.c"
 11107 ;; Parameters:    Size  Location     Type
 11108 ;;		None
 11109 ;; Auto vars:     Size  Location     Type
 11110 ;;		None
 11111 ;; Return value:  Size  Location     Type
 11112 ;;                  1    wreg      void 
 11113 ;; Registers used:
 11114 ;;		None
 11115 ;; Tracked objects:
 11116 ;;		On entry : 0/0
 11117 ;;		On exit  : 0/0
 11118 ;;		Unchanged: 0/0
 11119 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11120 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11121 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11122 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11123 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11124 ;;Total ram usage:        0 bytes
 11125 ;; Hardware stack levels used:    1
 11126 ;; This function calls:
 11127 ;;		Nothing
 11128 ;; This function is called by:
 11129 ;;		_TMR0_Initialize
 11130 ;;		_TMR0_CallBack
 11131 ;; This function uses a non-reentrant model
 11132 ;;
 11133                           
 11134                           
 11135                           ;psect for function _TMR0_DefaultInterruptHandler
 11136  0BB3                     _TMR0_DefaultInterruptHandler:	
 11137                           
 11138                           ;incstack = 0
 11139                           ; Regs used in _TMR0_DefaultInterruptHandler: []
 11140  0BB3  0008               	return
 11141  0BB4                     __end_of_TMR0_DefaultInterruptHandler:	
 11142                           
 11143                           	psect	text43
 11144  0BB2                     __ptext43:	
 11145 ;; *************** function _PIN_MANAGER_IOC *****************
 11146 ;; Defined at:
 11147 ;;		line 107 in file "mcc_generated_files/pin_manager.c"
 11148 ;; Parameters:    Size  Location     Type
 11149 ;;		None
 11150 ;; Auto vars:     Size  Location     Type
 11151 ;;		None
 11152 ;; Return value:  Size  Location     Type
 11153 ;;                  1    wreg      void 
 11154 ;; Registers used:
 11155 ;;		None
 11156 ;; Tracked objects:
 11157 ;;		On entry : 0/0
 11158 ;;		On exit  : 0/0
 11159 ;;		Unchanged: 0/0
 11160 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11161 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11162 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11163 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11164 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11165 ;;Total ram usage:        0 bytes
 11166 ;; Hardware stack levels used:    1
 11167 ;; This function calls:
 11168 ;;		Nothing
 11169 ;; This function is called by:
 11170 ;;		_INTERRUPT_InterruptManager
 11171 ;; This function uses a non-reentrant model
 11172 ;;
 11173                           
 11174                           
 11175                           ;psect for function _PIN_MANAGER_IOC
 11176  0BB2                     _PIN_MANAGER_IOC:	
 11177                           
 11178                           ;incstack = 0
 11179                           ; Regs used in _PIN_MANAGER_IOC: []
 11180  0BB2  0008               	return
 11181  0BB3                     __end_of_PIN_MANAGER_IOC:	
 11182                           
 11183                           	psect	text44
 11184  07FC                     __ptext44:	
 11185 ;; *************** function _INT_ISR *****************
 11186 ;; Defined at:
 11187 ;;		line 37 in file "mcc_generated_files/ext_int.c"
 11188 ;; Parameters:    Size  Location     Type
 11189 ;;		None
 11190 ;; Auto vars:     Size  Location     Type
 11191 ;;		None
 11192 ;; Return value:  Size  Location     Type
 11193 ;;                  1    wreg      void 
 11194 ;; Registers used:
 11195 ;;		wreg, status,2, status,0, pclath, cstack
 11196 ;; Tracked objects:
 11197 ;;		On entry : 0/0
 11198 ;;		On exit  : 0/0
 11199 ;;		Unchanged: 0/0
 11200 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11201 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11202 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11203 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11204 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11205 ;;Total ram usage:        0 bytes
 11206 ;; Hardware stack levels used:    1
 11207 ;; Hardware stack levels required when called:    2
 11208 ;; This function calls:
 11209 ;;		_INT_CallBack
 11210 ;; This function is called by:
 11211 ;;		_INTERRUPT_InterruptManager
 11212 ;; This function uses a non-reentrant model
 11213 ;;
 11214                           
 11215                           
 11216                           ;psect for function _INT_ISR
 11217  07FC                     _INT_ISR:	
 11218                           
 11219                           ;ext_int.c: 39: (INTCONbits.INTF = 0);
 11220                           
 11221                           ;incstack = 0
 11222                           ; Regs used in _INT_ISR: [wreg+status,2+status,0+pclath+cstack]
 11223  07FC  108B               	bcf	11,1	;volatile
 11224                           
 11225                           ;ext_int.c: 42: INT_CallBack();
 11226  07FD  318D  25B1         	fcall	_INT_CallBack
 11227  07FF  0008               	return
 11228  0800                     __end_of_INT_ISR:	
 11229                           
 11230                           	psect	text45
 11231  0DB1                     __ptext45:	
 11232 ;; *************** function _INT_CallBack *****************
 11233 ;; Defined at:
 11234 ;;		line 46 in file "mcc_generated_files/ext_int.c"
 11235 ;; Parameters:    Size  Location     Type
 11236 ;;		None
 11237 ;; Auto vars:     Size  Location     Type
 11238 ;;		None
 11239 ;; Return value:  Size  Location     Type
 11240 ;;                  1    wreg      void 
 11241 ;; Registers used:
 11242 ;;		wreg, status,2, status,0, pclath, cstack
 11243 ;; Tracked objects:
 11244 ;;		On entry : 0/0
 11245 ;;		On exit  : 0/0
 11246 ;;		Unchanged: 0/0
 11247 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11248 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11249 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11250 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11251 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11252 ;;Total ram usage:        1 bytes
 11253 ;; Hardware stack levels used:    1
 11254 ;; Hardware stack levels required when called:    1
 11255 ;; This function calls:
 11256 ;;		Absolute function
 11257 ;;		_INT_DefaultInterruptHandler
 11258 ;; This function is called by:
 11259 ;;		_INT_ISR
 11260 ;; This function uses a non-reentrant model
 11261 ;;
 11262                           
 11263                           
 11264                           ;psect for function _INT_CallBack
 11265  0DB1                     _INT_CallBack:	
 11266                           
 11267                           ;ext_int.c: 49: gInterruptFlag = 1;
 11268                           
 11269                           ;incstack = 0
 11270                           ; Regs used in _INT_CallBack: [wreg+status,2+status,0+pclath+cstack]
 11271  0DB1  3001               	movlw	1
 11272  0DB2  00F0               	movwf	??_INT_CallBack
 11273  0DB3  0870               	movf	??_INT_CallBack,w
 11274  0DB4  0020               	movlb	0	; select bank0
 11275  0DB5  00DD               	movwf	_gInterruptFlag	;volatile
 11276                           
 11277                           ;ext_int.c: 50: if(0 == OPTION_REGbits.INTEDG && 0 == PORTAbits.RA2)
 11278  0DB6  0021               	movlb	1	; select bank1
 11279  0DB7  1B15               	btfsc	21,6	;volatile
 11280  0DB8  2DC2               	goto	i1l303
 11281  0DB9  0020               	movlb	0	; select bank0
 11282  0DBA  190C               	btfsc	12,2	;volatile
 11283  0DBB  2DC2               	goto	i1l303
 11284                           
 11285                           ;ext_int.c: 51: {
 11286                           ;ext_int.c: 52: gBoxCntStruct.TimeCntStartFlag = 1;
 11287  0DBC  01C2               	clrf	_gBoxCntStruct
 11288  0DBD  0AC2               	incf	_gBoxCntStruct,f
 11289                           
 11290                           ;ext_int.c: 53: gBoxCntStruct.TimeCntEndFlag = 0;
 11291  0DBE  01C3               	clrf	_gBoxCntStruct+1
 11292                           
 11293                           ;ext_int.c: 55: (OPTION_REGbits.INTEDG = 1);
 11294  0DBF  0021               	movlb	1	; select bank1
 11295  0DC0  1715               	bsf	21,6	;volatile
 11296                           
 11297                           ;ext_int.c: 56: }
 11298  0DC1  2DCD               	goto	i1l1983
 11299  0DC2                     i1l303:	
 11300                           
 11301                           ;ext_int.c: 57: else if(1 == OPTION_REGbits.INTEDG && 1 == PORTAbits.RA2 )
 11302  0DC2  0021               	movlb	1	; select bank1
 11303  0DC3  1F15               	btfss	21,6	;volatile
 11304  0DC4  2DCD               	goto	i1l1983
 11305  0DC5  0020               	movlb	0	; select bank0
 11306  0DC6  1D0C               	btfss	12,2	;volatile
 11307  0DC7  2DCD               	goto	i1l1983
 11308                           
 11309                           ;ext_int.c: 58: {
 11310                           ;ext_int.c: 59: gBoxCntStruct.TimeCntStartFlag = 0;
 11311  0DC8  01C2               	clrf	_gBoxCntStruct
 11312                           
 11313                           ;ext_int.c: 60: gBoxCntStruct.TimeCntEndFlag = 1;
 11314  0DC9  01C3               	clrf	_gBoxCntStruct+1
 11315  0DCA  0AC3               	incf	_gBoxCntStruct+1,f
 11316                           
 11317                           ;ext_int.c: 61: (OPTION_REGbits.INTEDG = 0);
 11318  0DCB  0021               	movlb	1	; select bank1
 11319  0DCC  1315               	bcf	21,6	;volatile
 11320  0DCD                     i1l1983:	
 11321                           
 11322                           ;ext_int.c: 62: }
 11323                           ;ext_int.c: 63: if(INT_InterruptHandler)
 11324  0DCD  0021               	movlb	1	; select bank1
 11325  0DCE  0866               	movf	_INT_InterruptHandler^(0+128),w
 11326  0DCF  0467               	iorwf	(_INT_InterruptHandler+1)^(0+128),w
 11327  0DD0  1903               	btfsc	3,2
 11328  0DD1  0008               	return
 11329                           
 11330                           ;ext_int.c: 64: {
 11331                           ;ext_int.c: 65: INT_InterruptHandler();
 11332  0DD2  0867               	movf	(_INT_InterruptHandler+1)^(0+128),w
 11333  0DD3  008A               	movwf	10
 11334  0DD4  0866               	movf	_INT_InterruptHandler^(0+128),w
 11335  0DD5  000A               	callw
 11336  0DD6  318D               	pagesel	$
 11337  0DD7  0008               	return
 11338  0DD8                     __end_of_INT_CallBack:	
 11339                           
 11340                           	psect	text46
 11341  0BB1                     __ptext46:	
 11342 ;; *************** function _INT_DefaultInterruptHandler *****************
 11343 ;; Defined at:
 11344 ;;		line 73 in file "mcc_generated_files/ext_int.c"
 11345 ;; Parameters:    Size  Location     Type
 11346 ;;		None
 11347 ;; Auto vars:     Size  Location     Type
 11348 ;;		None
 11349 ;; Return value:  Size  Location     Type
 11350 ;;                  1    wreg      void 
 11351 ;; Registers used:
 11352 ;;		None
 11353 ;; Tracked objects:
 11354 ;;		On entry : 0/0
 11355 ;;		On exit  : 0/0
 11356 ;;		Unchanged: 0/0
 11357 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11358 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11359 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11360 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11361 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11362 ;;Total ram usage:        0 bytes
 11363 ;; Hardware stack levels used:    1
 11364 ;; This function calls:
 11365 ;;		Nothing
 11366 ;; This function is called by:
 11367 ;;		_EXT_INT_Initialize
 11368 ;;		_INT_CallBack
 11369 ;; This function uses a non-reentrant model
 11370 ;;
 11371                           
 11372                           
 11373                           ;psect for function _INT_DefaultInterruptHandler
 11374  0BB1                     _INT_DefaultInterruptHandler:	
 11375                           
 11376                           ;incstack = 0
 11377                           ; Regs used in _INT_DefaultInterruptHandler: []
 11378  0BB1  0008               	return
 11379  0BB2                     __end_of_INT_DefaultInterruptHandler:	
 11380  007E                     btemp	set	126	;btemp
 11381  007E                     int$flags	set	126
 11382  007E                     wtemp0	set	126


Data Sizes:
    Strings     14
    Constant    0
    Data        71
    BSS         65
    Persistent  13
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      11
    BANK0            80     34      73
    BANK1            80      0      72
    BANK2            80      0      33
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    _fassert@expr	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_4(CODE[7]), STR_2(CODE[7]), 

    _fassert@file	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_3(CODE[7]), STR_1(CODE[7]), 

    memset@p1	PTR void  size(1) Largest target is 32
		 -> HEFBufferData(BANK1[32]), 

    memset@p	PTR unsigned char  size(1) Largest target is 32
		 -> HEFBufferData(BANK1[32]), 

    HEFLASH_readBlock@buffer	PTR unsigned char  size(1) Largest target is 32
		 -> HEFBufferData(BANK1[32]), 

    HEFLASH_writeBlock@data	PTR unsigned char  size(1) Largest target is 32
		 -> HEFBufferData(BANK1[32]), 

    sp__memset	PTR void  size(1) Largest target is 32
		 -> HEFBufferData(BANK1[32]), 

    Print@str	PTR unsigned char  size(2) Largest target is 18
		 -> clearDataOk_2(BANK1[11]), clearDataOk_1(BANK2[15]), clearingData(BANK2[18]), display_data_2(BANK1[11]), 
		 -> display_data_1(BANK1[16]), 

    INT_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> INT_DefaultInterruptHandler(), 

    INT_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> INT_DefaultInterruptHandler(), Absolute function(), 

    TMR3_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR3_DefaultInterruptHandler(), 

    TMR3_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR3_DefaultInterruptHandler(), Absolute function(), 

    TMR1_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR1_DefaultInterruptHandler(), 

    TMR1_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR1_DefaultInterruptHandler(), Absolute function(), 

    TMR0_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR0_DefaultInterruptHandler(), 

    TMR0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), TMR0_DefaultInterruptHandler(), 


Critical Paths under _main in COMMON

    _main->_LCDSendData
    _main->_memset
    _SYSTEM_Initialize->_TMR0_Initialize
    _TMR3_Initialize->_TMR3_SetInterruptHandler
    _TMR1_Initialize->_TMR1_SetInterruptHandler
    _TMR0_Initialize->_TMR0_SetInterruptHandler
    _EXT_INT_Initialize->_INT_SetInterruptHandler
    _Print->_LCDSendData
    _LCDInit->_LCDSendData
    _HEFLASH_checkData->___lldiv
    _HEFLASH_checkData->___lwdiv
    _HEFLASH_checkData->_memset
    _HEFLASH_readBlock->_FLASH_read
    _Data_Toseg->___lldiv
    _Data_Toseg->___lwdiv
    ___lwdiv->___lwmod
    ___lldiv->___llmod
    _HEFLASH_writeBlock->_FLASH_erase

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _TMR3_ISR->_TMR3_WriteTimer
    _TMR1_ISR->_TMR1_WriteTimer
    _TMR0_ISR->_TMR0_CallBack
    _INT_ISR->_INT_CallBack

Critical Paths under _main in BANK0

    _main->_HEFLASH_checkData
    _Print->_LCDSendData
    _LCDInit->_LCDSendData
    _HEFLASH_checkData->___lldiv
    _Data_Toseg->___lldiv
    ___lwdiv->___lwmod
    ___lldiv->___llmod
    _HEFLASH_writeBlock->_FLASH_write

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   29344
                                             32 BANK0      2     2      0
                         _Data_Toseg
                  _HEFLASH_checkData
                 _HEFLASH_writeBlock
                            _LCDInit
                        _LCDSendData
                              _Print
                  _SYSTEM_Initialize
                    _bsp_CounterInit
                             _memset
 ---------------------------------------------------------------------------------
 (1) _bsp_CounterInit                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     344
                 _EXT_INT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
                    _TMR1_Initialize
                    _TMR3_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR3_Initialize                                      0     0      0      86
           _TMR3_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _TMR3_SetInterruptHandler                             2     0      2      86
                                              3 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _TMR1_Initialize                                      0     0      0      86
           _TMR1_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _TMR1_SetInterruptHandler                             2     0      2      86
                                              3 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      1     1      0      86
                                              5 COMMON     1     1      0
           _TMR0_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _TMR0_SetInterruptHandler                             2     0      2      86
                                              3 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EXT_INT_Initialize                                   0     0      0      86
            _INT_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _INT_SetInterruptHandler                              2     0      2      86
                                              3 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (1) _Print                                                3     1      2    2722
                                              2 BANK0      3     1      2
                        _LCDSendData
 ---------------------------------------------------------------------------------
 (1) _LCDInit                                              1     1      0    2118
                                              2 BANK0      1     1      0
                        _LCDSendData
 ---------------------------------------------------------------------------------
 (2) _LCDSendData                                          5     2      3    2118
                                              3 COMMON     3     0      3
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _HEFLASH_checkData                                   11    11      0   10961
                                             21 BANK0     11    11      0
                  _HEFLASH_readBlock
                 _HEFLASH_writeBlock
                            ___lldiv
                            ___llmod
                            ___lwdiv
                            ___lwmod
                           __fassert
                             _memset
 ---------------------------------------------------------------------------------
 (1) _memset                                               7     3      4     511
                                              3 COMMON     3     3      0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (2) __fassert                                             6     0      6     384
                                              0 BANK0      6     0      6
 ---------------------------------------------------------------------------------
 (2) _HEFLASH_readBlock                                    7     5      2     599
                                              0 BANK0      7     5      2
                         _FLASH_read
 ---------------------------------------------------------------------------------
 (3) _FLASH_read                                           2     0      2     214
                                              3 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (1) _Data_Toseg                                           5     5      0    9402
                                             21 BANK0      5     5      0
                 _HEFLASH_writeBlock
                            ___lldiv
                            ___llmod
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4    3928
                                              3 COMMON     2     2      0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4    2705
                                              5 COMMON     1     1      0
                                              4 BANK0      7     3      4
                            ___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (2) ___llmod                                             10     2      8     927
                                              3 COMMON     2     2      0
                                              0 BANK0      8     0      8
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             14     6      8     674
                                              5 COMMON     1     1      0
                                              8 BANK0     13     5      8
                            ___llmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _HEFLASH_writeBlock                                   7     5      2    1168
                                              5 BANK0      7     5      2
                        _FLASH_erase
                        _FLASH_write
 ---------------------------------------------------------------------------------
 (2) _FLASH_write                                          6     1      5     473
                                              3 COMMON     1     1      0
                                              0 BANK0      5     0      5
                            __unlock
 ---------------------------------------------------------------------------------
 (2) _FLASH_erase                                          3     1      2     109
                                              3 COMMON     3     1      2
                            __unlock
 ---------------------------------------------------------------------------------
 (3) __unlock                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _INTERRUPT_InterruptManager                           1     1      0     432
                                              2 COMMON     1     1      0
                            _INT_ISR
                    _PIN_MANAGER_IOC
                           _TMR0_ISR
                           _TMR1_ISR
                           _TMR3_ISR
 ---------------------------------------------------------------------------------
 (6) _TMR3_ISR                                             0     0      0     216
                      _TMR3_CallBack
                    _TMR3_WriteTimer
 ---------------------------------------------------------------------------------
 (7) _TMR3_WriteTimer                                      2     0      2     216
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (7) _TMR3_CallBack                                        0     0      0       0
                   Absolute function *
       _TMR3_DefaultInterruptHandler *
      _bsp_TimerInterruptISRCallback
 ---------------------------------------------------------------------------------
 (8) _bsp_TimerInterruptISRCallback                        0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _TMR3_DefaultInterruptHandler                         0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _TMR1_ISR                                             0     0      0     216
                      _TMR1_CallBack
                    _TMR1_WriteTimer
 ---------------------------------------------------------------------------------
 (7) _TMR1_WriteTimer                                      2     0      2     216
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (7) _TMR1_CallBack                                        0     0      0       0
                   Absolute function *
       _TMR1_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (8) _TMR1_DefaultInterruptHandler                         0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _TMR0_ISR                                             0     0      0       0
                      _TMR0_CallBack
 ---------------------------------------------------------------------------------
 (7) _TMR0_CallBack                                        1     1      0       0
                                              0 COMMON     1     1      0
                   Absolute function *
       _TMR0_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (8) _TMR0_DefaultInterruptHandler                         0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _PIN_MANAGER_IOC                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _INT_ISR                                              0     0      0       0
                       _INT_CallBack
 ---------------------------------------------------------------------------------
 (7) _INT_CallBack                                         1     1      0       0
                                              0 COMMON     1     1      0
                   Absolute function *
        _INT_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (8) _INT_DefaultInterruptHandler                          0     0      0       0
 ---------------------------------------------------------------------------------
 (8) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Data_Toseg
     _HEFLASH_writeBlock
       _FLASH_erase
         __unlock
       _FLASH_write
         __unlock
     ___lldiv
       ___llmod (ARG)
     ___llmod
     ___lwdiv
       ___lwmod (ARG)
     ___lwmod
   _HEFLASH_checkData
     _HEFLASH_readBlock
       _FLASH_read
     _HEFLASH_writeBlock
       _FLASH_erase
         __unlock
       _FLASH_write
         __unlock
     ___lldiv
       ___llmod (ARG)
     ___llmod
     ___lwdiv
       ___lwmod (ARG)
     ___lwmod
     __fassert
     _memset
   _HEFLASH_writeBlock
     _FLASH_erase
       __unlock
     _FLASH_write
       __unlock
   _LCDInit
     _LCDSendData
   _LCDSendData
   _Print
     _LCDSendData
   _SYSTEM_Initialize
     _EXT_INT_Initialize
       _INT_SetInterruptHandler
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR0_Initialize
       _TMR0_SetInterruptHandler
     _TMR1_Initialize
       _TMR1_SetInterruptHandler
     _TMR3_Initialize
       _TMR3_SetInterruptHandler
   _bsp_CounterInit
   _memset

 _INTERRUPT_InterruptManager (ROOT)
   _INT_ISR
     _INT_CallBack
       Absolute function(Fake) *
       _INT_DefaultInterruptHandler *
   _PIN_MANAGER_IOC
   _TMR0_ISR
     _TMR0_CallBack
       Absolute function(Fake) *
       _TMR0_DefaultInterruptHandler *
   _TMR1_ISR
     _TMR1_CallBack
       Absolute function(Fake) *
       _TMR1_DefaultInterruptHandler *
     _TMR1_WriteTimer
   _TMR3_ISR
     _TMR3_CallBack
       Absolute function(Fake) *
       _TMR3_DefaultInterruptHandler *
       _bsp_TimerInterruptISRCallback *
     _TMR3_WriteTimer

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      6       B       2       78.6%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     22      49       5       91.3%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0      48       7       90.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      21       9       41.3%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      BD      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      BD      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Thu Apr 12 01:15:38 2018

                             __CFG_CP$OFF 0000                  __size_of_bsp_CounterInit 001D  
                            ?_LCDSendData 0073                           _timer0ReloadVal 0068  
                             __CFG_LVP$ON 0000                                       l370 07EA  
                                     l372 07EC                           _timer1ReloadVal 0064  
                            __CFG_BORV$LO 0000                                       wreg 0009  
                            __CFG_IESO$ON 0000                         FLASH_read@address 0073  
                         __end_of_LCDInit 1000                              __CFG_ZCD$OFF 0000  
                                    l2015 0F4E                                      l2017 0F73  
                                    l2061 0EED                                      l2071 0F1B  
                                    l2063 0EFB                                      l2075 0F26  
                                    l2091 0EC8                           _timer3ReloadVal 0060  
                                    l2085 0EA2                                      l2087 0EB0  
                                    l2095 0ED3                                      l2511 0E53  
                                    l2503 0E35                                      l2505 0E41  
                                    l2515 0E5C                                      l2533 0E1E  
                                    l2701 05B7                                      l2527 0E06  
                                    l2471 0E7B                                      l2529 0E12  
                                    l2537 0E27                                      l2705 05BB  
                                    l2467 0E79                                      l2491 0CF0  
                                    l2619 0096                                      l2707 05C3  
                                    l2653 02D3                                      l2733 061B  
                                    l2479 0E94                                      l2751 064C  
                                    l2743 0639                                      l2569 0D45  
                                    l2739 062A                                      l2693 058C  
                                    l2679 0566                                _Data_Toseg 0306  
                                    STR_1 1000                                      STR_2 1007  
                                    STR_3 1000                                      STR_4 1007  
                                    u1305 07E5                                      u1315 0F35  
                                    u2115 0E38                                      u2205 0E18  
                                    u1245 0766                                      _LATA 010C  
                                    _LATB 010D                           __end_of_INT_ISR 0800  
                                    u1415 0EF0                                      u2135 0E42  
                                    u2215 0E1F                                      u2055 0E67  
                                    u1255 077A                                      _LATC 010E  
                                    u1505 0EBE                                      u2145 0E4C  
                                    u1265 078F                                      u1435 0EFC  
                                    u1515 0EC9                                      u2155 0E54  
                                    u1275 07A2                                      u2420 064A  
                                    u1445 0F10                                      u2245 04FD  
                                    u1285 07B6                                      u2350 0628  
                                    u1455 0F1C                                      u1295 07CB  
                                    u2185 0E09                                      u2507 0F96  
                                    u2380 0637                                      u1485 0EA5  
                                    u2517 0FAA                                      u2527 0FBE  
                                    u2537 0FD2                                      u2457 054C  
                                    u2547 07EE                                      u2467 0570  
                                    u2557 07F7                                      u2477 05B0  
                                    u2567 006D                                      u2487 0615  
                                    u2497 0D63                __end_of_HEFLASH_writeBlock 0F87  
                                    _TMR0 0015                                      _WPUA 020C  
                                    _WPUB 020D                                      _WPUC 020E  
                            __CFG_WRT$OFF 0000                             __CFG_FCMEN$ON 0000  
                                    _main 0529                                      fsr0h 0005  
                                    fsr1h 0007                                      indf0 0000  
                                    fsr0l 0004                                      indf1 0001  
                                    fsr1l 0006                                      btemp 007E  
                           __CFG_BOREN$ON 0000       __end_of_INT_DefaultInterruptHandler 0BB2  
             _INT_DefaultInterruptHandler 0BB1                                      start 0037  
                         _TMR3_Initialize 0CB5           __end_of_INT_SetInterruptHandler 0BBB  
              ??_TMR1_SetInterruptHandler 0075                             __CFG_MCLRE$ON 0000  
                          _KeyPushTimeCnt 0057                       __size_of_FLASH_read 000F  
                 __end_of_TMR0_Initialize 0C87                             __CFG_PLLEN$ON 0000  
          ??_TMR0_DefaultInterruptHandler 0070            __size_of_OSCILLATOR_Initialize 0007  
                                   PMCON1 0195                                     PMCON2 0196  
           __end_of_OSCILLATOR_Initialize 0BEE                                     ?_main 0070  
                           __CFG_WDTE$OFF 0000                           __end_of___lldiv 0F2F  
                                   _T1CON 0018                           __end_of___llmod 0EDC  
                                   _T3CON 0495                           __end_of___lwdiv 0E61  
                                   i1l303 0DC2                                     i1l162 0010  
                                   i1l164 0017                                     i1l166 001E  
                                   i1l174 0032                                     i1l169 002A  
                         __end_of___lwmod 0E2C                                     i1l448 06C8  
                                   _PMADR 0191                                     _PMDAT 0193  
                                   _TMR1H 0017                                     _TMR3H 0494  
                                   _TMR1L 0016                                     _TMR3L 0493  
                                   _PORTC 000E                                     _TRISA 008C  
                                   _TRISB 008D                                     _TRISC 008E  
       __size_of_TMR0_SetInterruptHandler 0006         __size_of_TMR3_SetInterruptHandler 0006  
               ?_TMR0_SetInterruptHandler 0073                 ?_TMR3_SetInterruptHandler 0073  
                                   _Print 0D45                          __end_of_TMR0_ISR 0BE0  
                         __end_of__unlock 0BF7                          __end_of_TMR1_ISR 0C19  
                        __end_of_TMR3_ISR 0C25            ??_TMR3_DefaultInterruptHandler 0070  
                 __end_of_PIN_MANAGER_IOC 0BB3                   __end_of_TMR1_Initialize 0CB5  
                                   pclath 000A                    HEFLASH_writeBlock@data 0025  
                  HEFLASH_writeBlock@radd 0029                                     status 0003  
                                   wtemp0 007E                            _gInterruptFlag 005D  
                         _TMR1_WriteTimer 0C33                           __initialization 0039  
                            __end_of_main 067B                            __CFG_LPBOR$OFF 0000  
             ?_INTERRUPT_InterruptManager 0070                      __size_of_FLASH_erase 0017  
                                  ??_main 0040                     _TMR3_InterruptHandler 005E  
                    __size_of_FLASH_write 0027                                 ??_LCDInit 0022  
                       ??_bsp_CounterInit 0073                                 ??_INT_ISR 0071  
                    HEFLASH_readBlock@add 0024                                    ?_Print 0022  
                        ___llmod@dividend 0024                                    _ANSELA 018C  
                                  _ANSELB 018D                                    _ANSELC 018E  
                             ?_Data_Toseg 0070                                    _BORCON 0116  
                                  _T1GCON 0019                                    _T3GCON 0496  
                 TMR1_WriteTimer@timerVal 0070                                    _ODCONA 028C  
                                  _ODCONB 028D                                    _ODCONC 028E  
                                  i1l1761 06D7                                    i1l1737 0698  
                 __end_of_TMR3_Initialize 0CCF                                    i1l1749 06AD  
                                  i1l1775 0725                                    i1l1767 06F8  
                                  i1l1769 0704                                    i1l1953 0C4C  
                                  i1l1859 0CE0                                    i1l1983 0DCD  
                                  i1l1889 0C3D                                    _INTPPS 0E10  
                        __end_of__fassert 0BE7                                    _OSCCON 0099  
                   _gTimer0AlarmFlashFlag 007A                           _TMR3_WriteTimer 0C42  
                          __CFG_PWRTE$OFF 0000      __end_of_TMR1_DefaultInterruptHandler 0BB5  
   __size_of_TMR1_DefaultInterruptHandler 0001              _TMR1_DefaultInterruptHandler 0BB4  
                          __CFG_STVREN$ON 0000                        FLASH_write@address 0020  
                               ??___lldiv 0075                                 ??___llmod 0073  
                               ??___lwdiv 0075                                 ??___lwmod 0073  
                        ?_TMR0_Initialize 0070                                    _memset 0CEB  
                               ??__unlock 0073                             ?_INT_CallBack 0070  
                    __size_of_LCDSendData 00B5                                _gEnterFlag 0077  
                 HEFLASH_writeBlock@count 0026                     __end_of_TMR0_CallBack 0CEB  
        __size_of_INT_SetInterruptHandler 0006                              ??_FLASH_read 0075  
 INT_SetInterruptHandler@InterruptHandler 0073  TMR3_SetInterruptHandler@InterruptHandler 0073  
TMR1_SetInterruptHandler@InterruptHandler 0073  TMR0_SetInterruptHandler@InterruptHandler 0073  
                        ?_PIN_MANAGER_IOC 0070                   __end_of_TMR1_WriteTimer 0C42  
                           LCDSendData@RS 0073                     __end_of_TMR1_CallBack 0C02  
                        ?_TMR1_Initialize 0070                         _SYSTEM_Initialize 0C60  
                 __end_of__initialization 0065                    _gTimer0NormalFlashFlag 0078  
                      ?_SYSTEM_Initialize 0070                     __end_of_TMR3_CallBack 0C33  
                          __pcstackCOMMON 0070                             __end_of_Print 0D67  
                            __pidataBANK1 0D8B                              __pidataBANK2 0D24  
                     ??_SYSTEM_Initialize 0076                                 ?_TMR0_ISR 0070  
                               ?_TMR1_ISR 0070             ?_TMR1_DefaultInterruptHandler 0070  
                               ?_TMR3_ISR 0070                        __end_of_FLASH_read 0C60  
                     __size_of_Data_Toseg 0223                            ??_INT_CallBack 0070  
             __size_of_EXT_INT_Initialize 000B                             __fassert@file 0022  
                           __fassert@line 0020                            _OPTION_REGbits 0095  
                           __fassert@expr 0024                                   ??_Print 0024  
               __end_of_SYSTEM_Initialize 0C72                   __end_of_TMR3_WriteTimer 0C51  
                              __pbssBANK0 0042                                __pbssBANK1 00C6  
                        ?_TMR3_Initialize 0070                   HEFLASH_readBlock@buffer 0026  
                   HEFLASH_readBlock@radd 0020                                __pmaintext 0529  
        __end_of_TMR0_SetInterruptHandler 0BC1                              _clearingData 0120  
                      _HEFLASH_writeBlock 0F2F          __end_of_TMR3_SetInterruptHandler 0BCD  
                              ??_TMR0_ISR 0071                                ??_TMR1_ISR 0072  
                         __CFG_PPS1WAY$ON 0000                                ??_TMR3_ISR 0072  
                              __pintentry 0004                                   ?_memset 0020  
                     ?_HEFLASH_writeBlock 0025                                 ?__fassert 0020  
                                 _LCDInit 0F87                           __CFG_WDTCCS$SWC 0000  
                                 _INT_ISR 07FC                                   _OSCTUNE 0098  
                        ?_TMR1_WriteTimer 0070                      ??_HEFLASH_writeBlock 0027  
                         _KeyClearHEFFlag 005B                           _bsp_CounterInit 0D07  
                                 ___lldiv 0EDC                                   ___llmod 0E99  
                                 ___lwdiv 0E2C                                   ___lwmod 0DFF  
                         __size_of_memset 001C     __end_of_bsp_TimerInterruptISRCallback 0747  
  __size_of_bsp_TimerInterruptISRCallback 00CC             _bsp_TimerInterruptISRCallback 067B  
                                 __ptext1 0D07                                   __ptext2 0C60  
                                 __ptext3 0CB5                                   __ptext4 0BC7  
                                 __ptext5 0C9E                                   __ptext6 0BC1  
                                 __ptext7 0C72                                   __ptext8 0BBB  
                                 __ptext9 0D67                                   __unlock 0BEE  
                              ??__fassert 0073            ??_TMR1_DefaultInterruptHandler 0070  
                               _T1CONbits 0018                     _OSCILLATOR_Initialize 0BE7  
                               _T3CONbits 0495         __size_of_TMR1_SetInterruptHandler 0006  
                ??_PIN_MANAGER_Initialize 0073                 ?_TMR1_SetInterruptHandler 0073  
                 _INT_SetInterruptHandler 0BB5                __size_of_SYSTEM_Initialize 0012  
                                 clrloop0 0BCE                              ??_Data_Toseg 0035  
                    end_of_initialization 0065                          ?_TMR3_WriteTimer 0070  
                                 init_ram 0BD3                                   memset@c 0020  
                                 memset@n 0022                                   memset@p 0074  
                                 initloop 0BD4                      __end_of_INT_CallBack 0DD8  
                         ___lldiv@divisor 0028                           ___lldiv@counter 0034  
                           ??_FLASH_erase 0075                             ??_FLASH_write 0073  
                      __end_of_Data_Toseg 0529                  _TMR0_SetInterruptHandler 0BBB  
                               _PORTAbits 000C                  _TMR3_SetInterruptHandler 0BC7  
                        __CFG_FOSC$INTOSC 0000                   __end_of_bsp_CounterInit 0D24  
                           ??_LCDSendData 0020                               _gTimer3Flag 005C  
                       __size_of_TMR0_ISR 0007                         __size_of_TMR1_ISR 000C  
                       __size_of_TMR3_ISR 000C                         _HEFLASH_checkData 0069  
                  ?_OSCILLATOR_Initialize 0070                            __end_of_memset 0D07  
               ??_INT_SetInterruptHandler 0075                     HEFLASH_writeBlock@add 002A  
                     __end_of_FLASH_erase 0C9E                        ?_HEFLASH_checkData 0070  
                     start_initialization 0039                       __end_of_FLASH_write 0DFF  
          ?_bsp_TimerInterruptISRCallback 0070                  __size_of_TMR0_Initialize 0015  
         __size_of_PIN_MANAGER_Initialize 0024                       ??_HEFLASH_checkData 0035  
                         ___llmod@divisor 0020                           ___llmod@counter 0074  
                __size_of_PIN_MANAGER_IOC 0001              ?_INT_DefaultInterruptHandler 0070  
                           _clearDataOk_1 0132                             _clearDataOk_2 00B0  
                       _HEFLASH_readBlock 0E61                  __size_of_TMR1_Initialize 0017  
                      ?_HEFLASH_readBlock 0020                    __size_of_TMR0_CallBack 001C  
               __end_of_HEFLASH_checkData 0306                               __pdataBANK1 00A0  
                             __pdataBANK2 0120                                  ??_memset 0073  
              __end_of_EXT_INT_Initialize 0C0D                    __size_of_TMR1_CallBack 000B  
                   _gTimer0NormalFalshCnt 0079                                 _gExitFlag 0076  
                     ??_HEFLASH_readBlock 0022                                  ?_LCDInit 0070  
                             __pbssCOMMON 0076                       __end_of_LCDSendData 07FC  
                               ___latbits 0002                         __size_of__fassert 0007  
                                ?_INT_ISR 0070                             __pcstackBANK0 0020  
                  __size_of_TMR3_CallBack 000E                     __size_of_INT_CallBack 0027  
                   _TMR0_InterruptHandler 0066                                 __pnvBANK0 005E  
                               __pnvBANK1 00E6                 __end_of_HEFLASH_readBlock 0E99  
                        ?_bsp_CounterInit 0070                          ___lwdiv@dividend 0026  
                  _PIN_MANAGER_Initialize 0D67                    HEFLASH_readBlock@count 0021  
           ??_INT_DefaultInterruptHandler 0070                  __size_of_TMR3_Initialize 001A  
        __end_of_TMR1_SetInterruptHandler 0BC7                                  ?___lldiv 0028  
                                ?___llmod 0020                                  ?___lwdiv 0024  
                                ?___lwmod 0020                               _FLASH_erase 0C87  
                             _FLASH_write 0DD8              ??_INTERRUPT_InterruptManager 0072  
                                ?__unlock 0070                              _INT_CallBack 0DB1  
                          __size_of_Print 0022                          ___lwdiv@quotient 0029  
                           _TMR0_CallBack 0CCF                             _gBoxCntStruct 0042  
                           _TMR1_CallBack 0BF7                         ??_TMR0_Initialize 0075  
                                _LATAbits 010C                                  _LATBbits 010D  
                                _LATCbits 010E               __size_of_HEFLASH_writeBlock 0058  
                               clear_ram0 0BCD                                  _PIE1bits 0090  
                                _PIE5bits 0094                  __size_of_TMR1_WriteTimer 000F  
     __size_of_INTERRUPT_InterruptManager 0033                ??_TMR0_SetInterruptHandler 0075  
                                _PIR1bits 0010                ??_TMR3_SetInterruptHandler 0075  
                           _TMR3_CallBack 0C25                                  _PIR5bits 0014  
                         FLASH_erase@temp 0075                      __CFG_WDTCPS$WDTCPS1F 0000  
                                _TMR0_ISR 0BD9                                  _TMR1_ISR 0C0D  
                                _TMR3_ISR 0C19                __size_of_HEFLASH_checkData 029D  
                       ??_PIN_MANAGER_IOC 0070                             _HEFBufferData 00C6  
                             _LCDSendData 0747                         ??_TMR1_Initialize 0075  
    __size_of_INT_DefaultInterruptHandler 0001                          __size_of_LCDInit 0079  
                        __size_of_INT_ISR 0004                            ?_TMR0_CallBack 0070  
                          ?_TMR1_CallBack 0070                __size_of_HEFLASH_readBlock 0038  
                          ?_TMR3_CallBack 0070                  __size_of_TMR3_WriteTimer 000F  
                                Print@str 0022                          FLASH_write@latch 0024  
                 ??_OSCILLATOR_Initialize 0073                          __size_of___lldiv 0053  
                        __size_of___llmod 0043                          __size_of___lwdiv 0035  
                        __size_of___lwmod 002D                         ??_TMR3_Initialize 0075  
                _TMR1_SetInterruptHandler 0BC1                                  __fassert 0BE0  
                   _TMR1_InterruptHandler 0062                          __size_of__unlock 0009  
                         ___lwdiv@divisor 0024                           ___lwdiv@counter 0028  
                                __ptext10 0BE7                                  __ptext11 0C02  
                                __ptext20 0C51                                  __ptext12 0BB5  
                                __ptext21 0306                                  __ptext13 0D45  
                              _T1GCONbits 0019                                  __ptext22 0DFF  
                                __ptext14 0F87                                  __ptext31 0C19  
                                __ptext23 0E2C                                  __ptext15 0747  
                                __ptext40 0BD9                                  __ptext32 0C42  
                                __ptext24 0E99                                  __ptext16 0069  
                                __ptext41 0CCF                                  __ptext33 0C25  
                                __ptext25 0EDC                                  __ptext17 0CEB  
                                __ptext42 0BB3                                  __ptext34 067B  
                                __ptext26 0F2F                                  __ptext18 0BE0  
                                __ptext43 0BB2                                  __ptext35 0003  
                                __ptext27 0DD8                                  __ptext19 0E61  
                                __ptext44 07FC                                  __ptext36 0C0D  
                                __ptext28 0C87                                  __ptext45 0DB1  
                                __ptext37 0C33                                  __ptext29 0BEE  
                                __ptext46 0BB1                                  __ptext38 0BF7  
                                __ptext39 0BB4                                _FLASH_read 0C51  
                      FLASH_erase@address 0073                                _T3GCONbits 0496  
                 TMR3_WriteTimer@timerVal 0070                        HEFLASH_checkData@r 003E  
                           __size_of_main 0152      __end_of_TMR0_DefaultInterruptHandler 0BB4  
   __size_of_TMR0_DefaultInterruptHandler 0001              _TMR0_DefaultInterruptHandler 0BB3  
         ??_bsp_TimerInterruptISRCallback 0070                      __CFG_WDTCWS$WDTCWSSW 0000  
                                int$flags 007E        __end_of_INTERRUPT_InterruptManager 0037  
              _INTERRUPT_InterruptManager 0004                         ??_TMR1_WriteTimer 0072  
    __end_of_TMR3_DefaultInterruptHandler 0004     __size_of_TMR3_DefaultInterruptHandler 0001  
            _TMR3_DefaultInterruptHandler 0003                                _INTCONbits 000B  
                         ??_TMR0_CallBack 0070                      _INT_InterruptHandler 00E6  
                         FLASH_write@data 0022                                  memset@p1 0075  
                         FLASH_write@temp 0073                           ??_TMR1_CallBack 0070  
                      _EXT_INT_Initialize 0C02                                  intlevel1 0000  
                              _PMCON1bits 0195                          ___lwmod@dividend 0022  
                        ___lldiv@dividend 002C                   ?_PIN_MANAGER_Initialize 0070  
                         ??_TMR3_CallBack 0070                         __CFG_CLKOUTEN$OFF 0000  
                     ?_EXT_INT_Initialize 0070             ?_TMR0_DefaultInterruptHandler 0070  
                            ?_FLASH_erase 0073                  ?_INT_SetInterruptHandler 0073  
                            ?_FLASH_write 0020                         ??_TMR3_WriteTimer 0072  
                           __pstringtext1 1000                             __pstringtext2 1007  
                           __pstringtext3 0000                      ??_EXT_INT_Initialize 0075  
                              _OPTION_REG 0095             ?_TMR3_DefaultInterruptHandler 0070  
                          _display_data_1 00A0                            _display_data_2 00BB  
                        ___lldiv@quotient 0030                           ___lwmod@divisor 0020  
                         _TMR0_Initialize 0C72                           ___lwmod@counter 0074  
                        LCDSendData@value 0075                               ?_FLASH_read 0073  
          __end_of_PIN_MANAGER_Initialize 0D8B                           _PIN_MANAGER_IOC 0BB2  
                         _TMR1_Initialize 0C9E  
