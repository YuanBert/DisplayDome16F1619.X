

Microchip Technology PIC LITE Macro Assembler V1.45 build -152302408 
                                                                                               Fri Apr 13 09:40:16 2018

Microchip Technology Omniscient Code Generator v1.45 (Free mode) build 201711160504
     1                           	processor	16F1619
     2                           	opt	pw 120
     3                           	opt	lm
     4                           	psect	idataBANK1,global,class=CODE,delta=2
     5                           	psect	idataBANK2,global,class=CODE,delta=2
     6                           	psect	nvBANK0,global,class=BANK0,space=1,delta=1
     7                           	psect	nvBANK1,global,class=BANK1,space=1,delta=1
     8                           	psect	stringtext1,global,class=STRCODE,delta=2
     9                           	psect	stringtext2,global,class=STRCODE,delta=2
    10                           	psect	stringtext3,global,class=STRCODE,delta=2
    11                           	psect	cinit,global,class=CODE,merge=1,delta=2
    12                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
    13                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1
    15                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1
    16                           	psect	dataBANK2,global,class=BANK2,space=1,delta=1
    17                           	psect	inittext,global,class=CODE,delta=2
    18                           	psect	clrtext,global,class=CODE,delta=2
    19                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    20                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    21                           	psect	maintext,global,class=CODE,merge=1,split=1,delta=2
    22                           	psect	text1,local,class=CODE,merge=1,delta=2
    23                           	psect	text2,local,class=CODE,merge=1,delta=2
    24                           	psect	text3,local,class=CODE,merge=1,delta=2
    25                           	psect	text4,local,class=CODE,merge=1,delta=2
    26                           	psect	text5,local,class=CODE,merge=1,delta=2
    27                           	psect	text6,local,class=CODE,merge=1,delta=2
    28                           	psect	text7,local,class=CODE,merge=1,delta=2
    29                           	psect	text8,local,class=CODE,merge=1,delta=2
    30                           	psect	text9,local,class=CODE,merge=1,delta=2
    31                           	psect	text10,local,class=CODE,merge=1,delta=2
    32                           	psect	text11,local,class=CODE,merge=1,delta=2
    33                           	psect	text12,local,class=CODE,merge=1,delta=2
    34                           	psect	text13,local,class=CODE,merge=1,delta=2
    35                           	psect	text14,local,class=CODE,merge=1,delta=2
    36                           	psect	text15,local,class=CODE,merge=1,delta=2
    37                           	psect	text16,local,class=CODE,merge=1,delta=2
    38                           	psect	text17,local,class=CODE,merge=1,delta=2,group=1
    39                           	psect	text18,local,class=CODE,merge=1,delta=2
    40                           	psect	text19,local,class=CODE,merge=1,delta=2
    41                           	psect	text20,local,class=CODE,merge=1,delta=2
    42                           	psect	text21,local,class=CODE,merge=1,delta=2
    43                           	psect	text22,local,class=CODE,merge=1,delta=2,group=1
    44                           	psect	text23,local,class=CODE,merge=1,delta=2,group=1
    45                           	psect	text24,local,class=CODE,merge=1,delta=2,group=1
    46                           	psect	text25,local,class=CODE,merge=1,delta=2,group=1
    47                           	psect	text26,local,class=CODE,merge=1,delta=2
    48                           	psect	text27,local,class=CODE,merge=1,delta=2
    49                           	psect	text28,local,class=CODE,merge=1,delta=2
    50                           	psect	text29,local,class=CODE,merge=1,delta=2
    51                           	psect	intentry,global,class=CODE,delta=2
    52                           	psect	text31,local,class=CODE,merge=1,delta=2
    53                           	psect	text32,local,class=CODE,merge=1,delta=2
    54                           	psect	text33,local,class=CODE,merge=1,delta=2
    55                           	psect	text34,local,class=CODE,merge=1,delta=2
    56                           	psect	text35,local,class=CODE,merge=1,delta=2
    57                           	psect	text36,local,class=CODE,merge=1,delta=2
    58                           	psect	text37,local,class=CODE,merge=1,delta=2
    59                           	psect	text38,local,class=CODE,merge=1,delta=2
    60                           	psect	text39,local,class=CODE,merge=1,delta=2
    61                           	psect	text40,local,class=CODE,merge=1,delta=2
    62                           	psect	text41,local,class=CODE,merge=1,delta=2
    63                           	psect	text42,local,class=CODE,merge=1,delta=2
    64                           	psect	text43,local,class=CODE,merge=1,delta=2
    65                           	psect	text44,local,class=CODE,merge=1,delta=2
    66                           	psect	text45,local,class=CODE,merge=1,delta=2
    67                           	psect	text46,local,class=CODE,merge=1,delta=2
    68                           	dabs	1,0x7E,2
    69  0000                     
    70                           ; Version 1.45
    71                           ; Generated 16/11/2017 GMT
    72                           ; 
    73                           ; Copyright Â© 2017, Microchip Technology Inc. and its subsidiaries ("Microchip")
    74                           ; All rights reserved.
    75                           ; 
    76                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    77                           ; 
    78                           ; Redistribution and use in source and binary forms, with or without modification, are
    79                           ; permitted provided that the following conditions are met:
    80                           ; 
    81                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    82                           ;        conditions and the following disclaimer.
    83                           ; 
    84                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    85                           ;        of conditions and the following disclaimer in the documentation and/or other
    86                           ;        materials provided with the distribution.
    87                           ; 
    88                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    89                           ;        software without specific prior written permission.
    90                           ; 
    91                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    92                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    93                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    94                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    95                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    96                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    97                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    98                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    99                           ; 
   100                           ; 
   101                           ; Code-generator required, PIC16F1619 Definitions
   102                           ; 
   103                           ; SFR Addresses
   104  0000                     	;# 
   105  0001                     	;# 
   106  0002                     	;# 
   107  0003                     	;# 
   108  0004                     	;# 
   109  0005                     	;# 
   110  0006                     	;# 
   111  0007                     	;# 
   112  0008                     	;# 
   113  0009                     	;# 
   114  000A                     	;# 
   115  000B                     	;# 
   116  000C                     	;# 
   117  000D                     	;# 
   118  000E                     	;# 
   119  0010                     	;# 
   120  0011                     	;# 
   121  0012                     	;# 
   122  0013                     	;# 
   123  0014                     	;# 
   124  0015                     	;# 
   125  0016                     	;# 
   126  0016                     	;# 
   127  0017                     	;# 
   128  0018                     	;# 
   129  0019                     	;# 
   130  001A                     	;# 
   131  001A                     	;# 
   132  001B                     	;# 
   133  001B                     	;# 
   134  001C                     	;# 
   135  001D                     	;# 
   136  001E                     	;# 
   137  001F                     	;# 
   138  008C                     	;# 
   139  008D                     	;# 
   140  008E                     	;# 
   141  0090                     	;# 
   142  0091                     	;# 
   143  0092                     	;# 
   144  0093                     	;# 
   145  0094                     	;# 
   146  0095                     	;# 
   147  0096                     	;# 
   148  0098                     	;# 
   149  0099                     	;# 
   150  009A                     	;# 
   151  009B                     	;# 
   152  009B                     	;# 
   153  009C                     	;# 
   154  009D                     	;# 
   155  009E                     	;# 
   156  009F                     	;# 
   157  010C                     	;# 
   158  010D                     	;# 
   159  010E                     	;# 
   160  0111                     	;# 
   161  0112                     	;# 
   162  0113                     	;# 
   163  0114                     	;# 
   164  0115                     	;# 
   165  0116                     	;# 
   166  0117                     	;# 
   167  0118                     	;# 
   168  0119                     	;# 
   169  011C                     	;# 
   170  018C                     	;# 
   171  018D                     	;# 
   172  018E                     	;# 
   173  0191                     	;# 
   174  0191                     	;# 
   175  0192                     	;# 
   176  0193                     	;# 
   177  0193                     	;# 
   178  0194                     	;# 
   179  0195                     	;# 
   180  0196                     	;# 
   181  0197                     	;# 
   182  0199                     	;# 
   183  0199                     	;# 
   184  0199                     	;# 
   185  019A                     	;# 
   186  019A                     	;# 
   187  019A                     	;# 
   188  019B                     	;# 
   189  019B                     	;# 
   190  019B                     	;# 
   191  019B                     	;# 
   192  019B                     	;# 
   193  019C                     	;# 
   194  019C                     	;# 
   195  019C                     	;# 
   196  019D                     	;# 
   197  019D                     	;# 
   198  019D                     	;# 
   199  019E                     	;# 
   200  019E                     	;# 
   201  019E                     	;# 
   202  019F                     	;# 
   203  019F                     	;# 
   204  019F                     	;# 
   205  019F                     	;# 
   206  019F                     	;# 
   207  020C                     	;# 
   208  020D                     	;# 
   209  020E                     	;# 
   210  0211                     	;# 
   211  0211                     	;# 
   212  0212                     	;# 
   213  0212                     	;# 
   214  0213                     	;# 
   215  0213                     	;# 
   216  0214                     	;# 
   217  0214                     	;# 
   218  0215                     	;# 
   219  0215                     	;# 
   220  0215                     	;# 
   221  0215                     	;# 
   222  0216                     	;# 
   223  0216                     	;# 
   224  0217                     	;# 
   225  0217                     	;# 
   226  028C                     	;# 
   227  028D                     	;# 
   228  028E                     	;# 
   229  0291                     	;# 
   230  0291                     	;# 
   231  0292                     	;# 
   232  0293                     	;# 
   233  0294                     	;# 
   234  0298                     	;# 
   235  0298                     	;# 
   236  0299                     	;# 
   237  029A                     	;# 
   238  029B                     	;# 
   239  029E                     	;# 
   240  030C                     	;# 
   241  030D                     	;# 
   242  030E                     	;# 
   243  038C                     	;# 
   244  038D                     	;# 
   245  038E                     	;# 
   246  0391                     	;# 
   247  0392                     	;# 
   248  0393                     	;# 
   249  0394                     	;# 
   250  0395                     	;# 
   251  0396                     	;# 
   252  0397                     	;# 
   253  0398                     	;# 
   254  0399                     	;# 
   255  040E                     	;# 
   256  0413                     	;# 
   257  0413                     	;# 
   258  0414                     	;# 
   259  0414                     	;# 
   260  0415                     	;# 
   261  0416                     	;# 
   262  0417                     	;# 
   263  0418                     	;# 
   264  041A                     	;# 
   265  041A                     	;# 
   266  041B                     	;# 
   267  041B                     	;# 
   268  041C                     	;# 
   269  041D                     	;# 
   270  041E                     	;# 
   271  041F                     	;# 
   272  0493                     	;# 
   273  0494                     	;# 
   274  0495                     	;# 
   275  0496                     	;# 
   276  049A                     	;# 
   277  049B                     	;# 
   278  049C                     	;# 
   279  049D                     	;# 
   280  058C                     	;# 
   281  058C                     	;# 
   282  058D                     	;# 
   283  058E                     	;# 
   284  058E                     	;# 
   285  058F                     	;# 
   286  0590                     	;# 
   287  0590                     	;# 
   288  0591                     	;# 
   289  0592                     	;# 
   290  0592                     	;# 
   291  0593                     	;# 
   292  0594                     	;# 
   293  0594                     	;# 
   294  0595                     	;# 
   295  0596                     	;# 
   296  0596                     	;# 
   297  0597                     	;# 
   298  0598                     	;# 
   299  0599                     	;# 
   300  059A                     	;# 
   301  059B                     	;# 
   302  059B                     	;# 
   303  059C                     	;# 
   304  059D                     	;# 
   305  060C                     	;# 
   306  060C                     	;# 
   307  060D                     	;# 
   308  060E                     	;# 
   309  060F                     	;# 
   310  060F                     	;# 
   311  0610                     	;# 
   312  0611                     	;# 
   313  0612                     	;# 
   314  0613                     	;# 
   315  0614                     	;# 
   316  0617                     	;# 
   317  0618                     	;# 
   318  0619                     	;# 
   319  061A                     	;# 
   320  061B                     	;# 
   321  061C                     	;# 
   322  0691                     	;# 
   323  0692                     	;# 
   324  0693                     	;# 
   325  0694                     	;# 
   326  0695                     	;# 
   327  0696                     	;# 
   328  0697                     	;# 
   329  0699                     	;# 
   330  069A                     	;# 
   331  0711                     	;# 
   332  0712                     	;# 
   333  0713                     	;# 
   334  0714                     	;# 
   335  0715                     	;# 
   336  0718                     	;# 
   337  0718                     	;# 
   338  0719                     	;# 
   339  071A                     	;# 
   340  071A                     	;# 
   341  071B                     	;# 
   342  071C                     	;# 
   343  071D                     	;# 
   344  0791                     	;# 
   345  0791                     	;# 
   346  0792                     	;# 
   347  0793                     	;# 
   348  0793                     	;# 
   349  0794                     	;# 
   350  0795                     	;# 
   351  0795                     	;# 
   352  0796                     	;# 
   353  0797                     	;# 
   354  0797                     	;# 
   355  0798                     	;# 
   356  0799                     	;# 
   357  079A                     	;# 
   358  080C                     	;# 
   359  080C                     	;# 
   360  080D                     	;# 
   361  080E                     	;# 
   362  080E                     	;# 
   363  080F                     	;# 
   364  0810                     	;# 
   365  0810                     	;# 
   366  0811                     	;# 
   367  0812                     	;# 
   368  0812                     	;# 
   369  0813                     	;# 
   370  0814                     	;# 
   371  0815                     	;# 
   372  0816                     	;# 
   373  0817                     	;# 
   374  0818                     	;# 
   375  0819                     	;# 
   376  081A                     	;# 
   377  081A                     	;# 
   378  081B                     	;# 
   379  081C                     	;# 
   380  081C                     	;# 
   381  081D                     	;# 
   382  088C                     	;# 
   383  088D                     	;# 
   384  088E                     	;# 
   385  088F                     	;# 
   386  088F                     	;# 
   387  0890                     	;# 
   388  0891                     	;# 
   389  0892                     	;# 
   390  0893                     	;# 
   391  0893                     	;# 
   392  0894                     	;# 
   393  0895                     	;# 
   394  0896                     	;# 
   395  0897                     	;# 
   396  0897                     	;# 
   397  0898                     	;# 
   398  0899                     	;# 
   399  0D8C                     	;# 
   400  0D8C                     	;# 
   401  0D8D                     	;# 
   402  0D8E                     	;# 
   403  0D8F                     	;# 
   404  0D8F                     	;# 
   405  0D90                     	;# 
   406  0D91                     	;# 
   407  0D92                     	;# 
   408  0D92                     	;# 
   409  0D93                     	;# 
   410  0D94                     	;# 
   411  0D95                     	;# 
   412  0D95                     	;# 
   413  0D96                     	;# 
   414  0D97                     	;# 
   415  0D98                     	;# 
   416  0D99                     	;# 
   417  0D9A                     	;# 
   418  0D9B                     	;# 
   419  0D9C                     	;# 
   420  0D9D                     	;# 
   421  0D9E                     	;# 
   422  0D9E                     	;# 
   423  0D9F                     	;# 
   424  0DA0                     	;# 
   425  0DA1                     	;# 
   426  0DA1                     	;# 
   427  0DA2                     	;# 
   428  0DA3                     	;# 
   429  0DA4                     	;# 
   430  0DA4                     	;# 
   431  0DA5                     	;# 
   432  0DA6                     	;# 
   433  0DA7                     	;# 
   434  0DA7                     	;# 
   435  0DA8                     	;# 
   436  0DA9                     	;# 
   437  0DAA                     	;# 
   438  0DAB                     	;# 
   439  0DAC                     	;# 
   440  0DAD                     	;# 
   441  0DAE                     	;# 
   442  0DAF                     	;# 
   443  0E0F                     	;# 
   444  0E10                     	;# 
   445  0E11                     	;# 
   446  0E12                     	;# 
   447  0E13                     	;# 
   448  0E14                     	;# 
   449  0E15                     	;# 
   450  0E16                     	;# 
   451  0E17                     	;# 
   452  0E18                     	;# 
   453  0E19                     	;# 
   454  0E1A                     	;# 
   455  0E1B                     	;# 
   456  0E1C                     	;# 
   457  0E1D                     	;# 
   458  0E1E                     	;# 
   459  0E1F                     	;# 
   460  0E20                     	;# 
   461  0E21                     	;# 
   462  0E22                     	;# 
   463  0E23                     	;# 
   464  0E24                     	;# 
   465  0E25                     	;# 
   466  0E26                     	;# 
   467  0E27                     	;# 
   468  0E28                     	;# 
   469  0E29                     	;# 
   470  0E2A                     	;# 
   471  0E2B                     	;# 
   472  0E2C                     	;# 
   473  0E2D                     	;# 
   474  0E2E                     	;# 
   475  0E90                     	;# 
   476  0E91                     	;# 
   477  0E92                     	;# 
   478  0E94                     	;# 
   479  0E95                     	;# 
   480  0E9C                     	;# 
   481  0E9D                     	;# 
   482  0E9E                     	;# 
   483  0E9F                     	;# 
   484  0EA0                     	;# 
   485  0EA1                     	;# 
   486  0EA2                     	;# 
   487  0EA3                     	;# 
   488  0EA4                     	;# 
   489  0EA5                     	;# 
   490  0EA6                     	;# 
   491  0EA7                     	;# 
   492  0F0F                     	;# 
   493  0F10                     	;# 
   494  0F11                     	;# 
   495  0F12                     	;# 
   496  0F13                     	;# 
   497  0F14                     	;# 
   498  0F15                     	;# 
   499  0F16                     	;# 
   500  0F17                     	;# 
   501  0F18                     	;# 
   502  0F19                     	;# 
   503  0F1A                     	;# 
   504  0F1B                     	;# 
   505  0F1C                     	;# 
   506  0F1D                     	;# 
   507  0F1E                     	;# 
   508  0F1F                     	;# 
   509  0F20                     	;# 
   510  0F21                     	;# 
   511  0F22                     	;# 
   512  0F23                     	;# 
   513  0F24                     	;# 
   514  0F25                     	;# 
   515  0F26                     	;# 
   516  0F27                     	;# 
   517  0F28                     	;# 
   518  0F29                     	;# 
   519  0F2A                     	;# 
   520  0F2B                     	;# 
   521  0F2C                     	;# 
   522  0F2D                     	;# 
   523  0F2E                     	;# 
   524  0F2F                     	;# 
   525  0F30                     	;# 
   526  0F31                     	;# 
   527  0F32                     	;# 
   528  0F33                     	;# 
   529  0F34                     	;# 
   530  0F35                     	;# 
   531  0F36                     	;# 
   532  0F37                     	;# 
   533  0FE4                     	;# 
   534  0FE5                     	;# 
   535  0FE6                     	;# 
   536  0FE7                     	;# 
   537  0FE8                     	;# 
   538  0FE9                     	;# 
   539  0FEA                     	;# 
   540  0FEB                     	;# 
   541  0FED                     	;# 
   542  0FEE                     	;# 
   543  0FEF                     	;# 
   544  0000                     	;# 
   545  0001                     	;# 
   546  0002                     	;# 
   547  0003                     	;# 
   548  0004                     	;# 
   549  0005                     	;# 
   550  0006                     	;# 
   551  0007                     	;# 
   552  0008                     	;# 
   553  0009                     	;# 
   554  000A                     	;# 
   555  000B                     	;# 
   556  000C                     	;# 
   557  000D                     	;# 
   558  000E                     	;# 
   559  0010                     	;# 
   560  0011                     	;# 
   561  0012                     	;# 
   562  0013                     	;# 
   563  0014                     	;# 
   564  0015                     	;# 
   565  0016                     	;# 
   566  0016                     	;# 
   567  0017                     	;# 
   568  0018                     	;# 
   569  0019                     	;# 
   570  001A                     	;# 
   571  001A                     	;# 
   572  001B                     	;# 
   573  001B                     	;# 
   574  001C                     	;# 
   575  001D                     	;# 
   576  001E                     	;# 
   577  001F                     	;# 
   578  008C                     	;# 
   579  008D                     	;# 
   580  008E                     	;# 
   581  0090                     	;# 
   582  0091                     	;# 
   583  0092                     	;# 
   584  0093                     	;# 
   585  0094                     	;# 
   586  0095                     	;# 
   587  0096                     	;# 
   588  0098                     	;# 
   589  0099                     	;# 
   590  009A                     	;# 
   591  009B                     	;# 
   592  009B                     	;# 
   593  009C                     	;# 
   594  009D                     	;# 
   595  009E                     	;# 
   596  009F                     	;# 
   597  010C                     	;# 
   598  010D                     	;# 
   599  010E                     	;# 
   600  0111                     	;# 
   601  0112                     	;# 
   602  0113                     	;# 
   603  0114                     	;# 
   604  0115                     	;# 
   605  0116                     	;# 
   606  0117                     	;# 
   607  0118                     	;# 
   608  0119                     	;# 
   609  011C                     	;# 
   610  018C                     	;# 
   611  018D                     	;# 
   612  018E                     	;# 
   613  0191                     	;# 
   614  0191                     	;# 
   615  0192                     	;# 
   616  0193                     	;# 
   617  0193                     	;# 
   618  0194                     	;# 
   619  0195                     	;# 
   620  0196                     	;# 
   621  0197                     	;# 
   622  0199                     	;# 
   623  0199                     	;# 
   624  0199                     	;# 
   625  019A                     	;# 
   626  019A                     	;# 
   627  019A                     	;# 
   628  019B                     	;# 
   629  019B                     	;# 
   630  019B                     	;# 
   631  019B                     	;# 
   632  019B                     	;# 
   633  019C                     	;# 
   634  019C                     	;# 
   635  019C                     	;# 
   636  019D                     	;# 
   637  019D                     	;# 
   638  019D                     	;# 
   639  019E                     	;# 
   640  019E                     	;# 
   641  019E                     	;# 
   642  019F                     	;# 
   643  019F                     	;# 
   644  019F                     	;# 
   645  019F                     	;# 
   646  019F                     	;# 
   647  020C                     	;# 
   648  020D                     	;# 
   649  020E                     	;# 
   650  0211                     	;# 
   651  0211                     	;# 
   652  0212                     	;# 
   653  0212                     	;# 
   654  0213                     	;# 
   655  0213                     	;# 
   656  0214                     	;# 
   657  0214                     	;# 
   658  0215                     	;# 
   659  0215                     	;# 
   660  0215                     	;# 
   661  0215                     	;# 
   662  0216                     	;# 
   663  0216                     	;# 
   664  0217                     	;# 
   665  0217                     	;# 
   666  028C                     	;# 
   667  028D                     	;# 
   668  028E                     	;# 
   669  0291                     	;# 
   670  0291                     	;# 
   671  0292                     	;# 
   672  0293                     	;# 
   673  0294                     	;# 
   674  0298                     	;# 
   675  0298                     	;# 
   676  0299                     	;# 
   677  029A                     	;# 
   678  029B                     	;# 
   679  029E                     	;# 
   680  030C                     	;# 
   681  030D                     	;# 
   682  030E                     	;# 
   683  038C                     	;# 
   684  038D                     	;# 
   685  038E                     	;# 
   686  0391                     	;# 
   687  0392                     	;# 
   688  0393                     	;# 
   689  0394                     	;# 
   690  0395                     	;# 
   691  0396                     	;# 
   692  0397                     	;# 
   693  0398                     	;# 
   694  0399                     	;# 
   695  040E                     	;# 
   696  0413                     	;# 
   697  0413                     	;# 
   698  0414                     	;# 
   699  0414                     	;# 
   700  0415                     	;# 
   701  0416                     	;# 
   702  0417                     	;# 
   703  0418                     	;# 
   704  041A                     	;# 
   705  041A                     	;# 
   706  041B                     	;# 
   707  041B                     	;# 
   708  041C                     	;# 
   709  041D                     	;# 
   710  041E                     	;# 
   711  041F                     	;# 
   712  0493                     	;# 
   713  0494                     	;# 
   714  0495                     	;# 
   715  0496                     	;# 
   716  049A                     	;# 
   717  049B                     	;# 
   718  049C                     	;# 
   719  049D                     	;# 
   720  058C                     	;# 
   721  058C                     	;# 
   722  058D                     	;# 
   723  058E                     	;# 
   724  058E                     	;# 
   725  058F                     	;# 
   726  0590                     	;# 
   727  0590                     	;# 
   728  0591                     	;# 
   729  0592                     	;# 
   730  0592                     	;# 
   731  0593                     	;# 
   732  0594                     	;# 
   733  0594                     	;# 
   734  0595                     	;# 
   735  0596                     	;# 
   736  0596                     	;# 
   737  0597                     	;# 
   738  0598                     	;# 
   739  0599                     	;# 
   740  059A                     	;# 
   741  059B                     	;# 
   742  059B                     	;# 
   743  059C                     	;# 
   744  059D                     	;# 
   745  060C                     	;# 
   746  060C                     	;# 
   747  060D                     	;# 
   748  060E                     	;# 
   749  060F                     	;# 
   750  060F                     	;# 
   751  0610                     	;# 
   752  0611                     	;# 
   753  0612                     	;# 
   754  0613                     	;# 
   755  0614                     	;# 
   756  0617                     	;# 
   757  0618                     	;# 
   758  0619                     	;# 
   759  061A                     	;# 
   760  061B                     	;# 
   761  061C                     	;# 
   762  0691                     	;# 
   763  0692                     	;# 
   764  0693                     	;# 
   765  0694                     	;# 
   766  0695                     	;# 
   767  0696                     	;# 
   768  0697                     	;# 
   769  0699                     	;# 
   770  069A                     	;# 
   771  0711                     	;# 
   772  0712                     	;# 
   773  0713                     	;# 
   774  0714                     	;# 
   775  0715                     	;# 
   776  0718                     	;# 
   777  0718                     	;# 
   778  0719                     	;# 
   779  071A                     	;# 
   780  071A                     	;# 
   781  071B                     	;# 
   782  071C                     	;# 
   783  071D                     	;# 
   784  0791                     	;# 
   785  0791                     	;# 
   786  0792                     	;# 
   787  0793                     	;# 
   788  0793                     	;# 
   789  0794                     	;# 
   790  0795                     	;# 
   791  0795                     	;# 
   792  0796                     	;# 
   793  0797                     	;# 
   794  0797                     	;# 
   795  0798                     	;# 
   796  0799                     	;# 
   797  079A                     	;# 
   798  080C                     	;# 
   799  080C                     	;# 
   800  080D                     	;# 
   801  080E                     	;# 
   802  080E                     	;# 
   803  080F                     	;# 
   804  0810                     	;# 
   805  0810                     	;# 
   806  0811                     	;# 
   807  0812                     	;# 
   808  0812                     	;# 
   809  0813                     	;# 
   810  0814                     	;# 
   811  0815                     	;# 
   812  0816                     	;# 
   813  0817                     	;# 
   814  0818                     	;# 
   815  0819                     	;# 
   816  081A                     	;# 
   817  081A                     	;# 
   818  081B                     	;# 
   819  081C                     	;# 
   820  081C                     	;# 
   821  081D                     	;# 
   822  088C                     	;# 
   823  088D                     	;# 
   824  088E                     	;# 
   825  088F                     	;# 
   826  088F                     	;# 
   827  0890                     	;# 
   828  0891                     	;# 
   829  0892                     	;# 
   830  0893                     	;# 
   831  0893                     	;# 
   832  0894                     	;# 
   833  0895                     	;# 
   834  0896                     	;# 
   835  0897                     	;# 
   836  0897                     	;# 
   837  0898                     	;# 
   838  0899                     	;# 
   839  0D8C                     	;# 
   840  0D8C                     	;# 
   841  0D8D                     	;# 
   842  0D8E                     	;# 
   843  0D8F                     	;# 
   844  0D8F                     	;# 
   845  0D90                     	;# 
   846  0D91                     	;# 
   847  0D92                     	;# 
   848  0D92                     	;# 
   849  0D93                     	;# 
   850  0D94                     	;# 
   851  0D95                     	;# 
   852  0D95                     	;# 
   853  0D96                     	;# 
   854  0D97                     	;# 
   855  0D98                     	;# 
   856  0D99                     	;# 
   857  0D9A                     	;# 
   858  0D9B                     	;# 
   859  0D9C                     	;# 
   860  0D9D                     	;# 
   861  0D9E                     	;# 
   862  0D9E                     	;# 
   863  0D9F                     	;# 
   864  0DA0                     	;# 
   865  0DA1                     	;# 
   866  0DA1                     	;# 
   867  0DA2                     	;# 
   868  0DA3                     	;# 
   869  0DA4                     	;# 
   870  0DA4                     	;# 
   871  0DA5                     	;# 
   872  0DA6                     	;# 
   873  0DA7                     	;# 
   874  0DA7                     	;# 
   875  0DA8                     	;# 
   876  0DA9                     	;# 
   877  0DAA                     	;# 
   878  0DAB                     	;# 
   879  0DAC                     	;# 
   880  0DAD                     	;# 
   881  0DAE                     	;# 
   882  0DAF                     	;# 
   883  0E0F                     	;# 
   884  0E10                     	;# 
   885  0E11                     	;# 
   886  0E12                     	;# 
   887  0E13                     	;# 
   888  0E14                     	;# 
   889  0E15                     	;# 
   890  0E16                     	;# 
   891  0E17                     	;# 
   892  0E18                     	;# 
   893  0E19                     	;# 
   894  0E1A                     	;# 
   895  0E1B                     	;# 
   896  0E1C                     	;# 
   897  0E1D                     	;# 
   898  0E1E                     	;# 
   899  0E1F                     	;# 
   900  0E20                     	;# 
   901  0E21                     	;# 
   902  0E22                     	;# 
   903  0E23                     	;# 
   904  0E24                     	;# 
   905  0E25                     	;# 
   906  0E26                     	;# 
   907  0E27                     	;# 
   908  0E28                     	;# 
   909  0E29                     	;# 
   910  0E2A                     	;# 
   911  0E2B                     	;# 
   912  0E2C                     	;# 
   913  0E2D                     	;# 
   914  0E2E                     	;# 
   915  0E90                     	;# 
   916  0E91                     	;# 
   917  0E92                     	;# 
   918  0E94                     	;# 
   919  0E95                     	;# 
   920  0E9C                     	;# 
   921  0E9D                     	;# 
   922  0E9E                     	;# 
   923  0E9F                     	;# 
   924  0EA0                     	;# 
   925  0EA1                     	;# 
   926  0EA2                     	;# 
   927  0EA3                     	;# 
   928  0EA4                     	;# 
   929  0EA5                     	;# 
   930  0EA6                     	;# 
   931  0EA7                     	;# 
   932  0F0F                     	;# 
   933  0F10                     	;# 
   934  0F11                     	;# 
   935  0F12                     	;# 
   936  0F13                     	;# 
   937  0F14                     	;# 
   938  0F15                     	;# 
   939  0F16                     	;# 
   940  0F17                     	;# 
   941  0F18                     	;# 
   942  0F19                     	;# 
   943  0F1A                     	;# 
   944  0F1B                     	;# 
   945  0F1C                     	;# 
   946  0F1D                     	;# 
   947  0F1E                     	;# 
   948  0F1F                     	;# 
   949  0F20                     	;# 
   950  0F21                     	;# 
   951  0F22                     	;# 
   952  0F23                     	;# 
   953  0F24                     	;# 
   954  0F25                     	;# 
   955  0F26                     	;# 
   956  0F27                     	;# 
   957  0F28                     	;# 
   958  0F29                     	;# 
   959  0F2A                     	;# 
   960  0F2B                     	;# 
   961  0F2C                     	;# 
   962  0F2D                     	;# 
   963  0F2E                     	;# 
   964  0F2F                     	;# 
   965  0F30                     	;# 
   966  0F31                     	;# 
   967  0F32                     	;# 
   968  0F33                     	;# 
   969  0F34                     	;# 
   970  0F35                     	;# 
   971  0F36                     	;# 
   972  0F37                     	;# 
   973  0FE4                     	;# 
   974  0FE5                     	;# 
   975  0FE6                     	;# 
   976  0FE7                     	;# 
   977  0FE8                     	;# 
   978  0FE9                     	;# 
   979  0FEA                     	;# 
   980  0FEB                     	;# 
   981  0FED                     	;# 
   982  0FEE                     	;# 
   983  0FEF                     	;# 
   984  0000                     	;# 
   985  0001                     	;# 
   986  0002                     	;# 
   987  0003                     	;# 
   988  0004                     	;# 
   989  0005                     	;# 
   990  0006                     	;# 
   991  0007                     	;# 
   992  0008                     	;# 
   993  0009                     	;# 
   994  000A                     	;# 
   995  000B                     	;# 
   996  000C                     	;# 
   997  000D                     	;# 
   998  000E                     	;# 
   999  0010                     	;# 
  1000  0011                     	;# 
  1001  0012                     	;# 
  1002  0013                     	;# 
  1003  0014                     	;# 
  1004  0015                     	;# 
  1005  0016                     	;# 
  1006  0016                     	;# 
  1007  0017                     	;# 
  1008  0018                     	;# 
  1009  0019                     	;# 
  1010  001A                     	;# 
  1011  001A                     	;# 
  1012  001B                     	;# 
  1013  001B                     	;# 
  1014  001C                     	;# 
  1015  001D                     	;# 
  1016  001E                     	;# 
  1017  001F                     	;# 
  1018  008C                     	;# 
  1019  008D                     	;# 
  1020  008E                     	;# 
  1021  0090                     	;# 
  1022  0091                     	;# 
  1023  0092                     	;# 
  1024  0093                     	;# 
  1025  0094                     	;# 
  1026  0095                     	;# 
  1027  0096                     	;# 
  1028  0098                     	;# 
  1029  0099                     	;# 
  1030  009A                     	;# 
  1031  009B                     	;# 
  1032  009B                     	;# 
  1033  009C                     	;# 
  1034  009D                     	;# 
  1035  009E                     	;# 
  1036  009F                     	;# 
  1037  010C                     	;# 
  1038  010D                     	;# 
  1039  010E                     	;# 
  1040  0111                     	;# 
  1041  0112                     	;# 
  1042  0113                     	;# 
  1043  0114                     	;# 
  1044  0115                     	;# 
  1045  0116                     	;# 
  1046  0117                     	;# 
  1047  0118                     	;# 
  1048  0119                     	;# 
  1049  011C                     	;# 
  1050  018C                     	;# 
  1051  018D                     	;# 
  1052  018E                     	;# 
  1053  0191                     	;# 
  1054  0191                     	;# 
  1055  0192                     	;# 
  1056  0193                     	;# 
  1057  0193                     	;# 
  1058  0194                     	;# 
  1059  0195                     	;# 
  1060  0196                     	;# 
  1061  0197                     	;# 
  1062  0199                     	;# 
  1063  0199                     	;# 
  1064  0199                     	;# 
  1065  019A                     	;# 
  1066  019A                     	;# 
  1067  019A                     	;# 
  1068  019B                     	;# 
  1069  019B                     	;# 
  1070  019B                     	;# 
  1071  019B                     	;# 
  1072  019B                     	;# 
  1073  019C                     	;# 
  1074  019C                     	;# 
  1075  019C                     	;# 
  1076  019D                     	;# 
  1077  019D                     	;# 
  1078  019D                     	;# 
  1079  019E                     	;# 
  1080  019E                     	;# 
  1081  019E                     	;# 
  1082  019F                     	;# 
  1083  019F                     	;# 
  1084  019F                     	;# 
  1085  019F                     	;# 
  1086  019F                     	;# 
  1087  020C                     	;# 
  1088  020D                     	;# 
  1089  020E                     	;# 
  1090  0211                     	;# 
  1091  0211                     	;# 
  1092  0212                     	;# 
  1093  0212                     	;# 
  1094  0213                     	;# 
  1095  0213                     	;# 
  1096  0214                     	;# 
  1097  0214                     	;# 
  1098  0215                     	;# 
  1099  0215                     	;# 
  1100  0215                     	;# 
  1101  0215                     	;# 
  1102  0216                     	;# 
  1103  0216                     	;# 
  1104  0217                     	;# 
  1105  0217                     	;# 
  1106  028C                     	;# 
  1107  028D                     	;# 
  1108  028E                     	;# 
  1109  0291                     	;# 
  1110  0291                     	;# 
  1111  0292                     	;# 
  1112  0293                     	;# 
  1113  0294                     	;# 
  1114  0298                     	;# 
  1115  0298                     	;# 
  1116  0299                     	;# 
  1117  029A                     	;# 
  1118  029B                     	;# 
  1119  029E                     	;# 
  1120  030C                     	;# 
  1121  030D                     	;# 
  1122  030E                     	;# 
  1123  038C                     	;# 
  1124  038D                     	;# 
  1125  038E                     	;# 
  1126  0391                     	;# 
  1127  0392                     	;# 
  1128  0393                     	;# 
  1129  0394                     	;# 
  1130  0395                     	;# 
  1131  0396                     	;# 
  1132  0397                     	;# 
  1133  0398                     	;# 
  1134  0399                     	;# 
  1135  040E                     	;# 
  1136  0413                     	;# 
  1137  0413                     	;# 
  1138  0414                     	;# 
  1139  0414                     	;# 
  1140  0415                     	;# 
  1141  0416                     	;# 
  1142  0417                     	;# 
  1143  0418                     	;# 
  1144  041A                     	;# 
  1145  041A                     	;# 
  1146  041B                     	;# 
  1147  041B                     	;# 
  1148  041C                     	;# 
  1149  041D                     	;# 
  1150  041E                     	;# 
  1151  041F                     	;# 
  1152  0493                     	;# 
  1153  0494                     	;# 
  1154  0495                     	;# 
  1155  0496                     	;# 
  1156  049A                     	;# 
  1157  049B                     	;# 
  1158  049C                     	;# 
  1159  049D                     	;# 
  1160  058C                     	;# 
  1161  058C                     	;# 
  1162  058D                     	;# 
  1163  058E                     	;# 
  1164  058E                     	;# 
  1165  058F                     	;# 
  1166  0590                     	;# 
  1167  0590                     	;# 
  1168  0591                     	;# 
  1169  0592                     	;# 
  1170  0592                     	;# 
  1171  0593                     	;# 
  1172  0594                     	;# 
  1173  0594                     	;# 
  1174  0595                     	;# 
  1175  0596                     	;# 
  1176  0596                     	;# 
  1177  0597                     	;# 
  1178  0598                     	;# 
  1179  0599                     	;# 
  1180  059A                     	;# 
  1181  059B                     	;# 
  1182  059B                     	;# 
  1183  059C                     	;# 
  1184  059D                     	;# 
  1185  060C                     	;# 
  1186  060C                     	;# 
  1187  060D                     	;# 
  1188  060E                     	;# 
  1189  060F                     	;# 
  1190  060F                     	;# 
  1191  0610                     	;# 
  1192  0611                     	;# 
  1193  0612                     	;# 
  1194  0613                     	;# 
  1195  0614                     	;# 
  1196  0617                     	;# 
  1197  0618                     	;# 
  1198  0619                     	;# 
  1199  061A                     	;# 
  1200  061B                     	;# 
  1201  061C                     	;# 
  1202  0691                     	;# 
  1203  0692                     	;# 
  1204  0693                     	;# 
  1205  0694                     	;# 
  1206  0695                     	;# 
  1207  0696                     	;# 
  1208  0697                     	;# 
  1209  0699                     	;# 
  1210  069A                     	;# 
  1211  0711                     	;# 
  1212  0712                     	;# 
  1213  0713                     	;# 
  1214  0714                     	;# 
  1215  0715                     	;# 
  1216  0718                     	;# 
  1217  0718                     	;# 
  1218  0719                     	;# 
  1219  071A                     	;# 
  1220  071A                     	;# 
  1221  071B                     	;# 
  1222  071C                     	;# 
  1223  071D                     	;# 
  1224  0791                     	;# 
  1225  0791                     	;# 
  1226  0792                     	;# 
  1227  0793                     	;# 
  1228  0793                     	;# 
  1229  0794                     	;# 
  1230  0795                     	;# 
  1231  0795                     	;# 
  1232  0796                     	;# 
  1233  0797                     	;# 
  1234  0797                     	;# 
  1235  0798                     	;# 
  1236  0799                     	;# 
  1237  079A                     	;# 
  1238  080C                     	;# 
  1239  080C                     	;# 
  1240  080D                     	;# 
  1241  080E                     	;# 
  1242  080E                     	;# 
  1243  080F                     	;# 
  1244  0810                     	;# 
  1245  0810                     	;# 
  1246  0811                     	;# 
  1247  0812                     	;# 
  1248  0812                     	;# 
  1249  0813                     	;# 
  1250  0814                     	;# 
  1251  0815                     	;# 
  1252  0816                     	;# 
  1253  0817                     	;# 
  1254  0818                     	;# 
  1255  0819                     	;# 
  1256  081A                     	;# 
  1257  081A                     	;# 
  1258  081B                     	;# 
  1259  081C                     	;# 
  1260  081C                     	;# 
  1261  081D                     	;# 
  1262  088C                     	;# 
  1263  088D                     	;# 
  1264  088E                     	;# 
  1265  088F                     	;# 
  1266  088F                     	;# 
  1267  0890                     	;# 
  1268  0891                     	;# 
  1269  0892                     	;# 
  1270  0893                     	;# 
  1271  0893                     	;# 
  1272  0894                     	;# 
  1273  0895                     	;# 
  1274  0896                     	;# 
  1275  0897                     	;# 
  1276  0897                     	;# 
  1277  0898                     	;# 
  1278  0899                     	;# 
  1279  0D8C                     	;# 
  1280  0D8C                     	;# 
  1281  0D8D                     	;# 
  1282  0D8E                     	;# 
  1283  0D8F                     	;# 
  1284  0D8F                     	;# 
  1285  0D90                     	;# 
  1286  0D91                     	;# 
  1287  0D92                     	;# 
  1288  0D92                     	;# 
  1289  0D93                     	;# 
  1290  0D94                     	;# 
  1291  0D95                     	;# 
  1292  0D95                     	;# 
  1293  0D96                     	;# 
  1294  0D97                     	;# 
  1295  0D98                     	;# 
  1296  0D99                     	;# 
  1297  0D9A                     	;# 
  1298  0D9B                     	;# 
  1299  0D9C                     	;# 
  1300  0D9D                     	;# 
  1301  0D9E                     	;# 
  1302  0D9E                     	;# 
  1303  0D9F                     	;# 
  1304  0DA0                     	;# 
  1305  0DA1                     	;# 
  1306  0DA1                     	;# 
  1307  0DA2                     	;# 
  1308  0DA3                     	;# 
  1309  0DA4                     	;# 
  1310  0DA4                     	;# 
  1311  0DA5                     	;# 
  1312  0DA6                     	;# 
  1313  0DA7                     	;# 
  1314  0DA7                     	;# 
  1315  0DA8                     	;# 
  1316  0DA9                     	;# 
  1317  0DAA                     	;# 
  1318  0DAB                     	;# 
  1319  0DAC                     	;# 
  1320  0DAD                     	;# 
  1321  0DAE                     	;# 
  1322  0DAF                     	;# 
  1323  0E0F                     	;# 
  1324  0E10                     	;# 
  1325  0E11                     	;# 
  1326  0E12                     	;# 
  1327  0E13                     	;# 
  1328  0E14                     	;# 
  1329  0E15                     	;# 
  1330  0E16                     	;# 
  1331  0E17                     	;# 
  1332  0E18                     	;# 
  1333  0E19                     	;# 
  1334  0E1A                     	;# 
  1335  0E1B                     	;# 
  1336  0E1C                     	;# 
  1337  0E1D                     	;# 
  1338  0E1E                     	;# 
  1339  0E1F                     	;# 
  1340  0E20                     	;# 
  1341  0E21                     	;# 
  1342  0E22                     	;# 
  1343  0E23                     	;# 
  1344  0E24                     	;# 
  1345  0E25                     	;# 
  1346  0E26                     	;# 
  1347  0E27                     	;# 
  1348  0E28                     	;# 
  1349  0E29                     	;# 
  1350  0E2A                     	;# 
  1351  0E2B                     	;# 
  1352  0E2C                     	;# 
  1353  0E2D                     	;# 
  1354  0E2E                     	;# 
  1355  0E90                     	;# 
  1356  0E91                     	;# 
  1357  0E92                     	;# 
  1358  0E94                     	;# 
  1359  0E95                     	;# 
  1360  0E9C                     	;# 
  1361  0E9D                     	;# 
  1362  0E9E                     	;# 
  1363  0E9F                     	;# 
  1364  0EA0                     	;# 
  1365  0EA1                     	;# 
  1366  0EA2                     	;# 
  1367  0EA3                     	;# 
  1368  0EA4                     	;# 
  1369  0EA5                     	;# 
  1370  0EA6                     	;# 
  1371  0EA7                     	;# 
  1372  0F0F                     	;# 
  1373  0F10                     	;# 
  1374  0F11                     	;# 
  1375  0F12                     	;# 
  1376  0F13                     	;# 
  1377  0F14                     	;# 
  1378  0F15                     	;# 
  1379  0F16                     	;# 
  1380  0F17                     	;# 
  1381  0F18                     	;# 
  1382  0F19                     	;# 
  1383  0F1A                     	;# 
  1384  0F1B                     	;# 
  1385  0F1C                     	;# 
  1386  0F1D                     	;# 
  1387  0F1E                     	;# 
  1388  0F1F                     	;# 
  1389  0F20                     	;# 
  1390  0F21                     	;# 
  1391  0F22                     	;# 
  1392  0F23                     	;# 
  1393  0F24                     	;# 
  1394  0F25                     	;# 
  1395  0F26                     	;# 
  1396  0F27                     	;# 
  1397  0F28                     	;# 
  1398  0F29                     	;# 
  1399  0F2A                     	;# 
  1400  0F2B                     	;# 
  1401  0F2C                     	;# 
  1402  0F2D                     	;# 
  1403  0F2E                     	;# 
  1404  0F2F                     	;# 
  1405  0F30                     	;# 
  1406  0F31                     	;# 
  1407  0F32                     	;# 
  1408  0F33                     	;# 
  1409  0F34                     	;# 
  1410  0F35                     	;# 
  1411  0F36                     	;# 
  1412  0F37                     	;# 
  1413  0FE4                     	;# 
  1414  0FE5                     	;# 
  1415  0FE6                     	;# 
  1416  0FE7                     	;# 
  1417  0FE8                     	;# 
  1418  0FE9                     	;# 
  1419  0FEA                     	;# 
  1420  0FEB                     	;# 
  1421  0FED                     	;# 
  1422  0FEE                     	;# 
  1423  0FEF                     	;# 
  1424  0000                     	;# 
  1425  0001                     	;# 
  1426  0002                     	;# 
  1427  0003                     	;# 
  1428  0004                     	;# 
  1429  0005                     	;# 
  1430  0006                     	;# 
  1431  0007                     	;# 
  1432  0008                     	;# 
  1433  0009                     	;# 
  1434  000A                     	;# 
  1435  000B                     	;# 
  1436  000C                     	;# 
  1437  000D                     	;# 
  1438  000E                     	;# 
  1439  0010                     	;# 
  1440  0011                     	;# 
  1441  0012                     	;# 
  1442  0013                     	;# 
  1443  0014                     	;# 
  1444  0015                     	;# 
  1445  0016                     	;# 
  1446  0016                     	;# 
  1447  0017                     	;# 
  1448  0018                     	;# 
  1449  0019                     	;# 
  1450  001A                     	;# 
  1451  001A                     	;# 
  1452  001B                     	;# 
  1453  001B                     	;# 
  1454  001C                     	;# 
  1455  001D                     	;# 
  1456  001E                     	;# 
  1457  001F                     	;# 
  1458  008C                     	;# 
  1459  008D                     	;# 
  1460  008E                     	;# 
  1461  0090                     	;# 
  1462  0091                     	;# 
  1463  0092                     	;# 
  1464  0093                     	;# 
  1465  0094                     	;# 
  1466  0095                     	;# 
  1467  0096                     	;# 
  1468  0098                     	;# 
  1469  0099                     	;# 
  1470  009A                     	;# 
  1471  009B                     	;# 
  1472  009B                     	;# 
  1473  009C                     	;# 
  1474  009D                     	;# 
  1475  009E                     	;# 
  1476  009F                     	;# 
  1477  010C                     	;# 
  1478  010D                     	;# 
  1479  010E                     	;# 
  1480  0111                     	;# 
  1481  0112                     	;# 
  1482  0113                     	;# 
  1483  0114                     	;# 
  1484  0115                     	;# 
  1485  0116                     	;# 
  1486  0117                     	;# 
  1487  0118                     	;# 
  1488  0119                     	;# 
  1489  011C                     	;# 
  1490  018C                     	;# 
  1491  018D                     	;# 
  1492  018E                     	;# 
  1493  0191                     	;# 
  1494  0191                     	;# 
  1495  0192                     	;# 
  1496  0193                     	;# 
  1497  0193                     	;# 
  1498  0194                     	;# 
  1499  0195                     	;# 
  1500  0196                     	;# 
  1501  0197                     	;# 
  1502  0199                     	;# 
  1503  0199                     	;# 
  1504  0199                     	;# 
  1505  019A                     	;# 
  1506  019A                     	;# 
  1507  019A                     	;# 
  1508  019B                     	;# 
  1509  019B                     	;# 
  1510  019B                     	;# 
  1511  019B                     	;# 
  1512  019B                     	;# 
  1513  019C                     	;# 
  1514  019C                     	;# 
  1515  019C                     	;# 
  1516  019D                     	;# 
  1517  019D                     	;# 
  1518  019D                     	;# 
  1519  019E                     	;# 
  1520  019E                     	;# 
  1521  019E                     	;# 
  1522  019F                     	;# 
  1523  019F                     	;# 
  1524  019F                     	;# 
  1525  019F                     	;# 
  1526  019F                     	;# 
  1527  020C                     	;# 
  1528  020D                     	;# 
  1529  020E                     	;# 
  1530  0211                     	;# 
  1531  0211                     	;# 
  1532  0212                     	;# 
  1533  0212                     	;# 
  1534  0213                     	;# 
  1535  0213                     	;# 
  1536  0214                     	;# 
  1537  0214                     	;# 
  1538  0215                     	;# 
  1539  0215                     	;# 
  1540  0215                     	;# 
  1541  0215                     	;# 
  1542  0216                     	;# 
  1543  0216                     	;# 
  1544  0217                     	;# 
  1545  0217                     	;# 
  1546  028C                     	;# 
  1547  028D                     	;# 
  1548  028E                     	;# 
  1549  0291                     	;# 
  1550  0291                     	;# 
  1551  0292                     	;# 
  1552  0293                     	;# 
  1553  0294                     	;# 
  1554  0298                     	;# 
  1555  0298                     	;# 
  1556  0299                     	;# 
  1557  029A                     	;# 
  1558  029B                     	;# 
  1559  029E                     	;# 
  1560  030C                     	;# 
  1561  030D                     	;# 
  1562  030E                     	;# 
  1563  038C                     	;# 
  1564  038D                     	;# 
  1565  038E                     	;# 
  1566  0391                     	;# 
  1567  0392                     	;# 
  1568  0393                     	;# 
  1569  0394                     	;# 
  1570  0395                     	;# 
  1571  0396                     	;# 
  1572  0397                     	;# 
  1573  0398                     	;# 
  1574  0399                     	;# 
  1575  040E                     	;# 
  1576  0413                     	;# 
  1577  0413                     	;# 
  1578  0414                     	;# 
  1579  0414                     	;# 
  1580  0415                     	;# 
  1581  0416                     	;# 
  1582  0417                     	;# 
  1583  0418                     	;# 
  1584  041A                     	;# 
  1585  041A                     	;# 
  1586  041B                     	;# 
  1587  041B                     	;# 
  1588  041C                     	;# 
  1589  041D                     	;# 
  1590  041E                     	;# 
  1591  041F                     	;# 
  1592  0493                     	;# 
  1593  0494                     	;# 
  1594  0495                     	;# 
  1595  0496                     	;# 
  1596  049A                     	;# 
  1597  049B                     	;# 
  1598  049C                     	;# 
  1599  049D                     	;# 
  1600  058C                     	;# 
  1601  058C                     	;# 
  1602  058D                     	;# 
  1603  058E                     	;# 
  1604  058E                     	;# 
  1605  058F                     	;# 
  1606  0590                     	;# 
  1607  0590                     	;# 
  1608  0591                     	;# 
  1609  0592                     	;# 
  1610  0592                     	;# 
  1611  0593                     	;# 
  1612  0594                     	;# 
  1613  0594                     	;# 
  1614  0595                     	;# 
  1615  0596                     	;# 
  1616  0596                     	;# 
  1617  0597                     	;# 
  1618  0598                     	;# 
  1619  0599                     	;# 
  1620  059A                     	;# 
  1621  059B                     	;# 
  1622  059B                     	;# 
  1623  059C                     	;# 
  1624  059D                     	;# 
  1625  060C                     	;# 
  1626  060C                     	;# 
  1627  060D                     	;# 
  1628  060E                     	;# 
  1629  060F                     	;# 
  1630  060F                     	;# 
  1631  0610                     	;# 
  1632  0611                     	;# 
  1633  0612                     	;# 
  1634  0613                     	;# 
  1635  0614                     	;# 
  1636  0617                     	;# 
  1637  0618                     	;# 
  1638  0619                     	;# 
  1639  061A                     	;# 
  1640  061B                     	;# 
  1641  061C                     	;# 
  1642  0691                     	;# 
  1643  0692                     	;# 
  1644  0693                     	;# 
  1645  0694                     	;# 
  1646  0695                     	;# 
  1647  0696                     	;# 
  1648  0697                     	;# 
  1649  0699                     	;# 
  1650  069A                     	;# 
  1651  0711                     	;# 
  1652  0712                     	;# 
  1653  0713                     	;# 
  1654  0714                     	;# 
  1655  0715                     	;# 
  1656  0718                     	;# 
  1657  0718                     	;# 
  1658  0719                     	;# 
  1659  071A                     	;# 
  1660  071A                     	;# 
  1661  071B                     	;# 
  1662  071C                     	;# 
  1663  071D                     	;# 
  1664  0791                     	;# 
  1665  0791                     	;# 
  1666  0792                     	;# 
  1667  0793                     	;# 
  1668  0793                     	;# 
  1669  0794                     	;# 
  1670  0795                     	;# 
  1671  0795                     	;# 
  1672  0796                     	;# 
  1673  0797                     	;# 
  1674  0797                     	;# 
  1675  0798                     	;# 
  1676  0799                     	;# 
  1677  079A                     	;# 
  1678  080C                     	;# 
  1679  080C                     	;# 
  1680  080D                     	;# 
  1681  080E                     	;# 
  1682  080E                     	;# 
  1683  080F                     	;# 
  1684  0810                     	;# 
  1685  0810                     	;# 
  1686  0811                     	;# 
  1687  0812                     	;# 
  1688  0812                     	;# 
  1689  0813                     	;# 
  1690  0814                     	;# 
  1691  0815                     	;# 
  1692  0816                     	;# 
  1693  0817                     	;# 
  1694  0818                     	;# 
  1695  0819                     	;# 
  1696  081A                     	;# 
  1697  081A                     	;# 
  1698  081B                     	;# 
  1699  081C                     	;# 
  1700  081C                     	;# 
  1701  081D                     	;# 
  1702  088C                     	;# 
  1703  088D                     	;# 
  1704  088E                     	;# 
  1705  088F                     	;# 
  1706  088F                     	;# 
  1707  0890                     	;# 
  1708  0891                     	;# 
  1709  0892                     	;# 
  1710  0893                     	;# 
  1711  0893                     	;# 
  1712  0894                     	;# 
  1713  0895                     	;# 
  1714  0896                     	;# 
  1715  0897                     	;# 
  1716  0897                     	;# 
  1717  0898                     	;# 
  1718  0899                     	;# 
  1719  0D8C                     	;# 
  1720  0D8C                     	;# 
  1721  0D8D                     	;# 
  1722  0D8E                     	;# 
  1723  0D8F                     	;# 
  1724  0D8F                     	;# 
  1725  0D90                     	;# 
  1726  0D91                     	;# 
  1727  0D92                     	;# 
  1728  0D92                     	;# 
  1729  0D93                     	;# 
  1730  0D94                     	;# 
  1731  0D95                     	;# 
  1732  0D95                     	;# 
  1733  0D96                     	;# 
  1734  0D97                     	;# 
  1735  0D98                     	;# 
  1736  0D99                     	;# 
  1737  0D9A                     	;# 
  1738  0D9B                     	;# 
  1739  0D9C                     	;# 
  1740  0D9D                     	;# 
  1741  0D9E                     	;# 
  1742  0D9E                     	;# 
  1743  0D9F                     	;# 
  1744  0DA0                     	;# 
  1745  0DA1                     	;# 
  1746  0DA1                     	;# 
  1747  0DA2                     	;# 
  1748  0DA3                     	;# 
  1749  0DA4                     	;# 
  1750  0DA4                     	;# 
  1751  0DA5                     	;# 
  1752  0DA6                     	;# 
  1753  0DA7                     	;# 
  1754  0DA7                     	;# 
  1755  0DA8                     	;# 
  1756  0DA9                     	;# 
  1757  0DAA                     	;# 
  1758  0DAB                     	;# 
  1759  0DAC                     	;# 
  1760  0DAD                     	;# 
  1761  0DAE                     	;# 
  1762  0DAF                     	;# 
  1763  0E0F                     	;# 
  1764  0E10                     	;# 
  1765  0E11                     	;# 
  1766  0E12                     	;# 
  1767  0E13                     	;# 
  1768  0E14                     	;# 
  1769  0E15                     	;# 
  1770  0E16                     	;# 
  1771  0E17                     	;# 
  1772  0E18                     	;# 
  1773  0E19                     	;# 
  1774  0E1A                     	;# 
  1775  0E1B                     	;# 
  1776  0E1C                     	;# 
  1777  0E1D                     	;# 
  1778  0E1E                     	;# 
  1779  0E1F                     	;# 
  1780  0E20                     	;# 
  1781  0E21                     	;# 
  1782  0E22                     	;# 
  1783  0E23                     	;# 
  1784  0E24                     	;# 
  1785  0E25                     	;# 
  1786  0E26                     	;# 
  1787  0E27                     	;# 
  1788  0E28                     	;# 
  1789  0E29                     	;# 
  1790  0E2A                     	;# 
  1791  0E2B                     	;# 
  1792  0E2C                     	;# 
  1793  0E2D                     	;# 
  1794  0E2E                     	;# 
  1795  0E90                     	;# 
  1796  0E91                     	;# 
  1797  0E92                     	;# 
  1798  0E94                     	;# 
  1799  0E95                     	;# 
  1800  0E9C                     	;# 
  1801  0E9D                     	;# 
  1802  0E9E                     	;# 
  1803  0E9F                     	;# 
  1804  0EA0                     	;# 
  1805  0EA1                     	;# 
  1806  0EA2                     	;# 
  1807  0EA3                     	;# 
  1808  0EA4                     	;# 
  1809  0EA5                     	;# 
  1810  0EA6                     	;# 
  1811  0EA7                     	;# 
  1812  0F0F                     	;# 
  1813  0F10                     	;# 
  1814  0F11                     	;# 
  1815  0F12                     	;# 
  1816  0F13                     	;# 
  1817  0F14                     	;# 
  1818  0F15                     	;# 
  1819  0F16                     	;# 
  1820  0F17                     	;# 
  1821  0F18                     	;# 
  1822  0F19                     	;# 
  1823  0F1A                     	;# 
  1824  0F1B                     	;# 
  1825  0F1C                     	;# 
  1826  0F1D                     	;# 
  1827  0F1E                     	;# 
  1828  0F1F                     	;# 
  1829  0F20                     	;# 
  1830  0F21                     	;# 
  1831  0F22                     	;# 
  1832  0F23                     	;# 
  1833  0F24                     	;# 
  1834  0F25                     	;# 
  1835  0F26                     	;# 
  1836  0F27                     	;# 
  1837  0F28                     	;# 
  1838  0F29                     	;# 
  1839  0F2A                     	;# 
  1840  0F2B                     	;# 
  1841  0F2C                     	;# 
  1842  0F2D                     	;# 
  1843  0F2E                     	;# 
  1844  0F2F                     	;# 
  1845  0F30                     	;# 
  1846  0F31                     	;# 
  1847  0F32                     	;# 
  1848  0F33                     	;# 
  1849  0F34                     	;# 
  1850  0F35                     	;# 
  1851  0F36                     	;# 
  1852  0F37                     	;# 
  1853  0FE4                     	;# 
  1854  0FE5                     	;# 
  1855  0FE6                     	;# 
  1856  0FE7                     	;# 
  1857  0FE8                     	;# 
  1858  0FE9                     	;# 
  1859  0FEA                     	;# 
  1860  0FEB                     	;# 
  1861  0FED                     	;# 
  1862  0FEE                     	;# 
  1863  0FEF                     	;# 
  1864  0000                     	;# 
  1865  0001                     	;# 
  1866  0002                     	;# 
  1867  0003                     	;# 
  1868  0004                     	;# 
  1869  0005                     	;# 
  1870  0006                     	;# 
  1871  0007                     	;# 
  1872  0008                     	;# 
  1873  0009                     	;# 
  1874  000A                     	;# 
  1875  000B                     	;# 
  1876  000C                     	;# 
  1877  000D                     	;# 
  1878  000E                     	;# 
  1879  0010                     	;# 
  1880  0011                     	;# 
  1881  0012                     	;# 
  1882  0013                     	;# 
  1883  0014                     	;# 
  1884  0015                     	;# 
  1885  0016                     	;# 
  1886  0016                     	;# 
  1887  0017                     	;# 
  1888  0018                     	;# 
  1889  0019                     	;# 
  1890  001A                     	;# 
  1891  001A                     	;# 
  1892  001B                     	;# 
  1893  001B                     	;# 
  1894  001C                     	;# 
  1895  001D                     	;# 
  1896  001E                     	;# 
  1897  001F                     	;# 
  1898  008C                     	;# 
  1899  008D                     	;# 
  1900  008E                     	;# 
  1901  0090                     	;# 
  1902  0091                     	;# 
  1903  0092                     	;# 
  1904  0093                     	;# 
  1905  0094                     	;# 
  1906  0095                     	;# 
  1907  0096                     	;# 
  1908  0098                     	;# 
  1909  0099                     	;# 
  1910  009A                     	;# 
  1911  009B                     	;# 
  1912  009B                     	;# 
  1913  009C                     	;# 
  1914  009D                     	;# 
  1915  009E                     	;# 
  1916  009F                     	;# 
  1917  010C                     	;# 
  1918  010D                     	;# 
  1919  010E                     	;# 
  1920  0111                     	;# 
  1921  0112                     	;# 
  1922  0113                     	;# 
  1923  0114                     	;# 
  1924  0115                     	;# 
  1925  0116                     	;# 
  1926  0117                     	;# 
  1927  0118                     	;# 
  1928  0119                     	;# 
  1929  011C                     	;# 
  1930  018C                     	;# 
  1931  018D                     	;# 
  1932  018E                     	;# 
  1933  0191                     	;# 
  1934  0191                     	;# 
  1935  0192                     	;# 
  1936  0193                     	;# 
  1937  0193                     	;# 
  1938  0194                     	;# 
  1939  0195                     	;# 
  1940  0196                     	;# 
  1941  0197                     	;# 
  1942  0199                     	;# 
  1943  0199                     	;# 
  1944  0199                     	;# 
  1945  019A                     	;# 
  1946  019A                     	;# 
  1947  019A                     	;# 
  1948  019B                     	;# 
  1949  019B                     	;# 
  1950  019B                     	;# 
  1951  019B                     	;# 
  1952  019B                     	;# 
  1953  019C                     	;# 
  1954  019C                     	;# 
  1955  019C                     	;# 
  1956  019D                     	;# 
  1957  019D                     	;# 
  1958  019D                     	;# 
  1959  019E                     	;# 
  1960  019E                     	;# 
  1961  019E                     	;# 
  1962  019F                     	;# 
  1963  019F                     	;# 
  1964  019F                     	;# 
  1965  019F                     	;# 
  1966  019F                     	;# 
  1967  020C                     	;# 
  1968  020D                     	;# 
  1969  020E                     	;# 
  1970  0211                     	;# 
  1971  0211                     	;# 
  1972  0212                     	;# 
  1973  0212                     	;# 
  1974  0213                     	;# 
  1975  0213                     	;# 
  1976  0214                     	;# 
  1977  0214                     	;# 
  1978  0215                     	;# 
  1979  0215                     	;# 
  1980  0215                     	;# 
  1981  0215                     	;# 
  1982  0216                     	;# 
  1983  0216                     	;# 
  1984  0217                     	;# 
  1985  0217                     	;# 
  1986  028C                     	;# 
  1987  028D                     	;# 
  1988  028E                     	;# 
  1989  0291                     	;# 
  1990  0291                     	;# 
  1991  0292                     	;# 
  1992  0293                     	;# 
  1993  0294                     	;# 
  1994  0298                     	;# 
  1995  0298                     	;# 
  1996  0299                     	;# 
  1997  029A                     	;# 
  1998  029B                     	;# 
  1999  029E                     	;# 
  2000  030C                     	;# 
  2001  030D                     	;# 
  2002  030E                     	;# 
  2003  038C                     	;# 
  2004  038D                     	;# 
  2005  038E                     	;# 
  2006  0391                     	;# 
  2007  0392                     	;# 
  2008  0393                     	;# 
  2009  0394                     	;# 
  2010  0395                     	;# 
  2011  0396                     	;# 
  2012  0397                     	;# 
  2013  0398                     	;# 
  2014  0399                     	;# 
  2015  040E                     	;# 
  2016  0413                     	;# 
  2017  0413                     	;# 
  2018  0414                     	;# 
  2019  0414                     	;# 
  2020  0415                     	;# 
  2021  0416                     	;# 
  2022  0417                     	;# 
  2023  0418                     	;# 
  2024  041A                     	;# 
  2025  041A                     	;# 
  2026  041B                     	;# 
  2027  041B                     	;# 
  2028  041C                     	;# 
  2029  041D                     	;# 
  2030  041E                     	;# 
  2031  041F                     	;# 
  2032  0493                     	;# 
  2033  0494                     	;# 
  2034  0495                     	;# 
  2035  0496                     	;# 
  2036  049A                     	;# 
  2037  049B                     	;# 
  2038  049C                     	;# 
  2039  049D                     	;# 
  2040  058C                     	;# 
  2041  058C                     	;# 
  2042  058D                     	;# 
  2043  058E                     	;# 
  2044  058E                     	;# 
  2045  058F                     	;# 
  2046  0590                     	;# 
  2047  0590                     	;# 
  2048  0591                     	;# 
  2049  0592                     	;# 
  2050  0592                     	;# 
  2051  0593                     	;# 
  2052  0594                     	;# 
  2053  0594                     	;# 
  2054  0595                     	;# 
  2055  0596                     	;# 
  2056  0596                     	;# 
  2057  0597                     	;# 
  2058  0598                     	;# 
  2059  0599                     	;# 
  2060  059A                     	;# 
  2061  059B                     	;# 
  2062  059B                     	;# 
  2063  059C                     	;# 
  2064  059D                     	;# 
  2065  060C                     	;# 
  2066  060C                     	;# 
  2067  060D                     	;# 
  2068  060E                     	;# 
  2069  060F                     	;# 
  2070  060F                     	;# 
  2071  0610                     	;# 
  2072  0611                     	;# 
  2073  0612                     	;# 
  2074  0613                     	;# 
  2075  0614                     	;# 
  2076  0617                     	;# 
  2077  0618                     	;# 
  2078  0619                     	;# 
  2079  061A                     	;# 
  2080  061B                     	;# 
  2081  061C                     	;# 
  2082  0691                     	;# 
  2083  0692                     	;# 
  2084  0693                     	;# 
  2085  0694                     	;# 
  2086  0695                     	;# 
  2087  0696                     	;# 
  2088  0697                     	;# 
  2089  0699                     	;# 
  2090  069A                     	;# 
  2091  0711                     	;# 
  2092  0712                     	;# 
  2093  0713                     	;# 
  2094  0714                     	;# 
  2095  0715                     	;# 
  2096  0718                     	;# 
  2097  0718                     	;# 
  2098  0719                     	;# 
  2099  071A                     	;# 
  2100  071A                     	;# 
  2101  071B                     	;# 
  2102  071C                     	;# 
  2103  071D                     	;# 
  2104  0791                     	;# 
  2105  0791                     	;# 
  2106  0792                     	;# 
  2107  0793                     	;# 
  2108  0793                     	;# 
  2109  0794                     	;# 
  2110  0795                     	;# 
  2111  0795                     	;# 
  2112  0796                     	;# 
  2113  0797                     	;# 
  2114  0797                     	;# 
  2115  0798                     	;# 
  2116  0799                     	;# 
  2117  079A                     	;# 
  2118  080C                     	;# 
  2119  080C                     	;# 
  2120  080D                     	;# 
  2121  080E                     	;# 
  2122  080E                     	;# 
  2123  080F                     	;# 
  2124  0810                     	;# 
  2125  0810                     	;# 
  2126  0811                     	;# 
  2127  0812                     	;# 
  2128  0812                     	;# 
  2129  0813                     	;# 
  2130  0814                     	;# 
  2131  0815                     	;# 
  2132  0816                     	;# 
  2133  0817                     	;# 
  2134  0818                     	;# 
  2135  0819                     	;# 
  2136  081A                     	;# 
  2137  081A                     	;# 
  2138  081B                     	;# 
  2139  081C                     	;# 
  2140  081C                     	;# 
  2141  081D                     	;# 
  2142  088C                     	;# 
  2143  088D                     	;# 
  2144  088E                     	;# 
  2145  088F                     	;# 
  2146  088F                     	;# 
  2147  0890                     	;# 
  2148  0891                     	;# 
  2149  0892                     	;# 
  2150  0893                     	;# 
  2151  0893                     	;# 
  2152  0894                     	;# 
  2153  0895                     	;# 
  2154  0896                     	;# 
  2155  0897                     	;# 
  2156  0897                     	;# 
  2157  0898                     	;# 
  2158  0899                     	;# 
  2159  0D8C                     	;# 
  2160  0D8C                     	;# 
  2161  0D8D                     	;# 
  2162  0D8E                     	;# 
  2163  0D8F                     	;# 
  2164  0D8F                     	;# 
  2165  0D90                     	;# 
  2166  0D91                     	;# 
  2167  0D92                     	;# 
  2168  0D92                     	;# 
  2169  0D93                     	;# 
  2170  0D94                     	;# 
  2171  0D95                     	;# 
  2172  0D95                     	;# 
  2173  0D96                     	;# 
  2174  0D97                     	;# 
  2175  0D98                     	;# 
  2176  0D99                     	;# 
  2177  0D9A                     	;# 
  2178  0D9B                     	;# 
  2179  0D9C                     	;# 
  2180  0D9D                     	;# 
  2181  0D9E                     	;# 
  2182  0D9E                     	;# 
  2183  0D9F                     	;# 
  2184  0DA0                     	;# 
  2185  0DA1                     	;# 
  2186  0DA1                     	;# 
  2187  0DA2                     	;# 
  2188  0DA3                     	;# 
  2189  0DA4                     	;# 
  2190  0DA4                     	;# 
  2191  0DA5                     	;# 
  2192  0DA6                     	;# 
  2193  0DA7                     	;# 
  2194  0DA7                     	;# 
  2195  0DA8                     	;# 
  2196  0DA9                     	;# 
  2197  0DAA                     	;# 
  2198  0DAB                     	;# 
  2199  0DAC                     	;# 
  2200  0DAD                     	;# 
  2201  0DAE                     	;# 
  2202  0DAF                     	;# 
  2203  0E0F                     	;# 
  2204  0E10                     	;# 
  2205  0E11                     	;# 
  2206  0E12                     	;# 
  2207  0E13                     	;# 
  2208  0E14                     	;# 
  2209  0E15                     	;# 
  2210  0E16                     	;# 
  2211  0E17                     	;# 
  2212  0E18                     	;# 
  2213  0E19                     	;# 
  2214  0E1A                     	;# 
  2215  0E1B                     	;# 
  2216  0E1C                     	;# 
  2217  0E1D                     	;# 
  2218  0E1E                     	;# 
  2219  0E1F                     	;# 
  2220  0E20                     	;# 
  2221  0E21                     	;# 
  2222  0E22                     	;# 
  2223  0E23                     	;# 
  2224  0E24                     	;# 
  2225  0E25                     	;# 
  2226  0E26                     	;# 
  2227  0E27                     	;# 
  2228  0E28                     	;# 
  2229  0E29                     	;# 
  2230  0E2A                     	;# 
  2231  0E2B                     	;# 
  2232  0E2C                     	;# 
  2233  0E2D                     	;# 
  2234  0E2E                     	;# 
  2235  0E90                     	;# 
  2236  0E91                     	;# 
  2237  0E92                     	;# 
  2238  0E94                     	;# 
  2239  0E95                     	;# 
  2240  0E9C                     	;# 
  2241  0E9D                     	;# 
  2242  0E9E                     	;# 
  2243  0E9F                     	;# 
  2244  0EA0                     	;# 
  2245  0EA1                     	;# 
  2246  0EA2                     	;# 
  2247  0EA3                     	;# 
  2248  0EA4                     	;# 
  2249  0EA5                     	;# 
  2250  0EA6                     	;# 
  2251  0EA7                     	;# 
  2252  0F0F                     	;# 
  2253  0F10                     	;# 
  2254  0F11                     	;# 
  2255  0F12                     	;# 
  2256  0F13                     	;# 
  2257  0F14                     	;# 
  2258  0F15                     	;# 
  2259  0F16                     	;# 
  2260  0F17                     	;# 
  2261  0F18                     	;# 
  2262  0F19                     	;# 
  2263  0F1A                     	;# 
  2264  0F1B                     	;# 
  2265  0F1C                     	;# 
  2266  0F1D                     	;# 
  2267  0F1E                     	;# 
  2268  0F1F                     	;# 
  2269  0F20                     	;# 
  2270  0F21                     	;# 
  2271  0F22                     	;# 
  2272  0F23                     	;# 
  2273  0F24                     	;# 
  2274  0F25                     	;# 
  2275  0F26                     	;# 
  2276  0F27                     	;# 
  2277  0F28                     	;# 
  2278  0F29                     	;# 
  2279  0F2A                     	;# 
  2280  0F2B                     	;# 
  2281  0F2C                     	;# 
  2282  0F2D                     	;# 
  2283  0F2E                     	;# 
  2284  0F2F                     	;# 
  2285  0F30                     	;# 
  2286  0F31                     	;# 
  2287  0F32                     	;# 
  2288  0F33                     	;# 
  2289  0F34                     	;# 
  2290  0F35                     	;# 
  2291  0F36                     	;# 
  2292  0F37                     	;# 
  2293  0FE4                     	;# 
  2294  0FE5                     	;# 
  2295  0FE6                     	;# 
  2296  0FE7                     	;# 
  2297  0FE8                     	;# 
  2298  0FE9                     	;# 
  2299  0FEA                     	;# 
  2300  0FEB                     	;# 
  2301  0FED                     	;# 
  2302  0FEE                     	;# 
  2303  0FEF                     	;# 
  2304  0000                     	;# 
  2305  0001                     	;# 
  2306  0002                     	;# 
  2307  0003                     	;# 
  2308  0004                     	;# 
  2309  0005                     	;# 
  2310  0006                     	;# 
  2311  0007                     	;# 
  2312  0008                     	;# 
  2313  0009                     	;# 
  2314  000A                     	;# 
  2315  000B                     	;# 
  2316  000C                     	;# 
  2317  000D                     	;# 
  2318  000E                     	;# 
  2319  0010                     	;# 
  2320  0011                     	;# 
  2321  0012                     	;# 
  2322  0013                     	;# 
  2323  0014                     	;# 
  2324  0015                     	;# 
  2325  0016                     	;# 
  2326  0016                     	;# 
  2327  0017                     	;# 
  2328  0018                     	;# 
  2329  0019                     	;# 
  2330  001A                     	;# 
  2331  001A                     	;# 
  2332  001B                     	;# 
  2333  001B                     	;# 
  2334  001C                     	;# 
  2335  001D                     	;# 
  2336  001E                     	;# 
  2337  001F                     	;# 
  2338  008C                     	;# 
  2339  008D                     	;# 
  2340  008E                     	;# 
  2341  0090                     	;# 
  2342  0091                     	;# 
  2343  0092                     	;# 
  2344  0093                     	;# 
  2345  0094                     	;# 
  2346  0095                     	;# 
  2347  0096                     	;# 
  2348  0098                     	;# 
  2349  0099                     	;# 
  2350  009A                     	;# 
  2351  009B                     	;# 
  2352  009B                     	;# 
  2353  009C                     	;# 
  2354  009D                     	;# 
  2355  009E                     	;# 
  2356  009F                     	;# 
  2357  010C                     	;# 
  2358  010D                     	;# 
  2359  010E                     	;# 
  2360  0111                     	;# 
  2361  0112                     	;# 
  2362  0113                     	;# 
  2363  0114                     	;# 
  2364  0115                     	;# 
  2365  0116                     	;# 
  2366  0117                     	;# 
  2367  0118                     	;# 
  2368  0119                     	;# 
  2369  011C                     	;# 
  2370  018C                     	;# 
  2371  018D                     	;# 
  2372  018E                     	;# 
  2373  0191                     	;# 
  2374  0191                     	;# 
  2375  0192                     	;# 
  2376  0193                     	;# 
  2377  0193                     	;# 
  2378  0194                     	;# 
  2379  0195                     	;# 
  2380  0196                     	;# 
  2381  0197                     	;# 
  2382  0199                     	;# 
  2383  0199                     	;# 
  2384  0199                     	;# 
  2385  019A                     	;# 
  2386  019A                     	;# 
  2387  019A                     	;# 
  2388  019B                     	;# 
  2389  019B                     	;# 
  2390  019B                     	;# 
  2391  019B                     	;# 
  2392  019B                     	;# 
  2393  019C                     	;# 
  2394  019C                     	;# 
  2395  019C                     	;# 
  2396  019D                     	;# 
  2397  019D                     	;# 
  2398  019D                     	;# 
  2399  019E                     	;# 
  2400  019E                     	;# 
  2401  019E                     	;# 
  2402  019F                     	;# 
  2403  019F                     	;# 
  2404  019F                     	;# 
  2405  019F                     	;# 
  2406  019F                     	;# 
  2407  020C                     	;# 
  2408  020D                     	;# 
  2409  020E                     	;# 
  2410  0211                     	;# 
  2411  0211                     	;# 
  2412  0212                     	;# 
  2413  0212                     	;# 
  2414  0213                     	;# 
  2415  0213                     	;# 
  2416  0214                     	;# 
  2417  0214                     	;# 
  2418  0215                     	;# 
  2419  0215                     	;# 
  2420  0215                     	;# 
  2421  0215                     	;# 
  2422  0216                     	;# 
  2423  0216                     	;# 
  2424  0217                     	;# 
  2425  0217                     	;# 
  2426  028C                     	;# 
  2427  028D                     	;# 
  2428  028E                     	;# 
  2429  0291                     	;# 
  2430  0291                     	;# 
  2431  0292                     	;# 
  2432  0293                     	;# 
  2433  0294                     	;# 
  2434  0298                     	;# 
  2435  0298                     	;# 
  2436  0299                     	;# 
  2437  029A                     	;# 
  2438  029B                     	;# 
  2439  029E                     	;# 
  2440  030C                     	;# 
  2441  030D                     	;# 
  2442  030E                     	;# 
  2443  038C                     	;# 
  2444  038D                     	;# 
  2445  038E                     	;# 
  2446  0391                     	;# 
  2447  0392                     	;# 
  2448  0393                     	;# 
  2449  0394                     	;# 
  2450  0395                     	;# 
  2451  0396                     	;# 
  2452  0397                     	;# 
  2453  0398                     	;# 
  2454  0399                     	;# 
  2455  040E                     	;# 
  2456  0413                     	;# 
  2457  0413                     	;# 
  2458  0414                     	;# 
  2459  0414                     	;# 
  2460  0415                     	;# 
  2461  0416                     	;# 
  2462  0417                     	;# 
  2463  0418                     	;# 
  2464  041A                     	;# 
  2465  041A                     	;# 
  2466  041B                     	;# 
  2467  041B                     	;# 
  2468  041C                     	;# 
  2469  041D                     	;# 
  2470  041E                     	;# 
  2471  041F                     	;# 
  2472  0493                     	;# 
  2473  0494                     	;# 
  2474  0495                     	;# 
  2475  0496                     	;# 
  2476  049A                     	;# 
  2477  049B                     	;# 
  2478  049C                     	;# 
  2479  049D                     	;# 
  2480  058C                     	;# 
  2481  058C                     	;# 
  2482  058D                     	;# 
  2483  058E                     	;# 
  2484  058E                     	;# 
  2485  058F                     	;# 
  2486  0590                     	;# 
  2487  0590                     	;# 
  2488  0591                     	;# 
  2489  0592                     	;# 
  2490  0592                     	;# 
  2491  0593                     	;# 
  2492  0594                     	;# 
  2493  0594                     	;# 
  2494  0595                     	;# 
  2495  0596                     	;# 
  2496  0596                     	;# 
  2497  0597                     	;# 
  2498  0598                     	;# 
  2499  0599                     	;# 
  2500  059A                     	;# 
  2501  059B                     	;# 
  2502  059B                     	;# 
  2503  059C                     	;# 
  2504  059D                     	;# 
  2505  060C                     	;# 
  2506  060C                     	;# 
  2507  060D                     	;# 
  2508  060E                     	;# 
  2509  060F                     	;# 
  2510  060F                     	;# 
  2511  0610                     	;# 
  2512  0611                     	;# 
  2513  0612                     	;# 
  2514  0613                     	;# 
  2515  0614                     	;# 
  2516  0617                     	;# 
  2517  0618                     	;# 
  2518  0619                     	;# 
  2519  061A                     	;# 
  2520  061B                     	;# 
  2521  061C                     	;# 
  2522  0691                     	;# 
  2523  0692                     	;# 
  2524  0693                     	;# 
  2525  0694                     	;# 
  2526  0695                     	;# 
  2527  0696                     	;# 
  2528  0697                     	;# 
  2529  0699                     	;# 
  2530  069A                     	;# 
  2531  0711                     	;# 
  2532  0712                     	;# 
  2533  0713                     	;# 
  2534  0714                     	;# 
  2535  0715                     	;# 
  2536  0718                     	;# 
  2537  0718                     	;# 
  2538  0719                     	;# 
  2539  071A                     	;# 
  2540  071A                     	;# 
  2541  071B                     	;# 
  2542  071C                     	;# 
  2543  071D                     	;# 
  2544  0791                     	;# 
  2545  0791                     	;# 
  2546  0792                     	;# 
  2547  0793                     	;# 
  2548  0793                     	;# 
  2549  0794                     	;# 
  2550  0795                     	;# 
  2551  0795                     	;# 
  2552  0796                     	;# 
  2553  0797                     	;# 
  2554  0797                     	;# 
  2555  0798                     	;# 
  2556  0799                     	;# 
  2557  079A                     	;# 
  2558  080C                     	;# 
  2559  080C                     	;# 
  2560  080D                     	;# 
  2561  080E                     	;# 
  2562  080E                     	;# 
  2563  080F                     	;# 
  2564  0810                     	;# 
  2565  0810                     	;# 
  2566  0811                     	;# 
  2567  0812                     	;# 
  2568  0812                     	;# 
  2569  0813                     	;# 
  2570  0814                     	;# 
  2571  0815                     	;# 
  2572  0816                     	;# 
  2573  0817                     	;# 
  2574  0818                     	;# 
  2575  0819                     	;# 
  2576  081A                     	;# 
  2577  081A                     	;# 
  2578  081B                     	;# 
  2579  081C                     	;# 
  2580  081C                     	;# 
  2581  081D                     	;# 
  2582  088C                     	;# 
  2583  088D                     	;# 
  2584  088E                     	;# 
  2585  088F                     	;# 
  2586  088F                     	;# 
  2587  0890                     	;# 
  2588  0891                     	;# 
  2589  0892                     	;# 
  2590  0893                     	;# 
  2591  0893                     	;# 
  2592  0894                     	;# 
  2593  0895                     	;# 
  2594  0896                     	;# 
  2595  0897                     	;# 
  2596  0897                     	;# 
  2597  0898                     	;# 
  2598  0899                     	;# 
  2599  0D8C                     	;# 
  2600  0D8C                     	;# 
  2601  0D8D                     	;# 
  2602  0D8E                     	;# 
  2603  0D8F                     	;# 
  2604  0D8F                     	;# 
  2605  0D90                     	;# 
  2606  0D91                     	;# 
  2607  0D92                     	;# 
  2608  0D92                     	;# 
  2609  0D93                     	;# 
  2610  0D94                     	;# 
  2611  0D95                     	;# 
  2612  0D95                     	;# 
  2613  0D96                     	;# 
  2614  0D97                     	;# 
  2615  0D98                     	;# 
  2616  0D99                     	;# 
  2617  0D9A                     	;# 
  2618  0D9B                     	;# 
  2619  0D9C                     	;# 
  2620  0D9D                     	;# 
  2621  0D9E                     	;# 
  2622  0D9E                     	;# 
  2623  0D9F                     	;# 
  2624  0DA0                     	;# 
  2625  0DA1                     	;# 
  2626  0DA1                     	;# 
  2627  0DA2                     	;# 
  2628  0DA3                     	;# 
  2629  0DA4                     	;# 
  2630  0DA4                     	;# 
  2631  0DA5                     	;# 
  2632  0DA6                     	;# 
  2633  0DA7                     	;# 
  2634  0DA7                     	;# 
  2635  0DA8                     	;# 
  2636  0DA9                     	;# 
  2637  0DAA                     	;# 
  2638  0DAB                     	;# 
  2639  0DAC                     	;# 
  2640  0DAD                     	;# 
  2641  0DAE                     	;# 
  2642  0DAF                     	;# 
  2643  0E0F                     	;# 
  2644  0E10                     	;# 
  2645  0E11                     	;# 
  2646  0E12                     	;# 
  2647  0E13                     	;# 
  2648  0E14                     	;# 
  2649  0E15                     	;# 
  2650  0E16                     	;# 
  2651  0E17                     	;# 
  2652  0E18                     	;# 
  2653  0E19                     	;# 
  2654  0E1A                     	;# 
  2655  0E1B                     	;# 
  2656  0E1C                     	;# 
  2657  0E1D                     	;# 
  2658  0E1E                     	;# 
  2659  0E1F                     	;# 
  2660  0E20                     	;# 
  2661  0E21                     	;# 
  2662  0E22                     	;# 
  2663  0E23                     	;# 
  2664  0E24                     	;# 
  2665  0E25                     	;# 
  2666  0E26                     	;# 
  2667  0E27                     	;# 
  2668  0E28                     	;# 
  2669  0E29                     	;# 
  2670  0E2A                     	;# 
  2671  0E2B                     	;# 
  2672  0E2C                     	;# 
  2673  0E2D                     	;# 
  2674  0E2E                     	;# 
  2675  0E90                     	;# 
  2676  0E91                     	;# 
  2677  0E92                     	;# 
  2678  0E94                     	;# 
  2679  0E95                     	;# 
  2680  0E9C                     	;# 
  2681  0E9D                     	;# 
  2682  0E9E                     	;# 
  2683  0E9F                     	;# 
  2684  0EA0                     	;# 
  2685  0EA1                     	;# 
  2686  0EA2                     	;# 
  2687  0EA3                     	;# 
  2688  0EA4                     	;# 
  2689  0EA5                     	;# 
  2690  0EA6                     	;# 
  2691  0EA7                     	;# 
  2692  0F0F                     	;# 
  2693  0F10                     	;# 
  2694  0F11                     	;# 
  2695  0F12                     	;# 
  2696  0F13                     	;# 
  2697  0F14                     	;# 
  2698  0F15                     	;# 
  2699  0F16                     	;# 
  2700  0F17                     	;# 
  2701  0F18                     	;# 
  2702  0F19                     	;# 
  2703  0F1A                     	;# 
  2704  0F1B                     	;# 
  2705  0F1C                     	;# 
  2706  0F1D                     	;# 
  2707  0F1E                     	;# 
  2708  0F1F                     	;# 
  2709  0F20                     	;# 
  2710  0F21                     	;# 
  2711  0F22                     	;# 
  2712  0F23                     	;# 
  2713  0F24                     	;# 
  2714  0F25                     	;# 
  2715  0F26                     	;# 
  2716  0F27                     	;# 
  2717  0F28                     	;# 
  2718  0F29                     	;# 
  2719  0F2A                     	;# 
  2720  0F2B                     	;# 
  2721  0F2C                     	;# 
  2722  0F2D                     	;# 
  2723  0F2E                     	;# 
  2724  0F2F                     	;# 
  2725  0F30                     	;# 
  2726  0F31                     	;# 
  2727  0F32                     	;# 
  2728  0F33                     	;# 
  2729  0F34                     	;# 
  2730  0F35                     	;# 
  2731  0F36                     	;# 
  2732  0F37                     	;# 
  2733  0FE4                     	;# 
  2734  0FE5                     	;# 
  2735  0FE6                     	;# 
  2736  0FE7                     	;# 
  2737  0FE8                     	;# 
  2738  0FE9                     	;# 
  2739  0FEA                     	;# 
  2740  0FEB                     	;# 
  2741  0FED                     	;# 
  2742  0FEE                     	;# 
  2743  0FEF                     	;# 
  2744  0000                     	;# 
  2745  0001                     	;# 
  2746  0002                     	;# 
  2747  0003                     	;# 
  2748  0004                     	;# 
  2749  0005                     	;# 
  2750  0006                     	;# 
  2751  0007                     	;# 
  2752  0008                     	;# 
  2753  0009                     	;# 
  2754  000A                     	;# 
  2755  000B                     	;# 
  2756  000C                     	;# 
  2757  000D                     	;# 
  2758  000E                     	;# 
  2759  0010                     	;# 
  2760  0011                     	;# 
  2761  0012                     	;# 
  2762  0013                     	;# 
  2763  0014                     	;# 
  2764  0015                     	;# 
  2765  0016                     	;# 
  2766  0016                     	;# 
  2767  0017                     	;# 
  2768  0018                     	;# 
  2769  0019                     	;# 
  2770  001A                     	;# 
  2771  001A                     	;# 
  2772  001B                     	;# 
  2773  001B                     	;# 
  2774  001C                     	;# 
  2775  001D                     	;# 
  2776  001E                     	;# 
  2777  001F                     	;# 
  2778  008C                     	;# 
  2779  008D                     	;# 
  2780  008E                     	;# 
  2781  0090                     	;# 
  2782  0091                     	;# 
  2783  0092                     	;# 
  2784  0093                     	;# 
  2785  0094                     	;# 
  2786  0095                     	;# 
  2787  0096                     	;# 
  2788  0098                     	;# 
  2789  0099                     	;# 
  2790  009A                     	;# 
  2791  009B                     	;# 
  2792  009B                     	;# 
  2793  009C                     	;# 
  2794  009D                     	;# 
  2795  009E                     	;# 
  2796  009F                     	;# 
  2797  010C                     	;# 
  2798  010D                     	;# 
  2799  010E                     	;# 
  2800  0111                     	;# 
  2801  0112                     	;# 
  2802  0113                     	;# 
  2803  0114                     	;# 
  2804  0115                     	;# 
  2805  0116                     	;# 
  2806  0117                     	;# 
  2807  0118                     	;# 
  2808  0119                     	;# 
  2809  011C                     	;# 
  2810  018C                     	;# 
  2811  018D                     	;# 
  2812  018E                     	;# 
  2813  0191                     	;# 
  2814  0191                     	;# 
  2815  0192                     	;# 
  2816  0193                     	;# 
  2817  0193                     	;# 
  2818  0194                     	;# 
  2819  0195                     	;# 
  2820  0196                     	;# 
  2821  0197                     	;# 
  2822  0199                     	;# 
  2823  0199                     	;# 
  2824  0199                     	;# 
  2825  019A                     	;# 
  2826  019A                     	;# 
  2827  019A                     	;# 
  2828  019B                     	;# 
  2829  019B                     	;# 
  2830  019B                     	;# 
  2831  019B                     	;# 
  2832  019B                     	;# 
  2833  019C                     	;# 
  2834  019C                     	;# 
  2835  019C                     	;# 
  2836  019D                     	;# 
  2837  019D                     	;# 
  2838  019D                     	;# 
  2839  019E                     	;# 
  2840  019E                     	;# 
  2841  019E                     	;# 
  2842  019F                     	;# 
  2843  019F                     	;# 
  2844  019F                     	;# 
  2845  019F                     	;# 
  2846  019F                     	;# 
  2847  020C                     	;# 
  2848  020D                     	;# 
  2849  020E                     	;# 
  2850  0211                     	;# 
  2851  0211                     	;# 
  2852  0212                     	;# 
  2853  0212                     	;# 
  2854  0213                     	;# 
  2855  0213                     	;# 
  2856  0214                     	;# 
  2857  0214                     	;# 
  2858  0215                     	;# 
  2859  0215                     	;# 
  2860  0215                     	;# 
  2861  0215                     	;# 
  2862  0216                     	;# 
  2863  0216                     	;# 
  2864  0217                     	;# 
  2865  0217                     	;# 
  2866  028C                     	;# 
  2867  028D                     	;# 
  2868  028E                     	;# 
  2869  0291                     	;# 
  2870  0291                     	;# 
  2871  0292                     	;# 
  2872  0293                     	;# 
  2873  0294                     	;# 
  2874  0298                     	;# 
  2875  0298                     	;# 
  2876  0299                     	;# 
  2877  029A                     	;# 
  2878  029B                     	;# 
  2879  029E                     	;# 
  2880  030C                     	;# 
  2881  030D                     	;# 
  2882  030E                     	;# 
  2883  038C                     	;# 
  2884  038D                     	;# 
  2885  038E                     	;# 
  2886  0391                     	;# 
  2887  0392                     	;# 
  2888  0393                     	;# 
  2889  0394                     	;# 
  2890  0395                     	;# 
  2891  0396                     	;# 
  2892  0397                     	;# 
  2893  0398                     	;# 
  2894  0399                     	;# 
  2895  040E                     	;# 
  2896  0413                     	;# 
  2897  0413                     	;# 
  2898  0414                     	;# 
  2899  0414                     	;# 
  2900  0415                     	;# 
  2901  0416                     	;# 
  2902  0417                     	;# 
  2903  0418                     	;# 
  2904  041A                     	;# 
  2905  041A                     	;# 
  2906  041B                     	;# 
  2907  041B                     	;# 
  2908  041C                     	;# 
  2909  041D                     	;# 
  2910  041E                     	;# 
  2911  041F                     	;# 
  2912  0493                     	;# 
  2913  0494                     	;# 
  2914  0495                     	;# 
  2915  0496                     	;# 
  2916  049A                     	;# 
  2917  049B                     	;# 
  2918  049C                     	;# 
  2919  049D                     	;# 
  2920  058C                     	;# 
  2921  058C                     	;# 
  2922  058D                     	;# 
  2923  058E                     	;# 
  2924  058E                     	;# 
  2925  058F                     	;# 
  2926  0590                     	;# 
  2927  0590                     	;# 
  2928  0591                     	;# 
  2929  0592                     	;# 
  2930  0592                     	;# 
  2931  0593                     	;# 
  2932  0594                     	;# 
  2933  0594                     	;# 
  2934  0595                     	;# 
  2935  0596                     	;# 
  2936  0596                     	;# 
  2937  0597                     	;# 
  2938  0598                     	;# 
  2939  0599                     	;# 
  2940  059A                     	;# 
  2941  059B                     	;# 
  2942  059B                     	;# 
  2943  059C                     	;# 
  2944  059D                     	;# 
  2945  060C                     	;# 
  2946  060C                     	;# 
  2947  060D                     	;# 
  2948  060E                     	;# 
  2949  060F                     	;# 
  2950  060F                     	;# 
  2951  0610                     	;# 
  2952  0611                     	;# 
  2953  0612                     	;# 
  2954  0613                     	;# 
  2955  0614                     	;# 
  2956  0617                     	;# 
  2957  0618                     	;# 
  2958  0619                     	;# 
  2959  061A                     	;# 
  2960  061B                     	;# 
  2961  061C                     	;# 
  2962  0691                     	;# 
  2963  0692                     	;# 
  2964  0693                     	;# 
  2965  0694                     	;# 
  2966  0695                     	;# 
  2967  0696                     	;# 
  2968  0697                     	;# 
  2969  0699                     	;# 
  2970  069A                     	;# 
  2971  0711                     	;# 
  2972  0712                     	;# 
  2973  0713                     	;# 
  2974  0714                     	;# 
  2975  0715                     	;# 
  2976  0718                     	;# 
  2977  0718                     	;# 
  2978  0719                     	;# 
  2979  071A                     	;# 
  2980  071A                     	;# 
  2981  071B                     	;# 
  2982  071C                     	;# 
  2983  071D                     	;# 
  2984  0791                     	;# 
  2985  0791                     	;# 
  2986  0792                     	;# 
  2987  0793                     	;# 
  2988  0793                     	;# 
  2989  0794                     	;# 
  2990  0795                     	;# 
  2991  0795                     	;# 
  2992  0796                     	;# 
  2993  0797                     	;# 
  2994  0797                     	;# 
  2995  0798                     	;# 
  2996  0799                     	;# 
  2997  079A                     	;# 
  2998  080C                     	;# 
  2999  080C                     	;# 
  3000  080D                     	;# 
  3001  080E                     	;# 
  3002  080E                     	;# 
  3003  080F                     	;# 
  3004  0810                     	;# 
  3005  0810                     	;# 
  3006  0811                     	;# 
  3007  0812                     	;# 
  3008  0812                     	;# 
  3009  0813                     	;# 
  3010  0814                     	;# 
  3011  0815                     	;# 
  3012  0816                     	;# 
  3013  0817                     	;# 
  3014  0818                     	;# 
  3015  0819                     	;# 
  3016  081A                     	;# 
  3017  081A                     	;# 
  3018  081B                     	;# 
  3019  081C                     	;# 
  3020  081C                     	;# 
  3021  081D                     	;# 
  3022  088C                     	;# 
  3023  088D                     	;# 
  3024  088E                     	;# 
  3025  088F                     	;# 
  3026  088F                     	;# 
  3027  0890                     	;# 
  3028  0891                     	;# 
  3029  0892                     	;# 
  3030  0893                     	;# 
  3031  0893                     	;# 
  3032  0894                     	;# 
  3033  0895                     	;# 
  3034  0896                     	;# 
  3035  0897                     	;# 
  3036  0897                     	;# 
  3037  0898                     	;# 
  3038  0899                     	;# 
  3039  0D8C                     	;# 
  3040  0D8C                     	;# 
  3041  0D8D                     	;# 
  3042  0D8E                     	;# 
  3043  0D8F                     	;# 
  3044  0D8F                     	;# 
  3045  0D90                     	;# 
  3046  0D91                     	;# 
  3047  0D92                     	;# 
  3048  0D92                     	;# 
  3049  0D93                     	;# 
  3050  0D94                     	;# 
  3051  0D95                     	;# 
  3052  0D95                     	;# 
  3053  0D96                     	;# 
  3054  0D97                     	;# 
  3055  0D98                     	;# 
  3056  0D99                     	;# 
  3057  0D9A                     	;# 
  3058  0D9B                     	;# 
  3059  0D9C                     	;# 
  3060  0D9D                     	;# 
  3061  0D9E                     	;# 
  3062  0D9E                     	;# 
  3063  0D9F                     	;# 
  3064  0DA0                     	;# 
  3065  0DA1                     	;# 
  3066  0DA1                     	;# 
  3067  0DA2                     	;# 
  3068  0DA3                     	;# 
  3069  0DA4                     	;# 
  3070  0DA4                     	;# 
  3071  0DA5                     	;# 
  3072  0DA6                     	;# 
  3073  0DA7                     	;# 
  3074  0DA7                     	;# 
  3075  0DA8                     	;# 
  3076  0DA9                     	;# 
  3077  0DAA                     	;# 
  3078  0DAB                     	;# 
  3079  0DAC                     	;# 
  3080  0DAD                     	;# 
  3081  0DAE                     	;# 
  3082  0DAF                     	;# 
  3083  0E0F                     	;# 
  3084  0E10                     	;# 
  3085  0E11                     	;# 
  3086  0E12                     	;# 
  3087  0E13                     	;# 
  3088  0E14                     	;# 
  3089  0E15                     	;# 
  3090  0E16                     	;# 
  3091  0E17                     	;# 
  3092  0E18                     	;# 
  3093  0E19                     	;# 
  3094  0E1A                     	;# 
  3095  0E1B                     	;# 
  3096  0E1C                     	;# 
  3097  0E1D                     	;# 
  3098  0E1E                     	;# 
  3099  0E1F                     	;# 
  3100  0E20                     	;# 
  3101  0E21                     	;# 
  3102  0E22                     	;# 
  3103  0E23                     	;# 
  3104  0E24                     	;# 
  3105  0E25                     	;# 
  3106  0E26                     	;# 
  3107  0E27                     	;# 
  3108  0E28                     	;# 
  3109  0E29                     	;# 
  3110  0E2A                     	;# 
  3111  0E2B                     	;# 
  3112  0E2C                     	;# 
  3113  0E2D                     	;# 
  3114  0E2E                     	;# 
  3115  0E90                     	;# 
  3116  0E91                     	;# 
  3117  0E92                     	;# 
  3118  0E94                     	;# 
  3119  0E95                     	;# 
  3120  0E9C                     	;# 
  3121  0E9D                     	;# 
  3122  0E9E                     	;# 
  3123  0E9F                     	;# 
  3124  0EA0                     	;# 
  3125  0EA1                     	;# 
  3126  0EA2                     	;# 
  3127  0EA3                     	;# 
  3128  0EA4                     	;# 
  3129  0EA5                     	;# 
  3130  0EA6                     	;# 
  3131  0EA7                     	;# 
  3132  0F0F                     	;# 
  3133  0F10                     	;# 
  3134  0F11                     	;# 
  3135  0F12                     	;# 
  3136  0F13                     	;# 
  3137  0F14                     	;# 
  3138  0F15                     	;# 
  3139  0F16                     	;# 
  3140  0F17                     	;# 
  3141  0F18                     	;# 
  3142  0F19                     	;# 
  3143  0F1A                     	;# 
  3144  0F1B                     	;# 
  3145  0F1C                     	;# 
  3146  0F1D                     	;# 
  3147  0F1E                     	;# 
  3148  0F1F                     	;# 
  3149  0F20                     	;# 
  3150  0F21                     	;# 
  3151  0F22                     	;# 
  3152  0F23                     	;# 
  3153  0F24                     	;# 
  3154  0F25                     	;# 
  3155  0F26                     	;# 
  3156  0F27                     	;# 
  3157  0F28                     	;# 
  3158  0F29                     	;# 
  3159  0F2A                     	;# 
  3160  0F2B                     	;# 
  3161  0F2C                     	;# 
  3162  0F2D                     	;# 
  3163  0F2E                     	;# 
  3164  0F2F                     	;# 
  3165  0F30                     	;# 
  3166  0F31                     	;# 
  3167  0F32                     	;# 
  3168  0F33                     	;# 
  3169  0F34                     	;# 
  3170  0F35                     	;# 
  3171  0F36                     	;# 
  3172  0F37                     	;# 
  3173  0FE4                     	;# 
  3174  0FE5                     	;# 
  3175  0FE6                     	;# 
  3176  0FE7                     	;# 
  3177  0FE8                     	;# 
  3178  0FE9                     	;# 
  3179  0FEA                     	;# 
  3180  0FEB                     	;# 
  3181  0FED                     	;# 
  3182  0FEE                     	;# 
  3183  0FEF                     	;# 
  3184  0000                     	;# 
  3185  0001                     	;# 
  3186  0002                     	;# 
  3187  0003                     	;# 
  3188  0004                     	;# 
  3189  0005                     	;# 
  3190  0006                     	;# 
  3191  0007                     	;# 
  3192  0008                     	;# 
  3193  0009                     	;# 
  3194  000A                     	;# 
  3195  000B                     	;# 
  3196  000C                     	;# 
  3197  000D                     	;# 
  3198  000E                     	;# 
  3199  0010                     	;# 
  3200  0011                     	;# 
  3201  0012                     	;# 
  3202  0013                     	;# 
  3203  0014                     	;# 
  3204  0015                     	;# 
  3205  0016                     	;# 
  3206  0016                     	;# 
  3207  0017                     	;# 
  3208  0018                     	;# 
  3209  0019                     	;# 
  3210  001A                     	;# 
  3211  001A                     	;# 
  3212  001B                     	;# 
  3213  001B                     	;# 
  3214  001C                     	;# 
  3215  001D                     	;# 
  3216  001E                     	;# 
  3217  001F                     	;# 
  3218  008C                     	;# 
  3219  008D                     	;# 
  3220  008E                     	;# 
  3221  0090                     	;# 
  3222  0091                     	;# 
  3223  0092                     	;# 
  3224  0093                     	;# 
  3225  0094                     	;# 
  3226  0095                     	;# 
  3227  0096                     	;# 
  3228  0098                     	;# 
  3229  0099                     	;# 
  3230  009A                     	;# 
  3231  009B                     	;# 
  3232  009B                     	;# 
  3233  009C                     	;# 
  3234  009D                     	;# 
  3235  009E                     	;# 
  3236  009F                     	;# 
  3237  010C                     	;# 
  3238  010D                     	;# 
  3239  010E                     	;# 
  3240  0111                     	;# 
  3241  0112                     	;# 
  3242  0113                     	;# 
  3243  0114                     	;# 
  3244  0115                     	;# 
  3245  0116                     	;# 
  3246  0117                     	;# 
  3247  0118                     	;# 
  3248  0119                     	;# 
  3249  011C                     	;# 
  3250  018C                     	;# 
  3251  018D                     	;# 
  3252  018E                     	;# 
  3253  0191                     	;# 
  3254  0191                     	;# 
  3255  0192                     	;# 
  3256  0193                     	;# 
  3257  0193                     	;# 
  3258  0194                     	;# 
  3259  0195                     	;# 
  3260  0196                     	;# 
  3261  0197                     	;# 
  3262  0199                     	;# 
  3263  0199                     	;# 
  3264  0199                     	;# 
  3265  019A                     	;# 
  3266  019A                     	;# 
  3267  019A                     	;# 
  3268  019B                     	;# 
  3269  019B                     	;# 
  3270  019B                     	;# 
  3271  019B                     	;# 
  3272  019B                     	;# 
  3273  019C                     	;# 
  3274  019C                     	;# 
  3275  019C                     	;# 
  3276  019D                     	;# 
  3277  019D                     	;# 
  3278  019D                     	;# 
  3279  019E                     	;# 
  3280  019E                     	;# 
  3281  019E                     	;# 
  3282  019F                     	;# 
  3283  019F                     	;# 
  3284  019F                     	;# 
  3285  019F                     	;# 
  3286  019F                     	;# 
  3287  020C                     	;# 
  3288  020D                     	;# 
  3289  020E                     	;# 
  3290  0211                     	;# 
  3291  0211                     	;# 
  3292  0212                     	;# 
  3293  0212                     	;# 
  3294  0213                     	;# 
  3295  0213                     	;# 
  3296  0214                     	;# 
  3297  0214                     	;# 
  3298  0215                     	;# 
  3299  0215                     	;# 
  3300  0215                     	;# 
  3301  0215                     	;# 
  3302  0216                     	;# 
  3303  0216                     	;# 
  3304  0217                     	;# 
  3305  0217                     	;# 
  3306  028C                     	;# 
  3307  028D                     	;# 
  3308  028E                     	;# 
  3309  0291                     	;# 
  3310  0291                     	;# 
  3311  0292                     	;# 
  3312  0293                     	;# 
  3313  0294                     	;# 
  3314  0298                     	;# 
  3315  0298                     	;# 
  3316  0299                     	;# 
  3317  029A                     	;# 
  3318  029B                     	;# 
  3319  029E                     	;# 
  3320  030C                     	;# 
  3321  030D                     	;# 
  3322  030E                     	;# 
  3323  038C                     	;# 
  3324  038D                     	;# 
  3325  038E                     	;# 
  3326  0391                     	;# 
  3327  0392                     	;# 
  3328  0393                     	;# 
  3329  0394                     	;# 
  3330  0395                     	;# 
  3331  0396                     	;# 
  3332  0397                     	;# 
  3333  0398                     	;# 
  3334  0399                     	;# 
  3335  040E                     	;# 
  3336  0413                     	;# 
  3337  0413                     	;# 
  3338  0414                     	;# 
  3339  0414                     	;# 
  3340  0415                     	;# 
  3341  0416                     	;# 
  3342  0417                     	;# 
  3343  0418                     	;# 
  3344  041A                     	;# 
  3345  041A                     	;# 
  3346  041B                     	;# 
  3347  041B                     	;# 
  3348  041C                     	;# 
  3349  041D                     	;# 
  3350  041E                     	;# 
  3351  041F                     	;# 
  3352  0493                     	;# 
  3353  0494                     	;# 
  3354  0495                     	;# 
  3355  0496                     	;# 
  3356  049A                     	;# 
  3357  049B                     	;# 
  3358  049C                     	;# 
  3359  049D                     	;# 
  3360  058C                     	;# 
  3361  058C                     	;# 
  3362  058D                     	;# 
  3363  058E                     	;# 
  3364  058E                     	;# 
  3365  058F                     	;# 
  3366  0590                     	;# 
  3367  0590                     	;# 
  3368  0591                     	;# 
  3369  0592                     	;# 
  3370  0592                     	;# 
  3371  0593                     	;# 
  3372  0594                     	;# 
  3373  0594                     	;# 
  3374  0595                     	;# 
  3375  0596                     	;# 
  3376  0596                     	;# 
  3377  0597                     	;# 
  3378  0598                     	;# 
  3379  0599                     	;# 
  3380  059A                     	;# 
  3381  059B                     	;# 
  3382  059B                     	;# 
  3383  059C                     	;# 
  3384  059D                     	;# 
  3385  060C                     	;# 
  3386  060C                     	;# 
  3387  060D                     	;# 
  3388  060E                     	;# 
  3389  060F                     	;# 
  3390  060F                     	;# 
  3391  0610                     	;# 
  3392  0611                     	;# 
  3393  0612                     	;# 
  3394  0613                     	;# 
  3395  0614                     	;# 
  3396  0617                     	;# 
  3397  0618                     	;# 
  3398  0619                     	;# 
  3399  061A                     	;# 
  3400  061B                     	;# 
  3401  061C                     	;# 
  3402  0691                     	;# 
  3403  0692                     	;# 
  3404  0693                     	;# 
  3405  0694                     	;# 
  3406  0695                     	;# 
  3407  0696                     	;# 
  3408  0697                     	;# 
  3409  0699                     	;# 
  3410  069A                     	;# 
  3411  0711                     	;# 
  3412  0712                     	;# 
  3413  0713                     	;# 
  3414  0714                     	;# 
  3415  0715                     	;# 
  3416  0718                     	;# 
  3417  0718                     	;# 
  3418  0719                     	;# 
  3419  071A                     	;# 
  3420  071A                     	;# 
  3421  071B                     	;# 
  3422  071C                     	;# 
  3423  071D                     	;# 
  3424  0791                     	;# 
  3425  0791                     	;# 
  3426  0792                     	;# 
  3427  0793                     	;# 
  3428  0793                     	;# 
  3429  0794                     	;# 
  3430  0795                     	;# 
  3431  0795                     	;# 
  3432  0796                     	;# 
  3433  0797                     	;# 
  3434  0797                     	;# 
  3435  0798                     	;# 
  3436  0799                     	;# 
  3437  079A                     	;# 
  3438  080C                     	;# 
  3439  080C                     	;# 
  3440  080D                     	;# 
  3441  080E                     	;# 
  3442  080E                     	;# 
  3443  080F                     	;# 
  3444  0810                     	;# 
  3445  0810                     	;# 
  3446  0811                     	;# 
  3447  0812                     	;# 
  3448  0812                     	;# 
  3449  0813                     	;# 
  3450  0814                     	;# 
  3451  0815                     	;# 
  3452  0816                     	;# 
  3453  0817                     	;# 
  3454  0818                     	;# 
  3455  0819                     	;# 
  3456  081A                     	;# 
  3457  081A                     	;# 
  3458  081B                     	;# 
  3459  081C                     	;# 
  3460  081C                     	;# 
  3461  081D                     	;# 
  3462  088C                     	;# 
  3463  088D                     	;# 
  3464  088E                     	;# 
  3465  088F                     	;# 
  3466  088F                     	;# 
  3467  0890                     	;# 
  3468  0891                     	;# 
  3469  0892                     	;# 
  3470  0893                     	;# 
  3471  0893                     	;# 
  3472  0894                     	;# 
  3473  0895                     	;# 
  3474  0896                     	;# 
  3475  0897                     	;# 
  3476  0897                     	;# 
  3477  0898                     	;# 
  3478  0899                     	;# 
  3479  0D8C                     	;# 
  3480  0D8C                     	;# 
  3481  0D8D                     	;# 
  3482  0D8E                     	;# 
  3483  0D8F                     	;# 
  3484  0D8F                     	;# 
  3485  0D90                     	;# 
  3486  0D91                     	;# 
  3487  0D92                     	;# 
  3488  0D92                     	;# 
  3489  0D93                     	;# 
  3490  0D94                     	;# 
  3491  0D95                     	;# 
  3492  0D95                     	;# 
  3493  0D96                     	;# 
  3494  0D97                     	;# 
  3495  0D98                     	;# 
  3496  0D99                     	;# 
  3497  0D9A                     	;# 
  3498  0D9B                     	;# 
  3499  0D9C                     	;# 
  3500  0D9D                     	;# 
  3501  0D9E                     	;# 
  3502  0D9E                     	;# 
  3503  0D9F                     	;# 
  3504  0DA0                     	;# 
  3505  0DA1                     	;# 
  3506  0DA1                     	;# 
  3507  0DA2                     	;# 
  3508  0DA3                     	;# 
  3509  0DA4                     	;# 
  3510  0DA4                     	;# 
  3511  0DA5                     	;# 
  3512  0DA6                     	;# 
  3513  0DA7                     	;# 
  3514  0DA7                     	;# 
  3515  0DA8                     	;# 
  3516  0DA9                     	;# 
  3517  0DAA                     	;# 
  3518  0DAB                     	;# 
  3519  0DAC                     	;# 
  3520  0DAD                     	;# 
  3521  0DAE                     	;# 
  3522  0DAF                     	;# 
  3523  0E0F                     	;# 
  3524  0E10                     	;# 
  3525  0E11                     	;# 
  3526  0E12                     	;# 
  3527  0E13                     	;# 
  3528  0E14                     	;# 
  3529  0E15                     	;# 
  3530  0E16                     	;# 
  3531  0E17                     	;# 
  3532  0E18                     	;# 
  3533  0E19                     	;# 
  3534  0E1A                     	;# 
  3535  0E1B                     	;# 
  3536  0E1C                     	;# 
  3537  0E1D                     	;# 
  3538  0E1E                     	;# 
  3539  0E1F                     	;# 
  3540  0E20                     	;# 
  3541  0E21                     	;# 
  3542  0E22                     	;# 
  3543  0E23                     	;# 
  3544  0E24                     	;# 
  3545  0E25                     	;# 
  3546  0E26                     	;# 
  3547  0E27                     	;# 
  3548  0E28                     	;# 
  3549  0E29                     	;# 
  3550  0E2A                     	;# 
  3551  0E2B                     	;# 
  3552  0E2C                     	;# 
  3553  0E2D                     	;# 
  3554  0E2E                     	;# 
  3555  0E90                     	;# 
  3556  0E91                     	;# 
  3557  0E92                     	;# 
  3558  0E94                     	;# 
  3559  0E95                     	;# 
  3560  0E9C                     	;# 
  3561  0E9D                     	;# 
  3562  0E9E                     	;# 
  3563  0E9F                     	;# 
  3564  0EA0                     	;# 
  3565  0EA1                     	;# 
  3566  0EA2                     	;# 
  3567  0EA3                     	;# 
  3568  0EA4                     	;# 
  3569  0EA5                     	;# 
  3570  0EA6                     	;# 
  3571  0EA7                     	;# 
  3572  0F0F                     	;# 
  3573  0F10                     	;# 
  3574  0F11                     	;# 
  3575  0F12                     	;# 
  3576  0F13                     	;# 
  3577  0F14                     	;# 
  3578  0F15                     	;# 
  3579  0F16                     	;# 
  3580  0F17                     	;# 
  3581  0F18                     	;# 
  3582  0F19                     	;# 
  3583  0F1A                     	;# 
  3584  0F1B                     	;# 
  3585  0F1C                     	;# 
  3586  0F1D                     	;# 
  3587  0F1E                     	;# 
  3588  0F1F                     	;# 
  3589  0F20                     	;# 
  3590  0F21                     	;# 
  3591  0F22                     	;# 
  3592  0F23                     	;# 
  3593  0F24                     	;# 
  3594  0F25                     	;# 
  3595  0F26                     	;# 
  3596  0F27                     	;# 
  3597  0F28                     	;# 
  3598  0F29                     	;# 
  3599  0F2A                     	;# 
  3600  0F2B                     	;# 
  3601  0F2C                     	;# 
  3602  0F2D                     	;# 
  3603  0F2E                     	;# 
  3604  0F2F                     	;# 
  3605  0F30                     	;# 
  3606  0F31                     	;# 
  3607  0F32                     	;# 
  3608  0F33                     	;# 
  3609  0F34                     	;# 
  3610  0F35                     	;# 
  3611  0F36                     	;# 
  3612  0F37                     	;# 
  3613  0FE4                     	;# 
  3614  0FE5                     	;# 
  3615  0FE6                     	;# 
  3616  0FE7                     	;# 
  3617  0FE8                     	;# 
  3618  0FE9                     	;# 
  3619  0FEA                     	;# 
  3620  0FEB                     	;# 
  3621  0FED                     	;# 
  3622  0FEE                     	;# 
  3623  0FEF                     	;# 
  3624  0000                     	;# 
  3625  0001                     	;# 
  3626  0002                     	;# 
  3627  0003                     	;# 
  3628  0004                     	;# 
  3629  0005                     	;# 
  3630  0006                     	;# 
  3631  0007                     	;# 
  3632  0008                     	;# 
  3633  0009                     	;# 
  3634  000A                     	;# 
  3635  000B                     	;# 
  3636  000C                     	;# 
  3637  000D                     	;# 
  3638  000E                     	;# 
  3639  0010                     	;# 
  3640  0011                     	;# 
  3641  0012                     	;# 
  3642  0013                     	;# 
  3643  0014                     	;# 
  3644  0015                     	;# 
  3645  0016                     	;# 
  3646  0016                     	;# 
  3647  0017                     	;# 
  3648  0018                     	;# 
  3649  0019                     	;# 
  3650  001A                     	;# 
  3651  001A                     	;# 
  3652  001B                     	;# 
  3653  001B                     	;# 
  3654  001C                     	;# 
  3655  001D                     	;# 
  3656  001E                     	;# 
  3657  001F                     	;# 
  3658  008C                     	;# 
  3659  008D                     	;# 
  3660  008E                     	;# 
  3661  0090                     	;# 
  3662  0091                     	;# 
  3663  0092                     	;# 
  3664  0093                     	;# 
  3665  0094                     	;# 
  3666  0095                     	;# 
  3667  0096                     	;# 
  3668  0098                     	;# 
  3669  0099                     	;# 
  3670  009A                     	;# 
  3671  009B                     	;# 
  3672  009B                     	;# 
  3673  009C                     	;# 
  3674  009D                     	;# 
  3675  009E                     	;# 
  3676  009F                     	;# 
  3677  010C                     	;# 
  3678  010D                     	;# 
  3679  010E                     	;# 
  3680  0111                     	;# 
  3681  0112                     	;# 
  3682  0113                     	;# 
  3683  0114                     	;# 
  3684  0115                     	;# 
  3685  0116                     	;# 
  3686  0117                     	;# 
  3687  0118                     	;# 
  3688  0119                     	;# 
  3689  011C                     	;# 
  3690  018C                     	;# 
  3691  018D                     	;# 
  3692  018E                     	;# 
  3693  0191                     	;# 
  3694  0191                     	;# 
  3695  0192                     	;# 
  3696  0193                     	;# 
  3697  0193                     	;# 
  3698  0194                     	;# 
  3699  0195                     	;# 
  3700  0196                     	;# 
  3701  0197                     	;# 
  3702  0199                     	;# 
  3703  0199                     	;# 
  3704  0199                     	;# 
  3705  019A                     	;# 
  3706  019A                     	;# 
  3707  019A                     	;# 
  3708  019B                     	;# 
  3709  019B                     	;# 
  3710  019B                     	;# 
  3711  019B                     	;# 
  3712  019B                     	;# 
  3713  019C                     	;# 
  3714  019C                     	;# 
  3715  019C                     	;# 
  3716  019D                     	;# 
  3717  019D                     	;# 
  3718  019D                     	;# 
  3719  019E                     	;# 
  3720  019E                     	;# 
  3721  019E                     	;# 
  3722  019F                     	;# 
  3723  019F                     	;# 
  3724  019F                     	;# 
  3725  019F                     	;# 
  3726  019F                     	;# 
  3727  020C                     	;# 
  3728  020D                     	;# 
  3729  020E                     	;# 
  3730  0211                     	;# 
  3731  0211                     	;# 
  3732  0212                     	;# 
  3733  0212                     	;# 
  3734  0213                     	;# 
  3735  0213                     	;# 
  3736  0214                     	;# 
  3737  0214                     	;# 
  3738  0215                     	;# 
  3739  0215                     	;# 
  3740  0215                     	;# 
  3741  0215                     	;# 
  3742  0216                     	;# 
  3743  0216                     	;# 
  3744  0217                     	;# 
  3745  0217                     	;# 
  3746  028C                     	;# 
  3747  028D                     	;# 
  3748  028E                     	;# 
  3749  0291                     	;# 
  3750  0291                     	;# 
  3751  0292                     	;# 
  3752  0293                     	;# 
  3753  0294                     	;# 
  3754  0298                     	;# 
  3755  0298                     	;# 
  3756  0299                     	;# 
  3757  029A                     	;# 
  3758  029B                     	;# 
  3759  029E                     	;# 
  3760  030C                     	;# 
  3761  030D                     	;# 
  3762  030E                     	;# 
  3763  038C                     	;# 
  3764  038D                     	;# 
  3765  038E                     	;# 
  3766  0391                     	;# 
  3767  0392                     	;# 
  3768  0393                     	;# 
  3769  0394                     	;# 
  3770  0395                     	;# 
  3771  0396                     	;# 
  3772  0397                     	;# 
  3773  0398                     	;# 
  3774  0399                     	;# 
  3775  040E                     	;# 
  3776  0413                     	;# 
  3777  0413                     	;# 
  3778  0414                     	;# 
  3779  0414                     	;# 
  3780  0415                     	;# 
  3781  0416                     	;# 
  3782  0417                     	;# 
  3783  0418                     	;# 
  3784  041A                     	;# 
  3785  041A                     	;# 
  3786  041B                     	;# 
  3787  041B                     	;# 
  3788  041C                     	;# 
  3789  041D                     	;# 
  3790  041E                     	;# 
  3791  041F                     	;# 
  3792  0493                     	;# 
  3793  0494                     	;# 
  3794  0495                     	;# 
  3795  0496                     	;# 
  3796  049A                     	;# 
  3797  049B                     	;# 
  3798  049C                     	;# 
  3799  049D                     	;# 
  3800  058C                     	;# 
  3801  058C                     	;# 
  3802  058D                     	;# 
  3803  058E                     	;# 
  3804  058E                     	;# 
  3805  058F                     	;# 
  3806  0590                     	;# 
  3807  0590                     	;# 
  3808  0591                     	;# 
  3809  0592                     	;# 
  3810  0592                     	;# 
  3811  0593                     	;# 
  3812  0594                     	;# 
  3813  0594                     	;# 
  3814  0595                     	;# 
  3815  0596                     	;# 
  3816  0596                     	;# 
  3817  0597                     	;# 
  3818  0598                     	;# 
  3819  0599                     	;# 
  3820  059A                     	;# 
  3821  059B                     	;# 
  3822  059B                     	;# 
  3823  059C                     	;# 
  3824  059D                     	;# 
  3825  060C                     	;# 
  3826  060C                     	;# 
  3827  060D                     	;# 
  3828  060E                     	;# 
  3829  060F                     	;# 
  3830  060F                     	;# 
  3831  0610                     	;# 
  3832  0611                     	;# 
  3833  0612                     	;# 
  3834  0613                     	;# 
  3835  0614                     	;# 
  3836  0617                     	;# 
  3837  0618                     	;# 
  3838  0619                     	;# 
  3839  061A                     	;# 
  3840  061B                     	;# 
  3841  061C                     	;# 
  3842  0691                     	;# 
  3843  0692                     	;# 
  3844  0693                     	;# 
  3845  0694                     	;# 
  3846  0695                     	;# 
  3847  0696                     	;# 
  3848  0697                     	;# 
  3849  0699                     	;# 
  3850  069A                     	;# 
  3851  0711                     	;# 
  3852  0712                     	;# 
  3853  0713                     	;# 
  3854  0714                     	;# 
  3855  0715                     	;# 
  3856  0718                     	;# 
  3857  0718                     	;# 
  3858  0719                     	;# 
  3859  071A                     	;# 
  3860  071A                     	;# 
  3861  071B                     	;# 
  3862  071C                     	;# 
  3863  071D                     	;# 
  3864  0791                     	;# 
  3865  0791                     	;# 
  3866  0792                     	;# 
  3867  0793                     	;# 
  3868  0793                     	;# 
  3869  0794                     	;# 
  3870  0795                     	;# 
  3871  0795                     	;# 
  3872  0796                     	;# 
  3873  0797                     	;# 
  3874  0797                     	;# 
  3875  0798                     	;# 
  3876  0799                     	;# 
  3877  079A                     	;# 
  3878  080C                     	;# 
  3879  080C                     	;# 
  3880  080D                     	;# 
  3881  080E                     	;# 
  3882  080E                     	;# 
  3883  080F                     	;# 
  3884  0810                     	;# 
  3885  0810                     	;# 
  3886  0811                     	;# 
  3887  0812                     	;# 
  3888  0812                     	;# 
  3889  0813                     	;# 
  3890  0814                     	;# 
  3891  0815                     	;# 
  3892  0816                     	;# 
  3893  0817                     	;# 
  3894  0818                     	;# 
  3895  0819                     	;# 
  3896  081A                     	;# 
  3897  081A                     	;# 
  3898  081B                     	;# 
  3899  081C                     	;# 
  3900  081C                     	;# 
  3901  081D                     	;# 
  3902  088C                     	;# 
  3903  088D                     	;# 
  3904  088E                     	;# 
  3905  088F                     	;# 
  3906  088F                     	;# 
  3907  0890                     	;# 
  3908  0891                     	;# 
  3909  0892                     	;# 
  3910  0893                     	;# 
  3911  0893                     	;# 
  3912  0894                     	;# 
  3913  0895                     	;# 
  3914  0896                     	;# 
  3915  0897                     	;# 
  3916  0897                     	;# 
  3917  0898                     	;# 
  3918  0899                     	;# 
  3919  0D8C                     	;# 
  3920  0D8C                     	;# 
  3921  0D8D                     	;# 
  3922  0D8E                     	;# 
  3923  0D8F                     	;# 
  3924  0D8F                     	;# 
  3925  0D90                     	;# 
  3926  0D91                     	;# 
  3927  0D92                     	;# 
  3928  0D92                     	;# 
  3929  0D93                     	;# 
  3930  0D94                     	;# 
  3931  0D95                     	;# 
  3932  0D95                     	;# 
  3933  0D96                     	;# 
  3934  0D97                     	;# 
  3935  0D98                     	;# 
  3936  0D99                     	;# 
  3937  0D9A                     	;# 
  3938  0D9B                     	;# 
  3939  0D9C                     	;# 
  3940  0D9D                     	;# 
  3941  0D9E                     	;# 
  3942  0D9E                     	;# 
  3943  0D9F                     	;# 
  3944  0DA0                     	;# 
  3945  0DA1                     	;# 
  3946  0DA1                     	;# 
  3947  0DA2                     	;# 
  3948  0DA3                     	;# 
  3949  0DA4                     	;# 
  3950  0DA4                     	;# 
  3951  0DA5                     	;# 
  3952  0DA6                     	;# 
  3953  0DA7                     	;# 
  3954  0DA7                     	;# 
  3955  0DA8                     	;# 
  3956  0DA9                     	;# 
  3957  0DAA                     	;# 
  3958  0DAB                     	;# 
  3959  0DAC                     	;# 
  3960  0DAD                     	;# 
  3961  0DAE                     	;# 
  3962  0DAF                     	;# 
  3963  0E0F                     	;# 
  3964  0E10                     	;# 
  3965  0E11                     	;# 
  3966  0E12                     	;# 
  3967  0E13                     	;# 
  3968  0E14                     	;# 
  3969  0E15                     	;# 
  3970  0E16                     	;# 
  3971  0E17                     	;# 
  3972  0E18                     	;# 
  3973  0E19                     	;# 
  3974  0E1A                     	;# 
  3975  0E1B                     	;# 
  3976  0E1C                     	;# 
  3977  0E1D                     	;# 
  3978  0E1E                     	;# 
  3979  0E1F                     	;# 
  3980  0E20                     	;# 
  3981  0E21                     	;# 
  3982  0E22                     	;# 
  3983  0E23                     	;# 
  3984  0E24                     	;# 
  3985  0E25                     	;# 
  3986  0E26                     	;# 
  3987  0E27                     	;# 
  3988  0E28                     	;# 
  3989  0E29                     	;# 
  3990  0E2A                     	;# 
  3991  0E2B                     	;# 
  3992  0E2C                     	;# 
  3993  0E2D                     	;# 
  3994  0E2E                     	;# 
  3995  0E90                     	;# 
  3996  0E91                     	;# 
  3997  0E92                     	;# 
  3998  0E94                     	;# 
  3999  0E95                     	;# 
  4000  0E9C                     	;# 
  4001  0E9D                     	;# 
  4002  0E9E                     	;# 
  4003  0E9F                     	;# 
  4004  0EA0                     	;# 
  4005  0EA1                     	;# 
  4006  0EA2                     	;# 
  4007  0EA3                     	;# 
  4008  0EA4                     	;# 
  4009  0EA5                     	;# 
  4010  0EA6                     	;# 
  4011  0EA7                     	;# 
  4012  0F0F                     	;# 
  4013  0F10                     	;# 
  4014  0F11                     	;# 
  4015  0F12                     	;# 
  4016  0F13                     	;# 
  4017  0F14                     	;# 
  4018  0F15                     	;# 
  4019  0F16                     	;# 
  4020  0F17                     	;# 
  4021  0F18                     	;# 
  4022  0F19                     	;# 
  4023  0F1A                     	;# 
  4024  0F1B                     	;# 
  4025  0F1C                     	;# 
  4026  0F1D                     	;# 
  4027  0F1E                     	;# 
  4028  0F1F                     	;# 
  4029  0F20                     	;# 
  4030  0F21                     	;# 
  4031  0F22                     	;# 
  4032  0F23                     	;# 
  4033  0F24                     	;# 
  4034  0F25                     	;# 
  4035  0F26                     	;# 
  4036  0F27                     	;# 
  4037  0F28                     	;# 
  4038  0F29                     	;# 
  4039  0F2A                     	;# 
  4040  0F2B                     	;# 
  4041  0F2C                     	;# 
  4042  0F2D                     	;# 
  4043  0F2E                     	;# 
  4044  0F2F                     	;# 
  4045  0F30                     	;# 
  4046  0F31                     	;# 
  4047  0F32                     	;# 
  4048  0F33                     	;# 
  4049  0F34                     	;# 
  4050  0F35                     	;# 
  4051  0F36                     	;# 
  4052  0F37                     	;# 
  4053  0FE4                     	;# 
  4054  0FE5                     	;# 
  4055  0FE6                     	;# 
  4056  0FE7                     	;# 
  4057  0FE8                     	;# 
  4058  0FE9                     	;# 
  4059  0FEA                     	;# 
  4060  0FEB                     	;# 
  4061  0FED                     	;# 
  4062  0FEE                     	;# 
  4063  0FEF                     	;# 
  4064  0000                     	;# 
  4065  0001                     	;# 
  4066  0002                     	;# 
  4067  0003                     	;# 
  4068  0004                     	;# 
  4069  0005                     	;# 
  4070  0006                     	;# 
  4071  0007                     	;# 
  4072  0008                     	;# 
  4073  0009                     	;# 
  4074  000A                     	;# 
  4075  000B                     	;# 
  4076  000C                     	;# 
  4077  000D                     	;# 
  4078  000E                     	;# 
  4079  0010                     	;# 
  4080  0011                     	;# 
  4081  0012                     	;# 
  4082  0013                     	;# 
  4083  0014                     	;# 
  4084  0015                     	;# 
  4085  0016                     	;# 
  4086  0016                     	;# 
  4087  0017                     	;# 
  4088  0018                     	;# 
  4089  0019                     	;# 
  4090  001A                     	;# 
  4091  001A                     	;# 
  4092  001B                     	;# 
  4093  001B                     	;# 
  4094  001C                     	;# 
  4095  001D                     	;# 
  4096  001E                     	;# 
  4097  001F                     	;# 
  4098  008C                     	;# 
  4099  008D                     	;# 
  4100  008E                     	;# 
  4101  0090                     	;# 
  4102  0091                     	;# 
  4103  0092                     	;# 
  4104  0093                     	;# 
  4105  0094                     	;# 
  4106  0095                     	;# 
  4107  0096                     	;# 
  4108  0098                     	;# 
  4109  0099                     	;# 
  4110  009A                     	;# 
  4111  009B                     	;# 
  4112  009B                     	;# 
  4113  009C                     	;# 
  4114  009D                     	;# 
  4115  009E                     	;# 
  4116  009F                     	;# 
  4117  010C                     	;# 
  4118  010D                     	;# 
  4119  010E                     	;# 
  4120  0111                     	;# 
  4121  0112                     	;# 
  4122  0113                     	;# 
  4123  0114                     	;# 
  4124  0115                     	;# 
  4125  0116                     	;# 
  4126  0117                     	;# 
  4127  0118                     	;# 
  4128  0119                     	;# 
  4129  011C                     	;# 
  4130  018C                     	;# 
  4131  018D                     	;# 
  4132  018E                     	;# 
  4133  0191                     	;# 
  4134  0191                     	;# 
  4135  0192                     	;# 
  4136  0193                     	;# 
  4137  0193                     	;# 
  4138  0194                     	;# 
  4139  0195                     	;# 
  4140  0196                     	;# 
  4141  0197                     	;# 
  4142  0199                     	;# 
  4143  0199                     	;# 
  4144  0199                     	;# 
  4145  019A                     	;# 
  4146  019A                     	;# 
  4147  019A                     	;# 
  4148  019B                     	;# 
  4149  019B                     	;# 
  4150  019B                     	;# 
  4151  019B                     	;# 
  4152  019B                     	;# 
  4153  019C                     	;# 
  4154  019C                     	;# 
  4155  019C                     	;# 
  4156  019D                     	;# 
  4157  019D                     	;# 
  4158  019D                     	;# 
  4159  019E                     	;# 
  4160  019E                     	;# 
  4161  019E                     	;# 
  4162  019F                     	;# 
  4163  019F                     	;# 
  4164  019F                     	;# 
  4165  019F                     	;# 
  4166  019F                     	;# 
  4167  020C                     	;# 
  4168  020D                     	;# 
  4169  020E                     	;# 
  4170  0211                     	;# 
  4171  0211                     	;# 
  4172  0212                     	;# 
  4173  0212                     	;# 
  4174  0213                     	;# 
  4175  0213                     	;# 
  4176  0214                     	;# 
  4177  0214                     	;# 
  4178  0215                     	;# 
  4179  0215                     	;# 
  4180  0215                     	;# 
  4181  0215                     	;# 
  4182  0216                     	;# 
  4183  0216                     	;# 
  4184  0217                     	;# 
  4185  0217                     	;# 
  4186  028C                     	;# 
  4187  028D                     	;# 
  4188  028E                     	;# 
  4189  0291                     	;# 
  4190  0291                     	;# 
  4191  0292                     	;# 
  4192  0293                     	;# 
  4193  0294                     	;# 
  4194  0298                     	;# 
  4195  0298                     	;# 
  4196  0299                     	;# 
  4197  029A                     	;# 
  4198  029B                     	;# 
  4199  029E                     	;# 
  4200  030C                     	;# 
  4201  030D                     	;# 
  4202  030E                     	;# 
  4203  038C                     	;# 
  4204  038D                     	;# 
  4205  038E                     	;# 
  4206  0391                     	;# 
  4207  0392                     	;# 
  4208  0393                     	;# 
  4209  0394                     	;# 
  4210  0395                     	;# 
  4211  0396                     	;# 
  4212  0397                     	;# 
  4213  0398                     	;# 
  4214  0399                     	;# 
  4215  040E                     	;# 
  4216  0413                     	;# 
  4217  0413                     	;# 
  4218  0414                     	;# 
  4219  0414                     	;# 
  4220  0415                     	;# 
  4221  0416                     	;# 
  4222  0417                     	;# 
  4223  0418                     	;# 
  4224  041A                     	;# 
  4225  041A                     	;# 
  4226  041B                     	;# 
  4227  041B                     	;# 
  4228  041C                     	;# 
  4229  041D                     	;# 
  4230  041E                     	;# 
  4231  041F                     	;# 
  4232  0493                     	;# 
  4233  0494                     	;# 
  4234  0495                     	;# 
  4235  0496                     	;# 
  4236  049A                     	;# 
  4237  049B                     	;# 
  4238  049C                     	;# 
  4239  049D                     	;# 
  4240  058C                     	;# 
  4241  058C                     	;# 
  4242  058D                     	;# 
  4243  058E                     	;# 
  4244  058E                     	;# 
  4245  058F                     	;# 
  4246  0590                     	;# 
  4247  0590                     	;# 
  4248  0591                     	;# 
  4249  0592                     	;# 
  4250  0592                     	;# 
  4251  0593                     	;# 
  4252  0594                     	;# 
  4253  0594                     	;# 
  4254  0595                     	;# 
  4255  0596                     	;# 
  4256  0596                     	;# 
  4257  0597                     	;# 
  4258  0598                     	;# 
  4259  0599                     	;# 
  4260  059A                     	;# 
  4261  059B                     	;# 
  4262  059B                     	;# 
  4263  059C                     	;# 
  4264  059D                     	;# 
  4265  060C                     	;# 
  4266  060C                     	;# 
  4267  060D                     	;# 
  4268  060E                     	;# 
  4269  060F                     	;# 
  4270  060F                     	;# 
  4271  0610                     	;# 
  4272  0611                     	;# 
  4273  0612                     	;# 
  4274  0613                     	;# 
  4275  0614                     	;# 
  4276  0617                     	;# 
  4277  0618                     	;# 
  4278  0619                     	;# 
  4279  061A                     	;# 
  4280  061B                     	;# 
  4281  061C                     	;# 
  4282  0691                     	;# 
  4283  0692                     	;# 
  4284  0693                     	;# 
  4285  0694                     	;# 
  4286  0695                     	;# 
  4287  0696                     	;# 
  4288  0697                     	;# 
  4289  0699                     	;# 
  4290  069A                     	;# 
  4291  0711                     	;# 
  4292  0712                     	;# 
  4293  0713                     	;# 
  4294  0714                     	;# 
  4295  0715                     	;# 
  4296  0718                     	;# 
  4297  0718                     	;# 
  4298  0719                     	;# 
  4299  071A                     	;# 
  4300  071A                     	;# 
  4301  071B                     	;# 
  4302  071C                     	;# 
  4303  071D                     	;# 
  4304  0791                     	;# 
  4305  0791                     	;# 
  4306  0792                     	;# 
  4307  0793                     	;# 
  4308  0793                     	;# 
  4309  0794                     	;# 
  4310  0795                     	;# 
  4311  0795                     	;# 
  4312  0796                     	;# 
  4313  0797                     	;# 
  4314  0797                     	;# 
  4315  0798                     	;# 
  4316  0799                     	;# 
  4317  079A                     	;# 
  4318  080C                     	;# 
  4319  080C                     	;# 
  4320  080D                     	;# 
  4321  080E                     	;# 
  4322  080E                     	;# 
  4323  080F                     	;# 
  4324  0810                     	;# 
  4325  0810                     	;# 
  4326  0811                     	;# 
  4327  0812                     	;# 
  4328  0812                     	;# 
  4329  0813                     	;# 
  4330  0814                     	;# 
  4331  0815                     	;# 
  4332  0816                     	;# 
  4333  0817                     	;# 
  4334  0818                     	;# 
  4335  0819                     	;# 
  4336  081A                     	;# 
  4337  081A                     	;# 
  4338  081B                     	;# 
  4339  081C                     	;# 
  4340  081C                     	;# 
  4341  081D                     	;# 
  4342  088C                     	;# 
  4343  088D                     	;# 
  4344  088E                     	;# 
  4345  088F                     	;# 
  4346  088F                     	;# 
  4347  0890                     	;# 
  4348  0891                     	;# 
  4349  0892                     	;# 
  4350  0893                     	;# 
  4351  0893                     	;# 
  4352  0894                     	;# 
  4353  0895                     	;# 
  4354  0896                     	;# 
  4355  0897                     	;# 
  4356  0897                     	;# 
  4357  0898                     	;# 
  4358  0899                     	;# 
  4359  0D8C                     	;# 
  4360  0D8C                     	;# 
  4361  0D8D                     	;# 
  4362  0D8E                     	;# 
  4363  0D8F                     	;# 
  4364  0D8F                     	;# 
  4365  0D90                     	;# 
  4366  0D91                     	;# 
  4367  0D92                     	;# 
  4368  0D92                     	;# 
  4369  0D93                     	;# 
  4370  0D94                     	;# 
  4371  0D95                     	;# 
  4372  0D95                     	;# 
  4373  0D96                     	;# 
  4374  0D97                     	;# 
  4375  0D98                     	;# 
  4376  0D99                     	;# 
  4377  0D9A                     	;# 
  4378  0D9B                     	;# 
  4379  0D9C                     	;# 
  4380  0D9D                     	;# 
  4381  0D9E                     	;# 
  4382  0D9E                     	;# 
  4383  0D9F                     	;# 
  4384  0DA0                     	;# 
  4385  0DA1                     	;# 
  4386  0DA1                     	;# 
  4387  0DA2                     	;# 
  4388  0DA3                     	;# 
  4389  0DA4                     	;# 
  4390  0DA4                     	;# 
  4391  0DA5                     	;# 
  4392  0DA6                     	;# 
  4393  0DA7                     	;# 
  4394  0DA7                     	;# 
  4395  0DA8                     	;# 
  4396  0DA9                     	;# 
  4397  0DAA                     	;# 
  4398  0DAB                     	;# 
  4399  0DAC                     	;# 
  4400  0DAD                     	;# 
  4401  0DAE                     	;# 
  4402  0DAF                     	;# 
  4403  0E0F                     	;# 
  4404  0E10                     	;# 
  4405  0E11                     	;# 
  4406  0E12                     	;# 
  4407  0E13                     	;# 
  4408  0E14                     	;# 
  4409  0E15                     	;# 
  4410  0E16                     	;# 
  4411  0E17                     	;# 
  4412  0E18                     	;# 
  4413  0E19                     	;# 
  4414  0E1A                     	;# 
  4415  0E1B                     	;# 
  4416  0E1C                     	;# 
  4417  0E1D                     	;# 
  4418  0E1E                     	;# 
  4419  0E1F                     	;# 
  4420  0E20                     	;# 
  4421  0E21                     	;# 
  4422  0E22                     	;# 
  4423  0E23                     	;# 
  4424  0E24                     	;# 
  4425  0E25                     	;# 
  4426  0E26                     	;# 
  4427  0E27                     	;# 
  4428  0E28                     	;# 
  4429  0E29                     	;# 
  4430  0E2A                     	;# 
  4431  0E2B                     	;# 
  4432  0E2C                     	;# 
  4433  0E2D                     	;# 
  4434  0E2E                     	;# 
  4435  0E90                     	;# 
  4436  0E91                     	;# 
  4437  0E92                     	;# 
  4438  0E94                     	;# 
  4439  0E95                     	;# 
  4440  0E9C                     	;# 
  4441  0E9D                     	;# 
  4442  0E9E                     	;# 
  4443  0E9F                     	;# 
  4444  0EA0                     	;# 
  4445  0EA1                     	;# 
  4446  0EA2                     	;# 
  4447  0EA3                     	;# 
  4448  0EA4                     	;# 
  4449  0EA5                     	;# 
  4450  0EA6                     	;# 
  4451  0EA7                     	;# 
  4452  0F0F                     	;# 
  4453  0F10                     	;# 
  4454  0F11                     	;# 
  4455  0F12                     	;# 
  4456  0F13                     	;# 
  4457  0F14                     	;# 
  4458  0F15                     	;# 
  4459  0F16                     	;# 
  4460  0F17                     	;# 
  4461  0F18                     	;# 
  4462  0F19                     	;# 
  4463  0F1A                     	;# 
  4464  0F1B                     	;# 
  4465  0F1C                     	;# 
  4466  0F1D                     	;# 
  4467  0F1E                     	;# 
  4468  0F1F                     	;# 
  4469  0F20                     	;# 
  4470  0F21                     	;# 
  4471  0F22                     	;# 
  4472  0F23                     	;# 
  4473  0F24                     	;# 
  4474  0F25                     	;# 
  4475  0F26                     	;# 
  4476  0F27                     	;# 
  4477  0F28                     	;# 
  4478  0F29                     	;# 
  4479  0F2A                     	;# 
  4480  0F2B                     	;# 
  4481  0F2C                     	;# 
  4482  0F2D                     	;# 
  4483  0F2E                     	;# 
  4484  0F2F                     	;# 
  4485  0F30                     	;# 
  4486  0F31                     	;# 
  4487  0F32                     	;# 
  4488  0F33                     	;# 
  4489  0F34                     	;# 
  4490  0F35                     	;# 
  4491  0F36                     	;# 
  4492  0F37                     	;# 
  4493  0FE4                     	;# 
  4494  0FE5                     	;# 
  4495  0FE6                     	;# 
  4496  0FE7                     	;# 
  4497  0FE8                     	;# 
  4498  0FE9                     	;# 
  4499  0FEA                     	;# 
  4500  0FEB                     	;# 
  4501  0FED                     	;# 
  4502  0FEE                     	;# 
  4503  0FEF                     	;# 
  4504  0000                     	;# 
  4505  0001                     	;# 
  4506  0002                     	;# 
  4507  0003                     	;# 
  4508  0004                     	;# 
  4509  0005                     	;# 
  4510  0006                     	;# 
  4511  0007                     	;# 
  4512  0008                     	;# 
  4513  0009                     	;# 
  4514  000A                     	;# 
  4515  000B                     	;# 
  4516  000C                     	;# 
  4517  000D                     	;# 
  4518  000E                     	;# 
  4519  0010                     	;# 
  4520  0011                     	;# 
  4521  0012                     	;# 
  4522  0013                     	;# 
  4523  0014                     	;# 
  4524  0015                     	;# 
  4525  0016                     	;# 
  4526  0016                     	;# 
  4527  0017                     	;# 
  4528  0018                     	;# 
  4529  0019                     	;# 
  4530  001A                     	;# 
  4531  001A                     	;# 
  4532  001B                     	;# 
  4533  001B                     	;# 
  4534  001C                     	;# 
  4535  001D                     	;# 
  4536  001E                     	;# 
  4537  001F                     	;# 
  4538  008C                     	;# 
  4539  008D                     	;# 
  4540  008E                     	;# 
  4541  0090                     	;# 
  4542  0091                     	;# 
  4543  0092                     	;# 
  4544  0093                     	;# 
  4545  0094                     	;# 
  4546  0095                     	;# 
  4547  0096                     	;# 
  4548  0098                     	;# 
  4549  0099                     	;# 
  4550  009A                     	;# 
  4551  009B                     	;# 
  4552  009B                     	;# 
  4553  009C                     	;# 
  4554  009D                     	;# 
  4555  009E                     	;# 
  4556  009F                     	;# 
  4557  010C                     	;# 
  4558  010D                     	;# 
  4559  010E                     	;# 
  4560  0111                     	;# 
  4561  0112                     	;# 
  4562  0113                     	;# 
  4563  0114                     	;# 
  4564  0115                     	;# 
  4565  0116                     	;# 
  4566  0117                     	;# 
  4567  0118                     	;# 
  4568  0119                     	;# 
  4569  011C                     	;# 
  4570  018C                     	;# 
  4571  018D                     	;# 
  4572  018E                     	;# 
  4573  0191                     	;# 
  4574  0191                     	;# 
  4575  0192                     	;# 
  4576  0193                     	;# 
  4577  0193                     	;# 
  4578  0194                     	;# 
  4579  0195                     	;# 
  4580  0196                     	;# 
  4581  0197                     	;# 
  4582  0199                     	;# 
  4583  0199                     	;# 
  4584  0199                     	;# 
  4585  019A                     	;# 
  4586  019A                     	;# 
  4587  019A                     	;# 
  4588  019B                     	;# 
  4589  019B                     	;# 
  4590  019B                     	;# 
  4591  019B                     	;# 
  4592  019B                     	;# 
  4593  019C                     	;# 
  4594  019C                     	;# 
  4595  019C                     	;# 
  4596  019D                     	;# 
  4597  019D                     	;# 
  4598  019D                     	;# 
  4599  019E                     	;# 
  4600  019E                     	;# 
  4601  019E                     	;# 
  4602  019F                     	;# 
  4603  019F                     	;# 
  4604  019F                     	;# 
  4605  019F                     	;# 
  4606  019F                     	;# 
  4607  020C                     	;# 
  4608  020D                     	;# 
  4609  020E                     	;# 
  4610  0211                     	;# 
  4611  0211                     	;# 
  4612  0212                     	;# 
  4613  0212                     	;# 
  4614  0213                     	;# 
  4615  0213                     	;# 
  4616  0214                     	;# 
  4617  0214                     	;# 
  4618  0215                     	;# 
  4619  0215                     	;# 
  4620  0215                     	;# 
  4621  0215                     	;# 
  4622  0216                     	;# 
  4623  0216                     	;# 
  4624  0217                     	;# 
  4625  0217                     	;# 
  4626  028C                     	;# 
  4627  028D                     	;# 
  4628  028E                     	;# 
  4629  0291                     	;# 
  4630  0291                     	;# 
  4631  0292                     	;# 
  4632  0293                     	;# 
  4633  0294                     	;# 
  4634  0298                     	;# 
  4635  0298                     	;# 
  4636  0299                     	;# 
  4637  029A                     	;# 
  4638  029B                     	;# 
  4639  029E                     	;# 
  4640  030C                     	;# 
  4641  030D                     	;# 
  4642  030E                     	;# 
  4643  038C                     	;# 
  4644  038D                     	;# 
  4645  038E                     	;# 
  4646  0391                     	;# 
  4647  0392                     	;# 
  4648  0393                     	;# 
  4649  0394                     	;# 
  4650  0395                     	;# 
  4651  0396                     	;# 
  4652  0397                     	;# 
  4653  0398                     	;# 
  4654  0399                     	;# 
  4655  040E                     	;# 
  4656  0413                     	;# 
  4657  0413                     	;# 
  4658  0414                     	;# 
  4659  0414                     	;# 
  4660  0415                     	;# 
  4661  0416                     	;# 
  4662  0417                     	;# 
  4663  0418                     	;# 
  4664  041A                     	;# 
  4665  041A                     	;# 
  4666  041B                     	;# 
  4667  041B                     	;# 
  4668  041C                     	;# 
  4669  041D                     	;# 
  4670  041E                     	;# 
  4671  041F                     	;# 
  4672  0493                     	;# 
  4673  0494                     	;# 
  4674  0495                     	;# 
  4675  0496                     	;# 
  4676  049A                     	;# 
  4677  049B                     	;# 
  4678  049C                     	;# 
  4679  049D                     	;# 
  4680  058C                     	;# 
  4681  058C                     	;# 
  4682  058D                     	;# 
  4683  058E                     	;# 
  4684  058E                     	;# 
  4685  058F                     	;# 
  4686  0590                     	;# 
  4687  0590                     	;# 
  4688  0591                     	;# 
  4689  0592                     	;# 
  4690  0592                     	;# 
  4691  0593                     	;# 
  4692  0594                     	;# 
  4693  0594                     	;# 
  4694  0595                     	;# 
  4695  0596                     	;# 
  4696  0596                     	;# 
  4697  0597                     	;# 
  4698  0598                     	;# 
  4699  0599                     	;# 
  4700  059A                     	;# 
  4701  059B                     	;# 
  4702  059B                     	;# 
  4703  059C                     	;# 
  4704  059D                     	;# 
  4705  060C                     	;# 
  4706  060C                     	;# 
  4707  060D                     	;# 
  4708  060E                     	;# 
  4709  060F                     	;# 
  4710  060F                     	;# 
  4711  0610                     	;# 
  4712  0611                     	;# 
  4713  0612                     	;# 
  4714  0613                     	;# 
  4715  0614                     	;# 
  4716  0617                     	;# 
  4717  0618                     	;# 
  4718  0619                     	;# 
  4719  061A                     	;# 
  4720  061B                     	;# 
  4721  061C                     	;# 
  4722  0691                     	;# 
  4723  0692                     	;# 
  4724  0693                     	;# 
  4725  0694                     	;# 
  4726  0695                     	;# 
  4727  0696                     	;# 
  4728  0697                     	;# 
  4729  0699                     	;# 
  4730  069A                     	;# 
  4731  0711                     	;# 
  4732  0712                     	;# 
  4733  0713                     	;# 
  4734  0714                     	;# 
  4735  0715                     	;# 
  4736  0718                     	;# 
  4737  0718                     	;# 
  4738  0719                     	;# 
  4739  071A                     	;# 
  4740  071A                     	;# 
  4741  071B                     	;# 
  4742  071C                     	;# 
  4743  071D                     	;# 
  4744  0791                     	;# 
  4745  0791                     	;# 
  4746  0792                     	;# 
  4747  0793                     	;# 
  4748  0793                     	;# 
  4749  0794                     	;# 
  4750  0795                     	;# 
  4751  0795                     	;# 
  4752  0796                     	;# 
  4753  0797                     	;# 
  4754  0797                     	;# 
  4755  0798                     	;# 
  4756  0799                     	;# 
  4757  079A                     	;# 
  4758  080C                     	;# 
  4759  080C                     	;# 
  4760  080D                     	;# 
  4761  080E                     	;# 
  4762  080E                     	;# 
  4763  080F                     	;# 
  4764  0810                     	;# 
  4765  0810                     	;# 
  4766  0811                     	;# 
  4767  0812                     	;# 
  4768  0812                     	;# 
  4769  0813                     	;# 
  4770  0814                     	;# 
  4771  0815                     	;# 
  4772  0816                     	;# 
  4773  0817                     	;# 
  4774  0818                     	;# 
  4775  0819                     	;# 
  4776  081A                     	;# 
  4777  081A                     	;# 
  4778  081B                     	;# 
  4779  081C                     	;# 
  4780  081C                     	;# 
  4781  081D                     	;# 
  4782  088C                     	;# 
  4783  088D                     	;# 
  4784  088E                     	;# 
  4785  088F                     	;# 
  4786  088F                     	;# 
  4787  0890                     	;# 
  4788  0891                     	;# 
  4789  0892                     	;# 
  4790  0893                     	;# 
  4791  0893                     	;# 
  4792  0894                     	;# 
  4793  0895                     	;# 
  4794  0896                     	;# 
  4795  0897                     	;# 
  4796  0897                     	;# 
  4797  0898                     	;# 
  4798  0899                     	;# 
  4799  0D8C                     	;# 
  4800  0D8C                     	;# 
  4801  0D8D                     	;# 
  4802  0D8E                     	;# 
  4803  0D8F                     	;# 
  4804  0D8F                     	;# 
  4805  0D90                     	;# 
  4806  0D91                     	;# 
  4807  0D92                     	;# 
  4808  0D92                     	;# 
  4809  0D93                     	;# 
  4810  0D94                     	;# 
  4811  0D95                     	;# 
  4812  0D95                     	;# 
  4813  0D96                     	;# 
  4814  0D97                     	;# 
  4815  0D98                     	;# 
  4816  0D99                     	;# 
  4817  0D9A                     	;# 
  4818  0D9B                     	;# 
  4819  0D9C                     	;# 
  4820  0D9D                     	;# 
  4821  0D9E                     	;# 
  4822  0D9E                     	;# 
  4823  0D9F                     	;# 
  4824  0DA0                     	;# 
  4825  0DA1                     	;# 
  4826  0DA1                     	;# 
  4827  0DA2                     	;# 
  4828  0DA3                     	;# 
  4829  0DA4                     	;# 
  4830  0DA4                     	;# 
  4831  0DA5                     	;# 
  4832  0DA6                     	;# 
  4833  0DA7                     	;# 
  4834  0DA7                     	;# 
  4835  0DA8                     	;# 
  4836  0DA9                     	;# 
  4837  0DAA                     	;# 
  4838  0DAB                     	;# 
  4839  0DAC                     	;# 
  4840  0DAD                     	;# 
  4841  0DAE                     	;# 
  4842  0DAF                     	;# 
  4843  0E0F                     	;# 
  4844  0E10                     	;# 
  4845  0E11                     	;# 
  4846  0E12                     	;# 
  4847  0E13                     	;# 
  4848  0E14                     	;# 
  4849  0E15                     	;# 
  4850  0E16                     	;# 
  4851  0E17                     	;# 
  4852  0E18                     	;# 
  4853  0E19                     	;# 
  4854  0E1A                     	;# 
  4855  0E1B                     	;# 
  4856  0E1C                     	;# 
  4857  0E1D                     	;# 
  4858  0E1E                     	;# 
  4859  0E1F                     	;# 
  4860  0E20                     	;# 
  4861  0E21                     	;# 
  4862  0E22                     	;# 
  4863  0E23                     	;# 
  4864  0E24                     	;# 
  4865  0E25                     	;# 
  4866  0E26                     	;# 
  4867  0E27                     	;# 
  4868  0E28                     	;# 
  4869  0E29                     	;# 
  4870  0E2A                     	;# 
  4871  0E2B                     	;# 
  4872  0E2C                     	;# 
  4873  0E2D                     	;# 
  4874  0E2E                     	;# 
  4875  0E90                     	;# 
  4876  0E91                     	;# 
  4877  0E92                     	;# 
  4878  0E94                     	;# 
  4879  0E95                     	;# 
  4880  0E9C                     	;# 
  4881  0E9D                     	;# 
  4882  0E9E                     	;# 
  4883  0E9F                     	;# 
  4884  0EA0                     	;# 
  4885  0EA1                     	;# 
  4886  0EA2                     	;# 
  4887  0EA3                     	;# 
  4888  0EA4                     	;# 
  4889  0EA5                     	;# 
  4890  0EA6                     	;# 
  4891  0EA7                     	;# 
  4892  0F0F                     	;# 
  4893  0F10                     	;# 
  4894  0F11                     	;# 
  4895  0F12                     	;# 
  4896  0F13                     	;# 
  4897  0F14                     	;# 
  4898  0F15                     	;# 
  4899  0F16                     	;# 
  4900  0F17                     	;# 
  4901  0F18                     	;# 
  4902  0F19                     	;# 
  4903  0F1A                     	;# 
  4904  0F1B                     	;# 
  4905  0F1C                     	;# 
  4906  0F1D                     	;# 
  4907  0F1E                     	;# 
  4908  0F1F                     	;# 
  4909  0F20                     	;# 
  4910  0F21                     	;# 
  4911  0F22                     	;# 
  4912  0F23                     	;# 
  4913  0F24                     	;# 
  4914  0F25                     	;# 
  4915  0F26                     	;# 
  4916  0F27                     	;# 
  4917  0F28                     	;# 
  4918  0F29                     	;# 
  4919  0F2A                     	;# 
  4920  0F2B                     	;# 
  4921  0F2C                     	;# 
  4922  0F2D                     	;# 
  4923  0F2E                     	;# 
  4924  0F2F                     	;# 
  4925  0F30                     	;# 
  4926  0F31                     	;# 
  4927  0F32                     	;# 
  4928  0F33                     	;# 
  4929  0F34                     	;# 
  4930  0F35                     	;# 
  4931  0F36                     	;# 
  4932  0F37                     	;# 
  4933  0FE4                     	;# 
  4934  0FE5                     	;# 
  4935  0FE6                     	;# 
  4936  0FE7                     	;# 
  4937  0FE8                     	;# 
  4938  0FE9                     	;# 
  4939  0FEA                     	;# 
  4940  0FEB                     	;# 
  4941  0FED                     	;# 
  4942  0FEE                     	;# 
  4943  0FEF                     	;# 
  4944                           
  4945                           	psect	idataBANK1
  4946  0D7C                     __pidataBANK1:	
  4947                           
  4948                           ;initializer for _display_data_1
  4949  0D7C  3453               	retlw	83
  4950  0D7D  343A               	retlw	58
  4951  0D7E  3430               	retlw	48
  4952  0D7F  3430               	retlw	48
  4953  0D80  3430               	retlw	48
  4954  0D81  344D               	retlw	77
  4955  0D82  343A               	retlw	58
  4956  0D83  3430               	retlw	48
  4957  0D84  3430               	retlw	48
  4958  0D85  3430               	retlw	48
  4959  0D86  344C               	retlw	76
  4960  0D87  343A               	retlw	58
  4961  0D88  3430               	retlw	48
  4962  0D89  3430               	retlw	48
  4963  0D8A  3430               	retlw	48
  4964  0D8B  3400               	retlw	0
  4965                           
  4966                           ;initializer for _clearDataOk_2
  4967  0D8C  3463               	retlw	99
  4968  0D8D  346F               	retlw	111
  4969  0D8E  346D               	retlw	109
  4970  0D8F  3470               	retlw	112
  4971  0D90  346C               	retlw	108
  4972  0D91  3465               	retlw	101
  4973  0D92  3474               	retlw	116
  4974  0D93  3465               	retlw	101
  4975  0D94  3464               	retlw	100
  4976  0D95  3420               	retlw	32
  4977  0D96  3400               	retlw	0
  4978                           
  4979                           ;initializer for _display_data_2
  4980  0D97  345A               	retlw	90
  4981  0D98  343A               	retlw	58
  4982  0D99  3430               	retlw	48
  4983  0D9A  3430               	retlw	48
  4984  0D9B  3430               	retlw	48
  4985  0D9C  3447               	retlw	71
  4986  0D9D  343A               	retlw	58
  4987  0D9E  3430               	retlw	48
  4988  0D9F  3430               	retlw	48
  4989  0DA0  3430               	retlw	48
  4990  0DA1  3400               	retlw	0
  4991                           
  4992                           	psect	idataBANK2
  4993  0D15                     __pidataBANK2:	
  4994                           
  4995                           ;initializer for _clearingData
  4996  0D15  3443               	retlw	67
  4997  0D16  346C               	retlw	108
  4998  0D17  3465               	retlw	101
  4999  0D18  3461               	retlw	97
  5000  0D19  3472               	retlw	114
  5001  0D1A  3469               	retlw	105
  5002  0D1B  346E               	retlw	110
  5003  0D1C  3467               	retlw	103
  5004  0D1D  3420               	retlw	32
  5005  0D1E  3444               	retlw	68
  5006  0D1F  3461               	retlw	97
  5007  0D20  3474               	retlw	116
  5008  0D21  3461               	retlw	97
  5009  0D22  3420               	retlw	32
  5010  0D23  342E               	retlw	46
  5011  0D24  342E               	retlw	46
  5012  0D25  342E               	retlw	46
  5013  0D26  3400               	retlw	0
  5014                           
  5015                           ;initializer for _clearDataOk_1
  5016  0D27  3444               	retlw	68
  5017  0D28  3461               	retlw	97
  5018  0D29  3474               	retlw	116
  5019  0D2A  3461               	retlw	97
  5020  0D2B  3420               	retlw	32
  5021  0D2C  3463               	retlw	99
  5022  0D2D  346C               	retlw	108
  5023  0D2E  3465               	retlw	101
  5024  0D2F  3461               	retlw	97
  5025  0D30  3472               	retlw	114
  5026  0D31  3469               	retlw	105
  5027  0D32  346E               	retlw	110
  5028  0D33  3467               	retlw	103
  5029  0D34  3420               	retlw	32
  5030  0D35  3400               	retlw	0
  5031                           
  5032                           	psect	nvBANK0
  5033  005E                     __pnvBANK0:	
  5034  005E                     _TMR3_InterruptHandler:	
  5035  005E                     	ds	2
  5036  0060                     _timer3ReloadVal:	
  5037  0060                     	ds	2
  5038  0062                     _TMR1_InterruptHandler:	
  5039  0062                     	ds	2
  5040  0064                     _timer1ReloadVal:	
  5041  0064                     	ds	2
  5042  0066                     _TMR0_InterruptHandler:	
  5043  0066                     	ds	2
  5044  0068                     _timer0ReloadVal:	
  5045  0068                     	ds	1
  5046                           
  5047                           	psect	nvBANK1
  5048  00E6                     __pnvBANK1:	
  5049  00E6                     _INT_InterruptHandler:	
  5050  00E6                     	ds	2
  5051  000E                     _PORTC	set	14
  5052  000C                     _PORTAbits	set	12
  5053  0014                     _PIR5bits	set	20
  5054  0019                     _T1GCONbits	set	25
  5055  0018                     _T1CONbits	set	24
  5056  0018                     _T1CON	set	24
  5057  0010                     _PIR1bits	set	16
  5058  0016                     _TMR1L	set	22
  5059  0017                     _TMR1H	set	23
  5060  0019                     _T1GCON	set	25
  5061  000B                     _INTCONbits	set	11
  5062  0015                     _TMR0	set	21
  5063  0095                     _OPTION_REGbits	set	149
  5064  008E                     _TRISC	set	142
  5065  008D                     _TRISB	set	141
  5066  008C                     _TRISA	set	140
  5067  0094                     _PIE5bits	set	148
  5068  0098                     _OSCTUNE	set	152
  5069  0099                     _OSCCON	set	153
  5070  0090                     _PIE1bits	set	144
  5071  0095                     _OPTION_REG	set	149
  5072  010C                     _LATAbits	set	268
  5073  010E                     _LATCbits	set	270
  5074  010D                     _LATBbits	set	269
  5075  010E                     _LATC	set	270
  5076  010D                     _LATB	set	269
  5077  010C                     _LATA	set	268
  5078  0116                     _BORCON	set	278
  5079  0193                     _PMDAT	set	403
  5080  0191                     _PMADR	set	401
  5081  0195                     _PMCON1bits	set	405
  5082  018C                     _ANSELA	set	396
  5083  018D                     _ANSELB	set	397
  5084  018E                     _ANSELC	set	398
  5085  020E                     _WPUC	set	526
  5086  020C                     _WPUA	set	524
  5087  020D                     _WPUB	set	525
  5088  028E                     _ODCONC	set	654
  5089  028D                     _ODCONB	set	653
  5090  028C                     _ODCONA	set	652
  5091  0496                     _T3GCONbits	set	1174
  5092  0495                     _T3CONbits	set	1173
  5093  0495                     _T3CON	set	1173
  5094  0493                     _TMR3L	set	1171
  5095  0494                     _TMR3H	set	1172
  5096  0496                     _T3GCON	set	1174
  5097  0E10                     _INTPPS	set	3600
  5098                           
  5099                           	psect	stringtext1
  5100  1000                     __pstringtext1:	
  5101  1000                     STR_1:	
  5102  1000  346D               	retlw	109	;'m'
  5103  1001  3461               	retlw	97	;'a'
  5104  1002  3469               	retlw	105	;'i'
  5105  1003  346E               	retlw	110	;'n'
  5106  1004  342E               	retlw	46	;'.'
  5107  1005  3463               	retlw	99	;'c'
  5108  1006  3400               	retlw	0
  5109                           
  5110                           	psect	stringtext2
  5111  1007                     __pstringtext2:	
  5112  1007                     STR_2:	
  5113  1007  3430               	retlw	48	;'0'
  5114  1008  3420               	retlw	32	;' '
  5115  1009  343D               	retlw	61	;'='
  5116  100A  343D               	retlw	61	;'='
  5117  100B  3420               	retlw	32	;' '
  5118  100C  3472               	retlw	114	;'r'
  5119  100D  3400               	retlw	0
  5120                           
  5121                           	psect	stringtext3
  5122  0000                     __pstringtext3:	
  5123  1000                     
  5124                           ; #config settings
  5125  0000                     
  5126                           	psect	cinit
  5127  0039                     start_initialization:	
  5128  0039                     __initialization:	
  5129                           
  5130                           ; Initialize objects allocated to BANK1
  5131  0039  307C               	movlw	low __pidataBANK1
  5132  003A  0084               	movwf	4
  5133  003B  308D               	movlw	(high __pidataBANK1)| (0+128)
  5134  003C  0085               	movwf	5
  5135  003D  30A0               	movlw	low __pdataBANK1
  5136  003E  0086               	movwf	6
  5137  003F  3000               	movlw	high __pdataBANK1
  5138  0040  0087               	movwf	7
  5139  0041  3026               	movlw	38
  5140  0042  318B  23C4  3180   	fcall	init_ram
  5141                           
  5142                           ; Initialize objects allocated to BANK2
  5143  0045  3015               	movlw	low __pidataBANK2
  5144  0046  0084               	movwf	4
  5145  0047  308D               	movlw	(high __pidataBANK2)| (0+128)
  5146  0048  0085               	movwf	5
  5147  0049  3020               	movlw	low __pdataBANK2
  5148  004A  0086               	movwf	6
  5149  004B  3001               	movlw	high __pdataBANK2
  5150  004C  0087               	movwf	7
  5151  004D  3021               	movlw	33
  5152  004E  318B  23C4  3180   	fcall	init_ram
  5153                           
  5154                           ; Clear objects allocated to COMMON
  5155  0051  01F6               	clrf	__pbssCOMMON& (0+127)
  5156  0052  01F7               	clrf	(__pbssCOMMON+1)& (0+127)
  5157  0053  01F8               	clrf	(__pbssCOMMON+2)& (0+127)
  5158  0054  01F9               	clrf	(__pbssCOMMON+3)& (0+127)
  5159  0055  01FA               	clrf	(__pbssCOMMON+4)& (0+127)
  5160                           
  5161                           ; Clear objects allocated to BANK0
  5162  0056  3042               	movlw	low __pbssBANK0
  5163  0057  0084               	movwf	4
  5164  0058  3000               	movlw	high __pbssBANK0
  5165  0059  0085               	movwf	5
  5166  005A  301C               	movlw	28
  5167  005B  318B  23BE  3180   	fcall	clear_ram0
  5168                           
  5169                           ; Clear objects allocated to BANK1
  5170  005E  30C6               	movlw	low __pbssBANK1
  5171  005F  0084               	movwf	4
  5172  0060  3000               	movlw	high __pbssBANK1
  5173  0061  0085               	movwf	5
  5174  0062  3020               	movlw	32
  5175  0063  318B  23BE         	fcall	clear_ram0
  5176  0065                     end_of_initialization:	
  5177                           ;End of C runtime variable initialization code
  5178                           
  5179  0065                     __end_of__initialization:	
  5180  0065  107E               	bcf	int$flags,0	;clear compiler interrupt flag (level 1)
  5181  0066  0020               	movlb	0
  5182  0067  3185  2D29         	ljmp	_main	;jump to C main() function
  5183                           
  5184                           	psect	bssCOMMON
  5185  0076                     __pbssCOMMON:	
  5186  0076                     _gExitFlag:	
  5187  0076                     	ds	1
  5188  0077                     _gEnterFlag:	
  5189  0077                     	ds	1
  5190  0078                     _gTimer0NormalFlashFlag:	
  5191  0078                     	ds	1
  5192  0079                     _gTimer0NormalFalshCnt:	
  5193  0079                     	ds	1
  5194  007A                     _gTimer0AlarmFlashFlag:	
  5195  007A                     	ds	1
  5196                           
  5197                           	psect	bssBANK0
  5198  0042                     __pbssBANK0:	
  5199  0042                     _gBoxCntStruct:	
  5200  0042                     	ds	21
  5201  0057                     _KeyPushTimeCnt:	
  5202  0057                     	ds	4
  5203  005B                     _KeyClearHEFFlag:	
  5204  005B                     	ds	1
  5205  005C                     _gTimer3Flag:	
  5206  005C                     	ds	1
  5207  005D                     _gInterruptFlag:	
  5208  005D                     	ds	1
  5209                           
  5210                           	psect	bssBANK1
  5211  00C6                     __pbssBANK1:	
  5212  00C6                     _HEFBufferData:	
  5213  00C6                     	ds	32
  5214                           
  5215                           	psect	dataBANK1
  5216  00A0                     __pdataBANK1:	
  5217  00A0                     _display_data_1:	
  5218  00A0                     	ds	16
  5219  00B0                     _clearDataOk_2:	
  5220  00B0                     	ds	11
  5221  00BB                     _display_data_2:	
  5222  00BB                     	ds	11
  5223                           
  5224                           	psect	dataBANK2
  5225  0120                     __pdataBANK2:	
  5226  0120                     _clearingData:	
  5227  0120                     	ds	18
  5228  0132                     _clearDataOk_1:	
  5229  0132                     	ds	15
  5230                           
  5231                           	psect	inittext
  5232  0BC4                     init_ram:	
  5233  0BC4  00FE               	movwf	126
  5234  0BC5                     initloop:	
  5235  0BC5  0012               	moviw fsr0++
  5236  0BC6  001E               	movwi fsr1++
  5237  0BC7  0BFE               	decfsz	126,f
  5238  0BC8  2BC5               	goto	initloop
  5239  0BC9  3400               	retlw	0
  5240                           
  5241                           	psect	clrtext
  5242  0BBE                     clear_ram0:	
  5243                           ;	Called with FSR0 containing the base address, and
  5244                           ;	WREG with the size to clear
  5245                           
  5246  0BBE  0064               	clrwdt	;clear the watchdog before getting into this loop
  5247  0BBF                     clrloop0:	
  5248  0BBF  0180               	clrf	0	;clear RAM location pointed to by FSR
  5249  0BC0  3101               	addfsr 0,1
  5250  0BC1  0B89               	decfsz	9,f	;Have we reached the end of clearing yet?
  5251  0BC2  2BBF               	goto	clrloop0	;have we reached the end yet?
  5252  0BC3  3400               	retlw	0	;all done for this memory range, return
  5253                           
  5254                           	psect	cstackCOMMON
  5255  0070                     __pcstackCOMMON:	
  5256  0070                     ?_TMR0_DefaultInterruptHandler:	
  5257  0070                     ??_TMR0_DefaultInterruptHandler:	
  5258                           ; 1 bytes @ 0x0
  5259                           
  5260  0070                     ?_TMR0_CallBack:	
  5261                           ; 1 bytes @ 0x0
  5262                           
  5263  0070                     ??_TMR0_CallBack:	
  5264                           ; 1 bytes @ 0x0
  5265                           
  5266  0070                     ?_TMR1_DefaultInterruptHandler:	
  5267                           ; 1 bytes @ 0x0
  5268                           
  5269  0070                     ??_TMR1_DefaultInterruptHandler:	
  5270                           ; 1 bytes @ 0x0
  5271                           
  5272  0070                     ?_TMR1_CallBack:	
  5273                           ; 1 bytes @ 0x0
  5274                           
  5275  0070                     ??_TMR1_CallBack:	
  5276                           ; 1 bytes @ 0x0
  5277                           
  5278  0070                     ?_PIN_MANAGER_Initialize:	
  5279                           ; 1 bytes @ 0x0
  5280                           
  5281  0070                     ?_OSCILLATOR_Initialize:	
  5282                           ; 1 bytes @ 0x0
  5283                           
  5284  0070                     ?_TMR3_Initialize:	
  5285                           ; 1 bytes @ 0x0
  5286                           
  5287  0070                     ?_EXT_INT_Initialize:	
  5288                           ; 1 bytes @ 0x0
  5289                           
  5290  0070                     ?_INT_ISR:	
  5291                           ; 1 bytes @ 0x0
  5292                           
  5293  0070                     ?_PIN_MANAGER_IOC:	
  5294                           ; 1 bytes @ 0x0
  5295                           
  5296  0070                     ??_PIN_MANAGER_IOC:	
  5297                           ; 1 bytes @ 0x0
  5298                           
  5299  0070                     ?_TMR3_ISR:	
  5300                           ; 1 bytes @ 0x0
  5301                           
  5302  0070                     ?_TMR3_DefaultInterruptHandler:	
  5303                           ; 1 bytes @ 0x0
  5304                           
  5305  0070                     ??_TMR3_DefaultInterruptHandler:	
  5306                           ; 1 bytes @ 0x0
  5307                           
  5308  0070                     ?_TMR3_CallBack:	
  5309                           ; 1 bytes @ 0x0
  5310                           
  5311  0070                     ??_TMR3_CallBack:	
  5312                           ; 1 bytes @ 0x0
  5313                           
  5314  0070                     ?_bsp_TimerInterruptISRCallback:	
  5315                           ; 1 bytes @ 0x0
  5316                           
  5317  0070                     ??_bsp_TimerInterruptISRCallback:	
  5318                           ; 1 bytes @ 0x0
  5319                           
  5320  0070                     ?_INT_CallBack:	
  5321                           ; 1 bytes @ 0x0
  5322                           
  5323  0070                     ??_INT_CallBack:	
  5324                           ; 1 bytes @ 0x0
  5325                           
  5326  0070                     ?_bsp_CounterInit:	
  5327                           ; 1 bytes @ 0x0
  5328                           
  5329  0070                     ?_TMR0_Initialize:	
  5330                           ; 1 bytes @ 0x0
  5331                           
  5332  0070                     ?_TMR0_ISR:	
  5333                           ; 1 bytes @ 0x0
  5334                           
  5335  0070                     ?_TMR1_Initialize:	
  5336                           ; 1 bytes @ 0x0
  5337                           
  5338  0070                     ?_TMR1_WriteTimer:	
  5339                           ; 1 bytes @ 0x0
  5340                           
  5341  0070                     ?_TMR1_ISR:	
  5342                           ; 1 bytes @ 0x0
  5343                           
  5344  0070                     ?_SYSTEM_Initialize:	
  5345                           ; 1 bytes @ 0x0
  5346                           
  5347  0070                     ?_INTERRUPT_InterruptManager:	
  5348                           ; 1 bytes @ 0x0
  5349                           
  5350  0070                     ?_TMR3_WriteTimer:	
  5351                           ; 1 bytes @ 0x0
  5352                           
  5353  0070                     ?_INT_DefaultInterruptHandler:	
  5354                           ; 1 bytes @ 0x0
  5355                           
  5356  0070                     ??_INT_DefaultInterruptHandler:	
  5357                           ; 1 bytes @ 0x0
  5358                           
  5359  0070                     ?_LCDInit:	
  5360                           ; 1 bytes @ 0x0
  5361                           
  5362  0070                     ?_Data_Toseg:	
  5363                           ; 1 bytes @ 0x0
  5364                           
  5365  0070                     ?_HEFLASH_checkData:	
  5366                           ; 1 bytes @ 0x0
  5367                           
  5368  0070                     ?_main:	
  5369                           ; 1 bytes @ 0x0
  5370                           
  5371  0070                     ?__unlock:	
  5372                           ; 1 bytes @ 0x0
  5373                           
  5374  0070                     TMR1_WriteTimer@timerVal:	
  5375                           ; 1 bytes @ 0x0
  5376                           
  5377  0070                     TMR3_WriteTimer@timerVal:	
  5378                           ; 2 bytes @ 0x0
  5379                           
  5380                           
  5381                           ; 2 bytes @ 0x0
  5382  0070                     	ds	1
  5383  0071                     ??_INT_ISR:	
  5384  0071                     ??_TMR0_ISR:	
  5385                           ; 1 bytes @ 0x1
  5386                           
  5387                           
  5388                           ; 1 bytes @ 0x1
  5389  0071                     	ds	1
  5390  0072                     ??_TMR3_ISR:	
  5391  0072                     ??_TMR1_WriteTimer:	
  5392                           ; 1 bytes @ 0x2
  5393                           
  5394  0072                     ??_TMR1_ISR:	
  5395                           ; 1 bytes @ 0x2
  5396                           
  5397  0072                     ??_INTERRUPT_InterruptManager:	
  5398                           ; 1 bytes @ 0x2
  5399                           
  5400  0072                     ??_TMR3_WriteTimer:	
  5401                           ; 1 bytes @ 0x2
  5402                           
  5403                           
  5404                           ; 1 bytes @ 0x2
  5405  0072                     	ds	1
  5406  0073                     ?_TMR0_SetInterruptHandler:	
  5407  0073                     ?_TMR1_SetInterruptHandler:	
  5408                           ; 1 bytes @ 0x3
  5409                           
  5410  0073                     ??_PIN_MANAGER_Initialize:	
  5411                           ; 1 bytes @ 0x3
  5412                           
  5413  0073                     ??_OSCILLATOR_Initialize:	
  5414                           ; 1 bytes @ 0x3
  5415                           
  5416  0073                     ?_TMR3_SetInterruptHandler:	
  5417                           ; 1 bytes @ 0x3
  5418                           
  5419  0073                     ??_memset:	
  5420                           ; 1 bytes @ 0x3
  5421                           
  5422  0073                     ??_bsp_CounterInit:	
  5423                           ; 1 bytes @ 0x3
  5424                           
  5425  0073                     ?_INT_SetInterruptHandler:	
  5426                           ; 1 bytes @ 0x3
  5427                           
  5428  0073                     ??__fassert:	
  5429                           ; 1 bytes @ 0x3
  5430                           
  5431  0073                     ?_LCDSendData:	
  5432                           ; 1 bytes @ 0x3
  5433                           
  5434  0073                     ??__unlock:	
  5435                           ; 1 bytes @ 0x3
  5436                           
  5437  0073                     ??_FLASH_write:	
  5438                           ; 1 bytes @ 0x3
  5439                           
  5440  0073                     ?_FLASH_erase:	
  5441                           ; 1 bytes @ 0x3
  5442                           
  5443  0073                     ??___llmod:	
  5444                           ; 1 bytes @ 0x3
  5445                           
  5446  0073                     ??___lwmod:	
  5447                           ; 1 bytes @ 0x3
  5448                           
  5449  0073                     ?_FLASH_read:	
  5450                           ; 1 bytes @ 0x3
  5451                           
  5452  0073                     FLASH_write@temp:	
  5453                           ; 2 bytes @ 0x3
  5454                           
  5455  0073                     TMR0_SetInterruptHandler@InterruptHandler:	
  5456                           ; 1 bytes @ 0x3
  5457                           
  5458  0073                     TMR1_SetInterruptHandler@InterruptHandler:	
  5459                           ; 2 bytes @ 0x3
  5460                           
  5461  0073                     TMR3_SetInterruptHandler@InterruptHandler:	
  5462                           ; 2 bytes @ 0x3
  5463                           
  5464  0073                     INT_SetInterruptHandler@InterruptHandler:	
  5465                           ; 2 bytes @ 0x3
  5466                           
  5467  0073                     LCDSendData@RS:	
  5468                           ; 2 bytes @ 0x3
  5469                           
  5470  0073                     FLASH_read@address:	
  5471                           ; 2 bytes @ 0x3
  5472                           
  5473  0073                     FLASH_erase@address:	
  5474                           ; 2 bytes @ 0x3
  5475                           
  5476                           
  5477                           ; 2 bytes @ 0x3
  5478  0073                     	ds	1
  5479  0074                     ___llmod@counter:	
  5480  0074                     ___lwmod@counter:	
  5481                           ; 1 bytes @ 0x4
  5482                           
  5483  0074                     memset@p:	
  5484                           ; 1 bytes @ 0x4
  5485                           
  5486                           
  5487                           ; 1 bytes @ 0x4
  5488  0074                     	ds	1
  5489  0075                     ??_TMR0_SetInterruptHandler:	
  5490  0075                     ??_TMR1_SetInterruptHandler:	
  5491                           ; 1 bytes @ 0x5
  5492                           
  5493  0075                     ??_TMR3_Initialize:	
  5494                           ; 1 bytes @ 0x5
  5495                           
  5496  0075                     ??_EXT_INT_Initialize:	
  5497                           ; 1 bytes @ 0x5
  5498                           
  5499  0075                     ??_TMR3_SetInterruptHandler:	
  5500                           ; 1 bytes @ 0x5
  5501                           
  5502  0075                     ??_TMR0_Initialize:	
  5503                           ; 1 bytes @ 0x5
  5504                           
  5505  0075                     ??_TMR1_Initialize:	
  5506                           ; 1 bytes @ 0x5
  5507                           
  5508  0075                     ??_INT_SetInterruptHandler:	
  5509                           ; 1 bytes @ 0x5
  5510                           
  5511  0075                     ??_FLASH_read:	
  5512                           ; 1 bytes @ 0x5
  5513                           
  5514  0075                     ??_FLASH_erase:	
  5515                           ; 1 bytes @ 0x5
  5516                           
  5517  0075                     ??___lldiv:	
  5518                           ; 1 bytes @ 0x5
  5519                           
  5520  0075                     ??___lwdiv:	
  5521                           ; 1 bytes @ 0x5
  5522                           
  5523  0075                     LCDSendData@value:	
  5524                           ; 1 bytes @ 0x5
  5525                           
  5526  0075                     FLASH_erase@temp:	
  5527                           ; 1 bytes @ 0x5
  5528                           
  5529  0075                     memset@p1:	
  5530                           ; 1 bytes @ 0x5
  5531                           
  5532                           
  5533                           ; 1 bytes @ 0x5
  5534  0075                     	ds	1
  5535  0076                     ??_SYSTEM_Initialize:	
  5536                           
  5537                           	psect	cstackBANK0
  5538  0020                     __pcstackBANK0:	
  5539                           ; 1 bytes @ 0x6
  5540                           
  5541  0020                     ?_HEFLASH_readBlock:	
  5542  0020                     ?_memset:	
  5543                           ; 1 bytes @ 0x0
  5544                           
  5545  0020                     ?__fassert:	
  5546                           ; 1 bytes @ 0x0
  5547                           
  5548  0020                     ??_LCDSendData:	
  5549                           ; 1 bytes @ 0x0
  5550                           
  5551  0020                     ?_FLASH_write:	
  5552                           ; 1 bytes @ 0x0
  5553                           
  5554  0020                     ?___lwmod:	
  5555                           ; 1 bytes @ 0x0
  5556                           
  5557  0020                     ?___llmod:	
  5558                           ; 2 bytes @ 0x0
  5559                           
  5560  0020                     HEFLASH_readBlock@radd:	
  5561                           ; 4 bytes @ 0x0
  5562                           
  5563  0020                     __fassert@line:	
  5564                           ; 1 bytes @ 0x0
  5565                           
  5566  0020                     FLASH_write@address:	
  5567                           ; 2 bytes @ 0x0
  5568                           
  5569  0020                     ___lwmod@divisor:	
  5570                           ; 2 bytes @ 0x0
  5571                           
  5572  0020                     memset@c:	
  5573                           ; 2 bytes @ 0x0
  5574                           
  5575  0020                     ___llmod@divisor:	
  5576                           ; 2 bytes @ 0x0
  5577                           
  5578                           
  5579                           ; 4 bytes @ 0x0
  5580  0020                     	ds	1
  5581  0021                     HEFLASH_readBlock@count:	
  5582                           
  5583                           ; 1 bytes @ 0x1
  5584  0021                     	ds	1
  5585  0022                     ??_HEFLASH_readBlock:	
  5586  0022                     ??_LCDInit:	
  5587                           ; 1 bytes @ 0x2
  5588                           
  5589  0022                     ?_Print:	
  5590                           ; 1 bytes @ 0x2
  5591                           
  5592  0022                     __fassert@file:	
  5593                           ; 1 bytes @ 0x2
  5594                           
  5595  0022                     Print@str:	
  5596                           ; 2 bytes @ 0x2
  5597                           
  5598  0022                     FLASH_write@data:	
  5599                           ; 2 bytes @ 0x2
  5600                           
  5601  0022                     ___lwmod@dividend:	
  5602                           ; 2 bytes @ 0x2
  5603                           
  5604  0022                     memset@n:	
  5605                           ; 2 bytes @ 0x2
  5606                           
  5607                           
  5608                           ; 2 bytes @ 0x2
  5609  0022                     	ds	2
  5610  0024                     ??_Print:	
  5611  0024                     ?___lwdiv:	
  5612                           ; 1 bytes @ 0x4
  5613                           
  5614  0024                     FLASH_write@latch:	
  5615                           ; 2 bytes @ 0x4
  5616                           
  5617  0024                     __fassert@expr:	
  5618                           ; 1 bytes @ 0x4
  5619                           
  5620  0024                     HEFLASH_readBlock@add:	
  5621                           ; 2 bytes @ 0x4
  5622                           
  5623  0024                     ___lwdiv@divisor:	
  5624                           ; 2 bytes @ 0x4
  5625                           
  5626  0024                     ___llmod@dividend:	
  5627                           ; 2 bytes @ 0x4
  5628                           
  5629                           
  5630                           ; 4 bytes @ 0x4
  5631  0024                     	ds	1
  5632  0025                     ?_HEFLASH_writeBlock:	
  5633  0025                     HEFLASH_writeBlock@data:	
  5634                           ; 1 bytes @ 0x5
  5635                           
  5636                           
  5637                           ; 1 bytes @ 0x5
  5638  0025                     	ds	1
  5639  0026                     HEFLASH_writeBlock@count:	
  5640  0026                     HEFLASH_readBlock@buffer:	
  5641                           ; 1 bytes @ 0x6
  5642                           
  5643  0026                     ___lwdiv@dividend:	
  5644                           ; 1 bytes @ 0x6
  5645                           
  5646                           
  5647                           ; 2 bytes @ 0x6
  5648  0026                     	ds	1
  5649  0027                     ??_HEFLASH_writeBlock:	
  5650                           
  5651                           ; 1 bytes @ 0x7
  5652  0027                     	ds	1
  5653  0028                     ?___lldiv:	
  5654  0028                     ___lwdiv@counter:	
  5655                           ; 4 bytes @ 0x8
  5656                           
  5657  0028                     ___lldiv@divisor:	
  5658                           ; 1 bytes @ 0x8
  5659                           
  5660                           
  5661                           ; 4 bytes @ 0x8
  5662  0028                     	ds	1
  5663  0029                     HEFLASH_writeBlock@radd:	
  5664  0029                     ___lwdiv@quotient:	
  5665                           ; 1 bytes @ 0x9
  5666                           
  5667                           
  5668                           ; 2 bytes @ 0x9
  5669  0029                     	ds	1
  5670  002A                     HEFLASH_writeBlock@add:	
  5671                           
  5672                           ; 2 bytes @ 0xA
  5673  002A                     	ds	2
  5674  002C                     ___lldiv@dividend:	
  5675                           
  5676                           ; 4 bytes @ 0xC
  5677  002C                     	ds	4
  5678  0030                     ___lldiv@quotient:	
  5679                           
  5680                           ; 4 bytes @ 0x10
  5681  0030                     	ds	4
  5682  0034                     ___lldiv@counter:	
  5683                           
  5684                           ; 1 bytes @ 0x14
  5685  0034                     	ds	1
  5686  0035                     ??_Data_Toseg:	
  5687  0035                     ??_HEFLASH_checkData:	
  5688                           ; 1 bytes @ 0x15
  5689                           
  5690                           
  5691                           ; 1 bytes @ 0x15
  5692  0035                     	ds	9
  5693  003E                     HEFLASH_checkData@r:	
  5694                           
  5695                           ; 2 bytes @ 0x1E
  5696  003E                     	ds	2
  5697  0040                     ??_main:	
  5698                           
  5699                           ; 1 bytes @ 0x20
  5700  0040                     	ds	2
  5701                           
  5702                           	psect	maintext
  5703  0529                     __pmaintext:	
  5704 ;;
  5705 ;;Main: autosize = 0, tempsize = 2, incstack = 0, save=0
  5706 ;;
  5707 ;; *************** function _main *****************
  5708 ;; Defined at:
  5709 ;;		line 254 in file "main.c"
  5710 ;; Parameters:    Size  Location     Type
  5711 ;;		None
  5712 ;; Auto vars:     Size  Location     Type
  5713 ;;		None
  5714 ;; Return value:  Size  Location     Type
  5715 ;;                  1    wreg      void 
  5716 ;; Registers used:
  5717 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  5718 ;; Tracked objects:
  5719 ;;		On entry : B1F/0
  5720 ;;		On exit  : 0/0
  5721 ;;		Unchanged: 0/0
  5722 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  5723 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5724 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5725 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5726 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  5727 ;;Total ram usage:        2 bytes
  5728 ;; Hardware stack levels required when called:    8
  5729 ;; This function calls:
  5730 ;;		_Data_Toseg
  5731 ;;		_HEFLASH_checkData
  5732 ;;		_HEFLASH_writeBlock
  5733 ;;		_LCDInit
  5734 ;;		_LCDSendData
  5735 ;;		_Print
  5736 ;;		_SYSTEM_Initialize
  5737 ;;		_bsp_CounterInit
  5738 ;;		_memset
  5739 ;; This function is called by:
  5740 ;;		Startup code after reset
  5741 ;; This function uses a non-reentrant model
  5742 ;;
  5743                           
  5744                           
  5745                           ;psect for function _main
  5746  0529                     _main:	
  5747                           
  5748                           ;main.c: 258: SYSTEM_Initialize();
  5749                           
  5750                           ;incstack = 0
  5751                           ; Regs used in _main: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  5752  0529  318C  2451  3185   	fcall	_SYSTEM_Initialize
  5753                           
  5754                           ;main.c: 259: bsp_CounterInit();
  5755  052C  318C  24F8  3185   	fcall	_bsp_CounterInit
  5756                           
  5757                           ;main.c: 260: LCDInit();
  5758  052F  3187  275A  3185   	fcall	_LCDInit
  5759                           
  5760                           ;main.c: 264: HEFLASH_checkData();
  5761  0532  3180  2069  3185   	fcall	_HEFLASH_checkData
  5762                           
  5763                           ;main.c: 266: LCDSendData(0, 0b10000000);
  5764  0535  3000               	movlw	0
  5765  0536  00F3               	movwf	LCDSendData@RS
  5766  0537  00F4               	movwf	LCDSendData@RS+1
  5767  0538  3080               	movlw	128
  5768  0539  0020               	movlb	0	; select bank0
  5769  053A  00C0               	movwf	??_main
  5770  053B  0840               	movf	??_main,w
  5771  053C  00F5               	movwf	LCDSendData@value
  5772  053D  318F  274B  3185   	fcall	_LCDSendData
  5773                           
  5774                           ;main.c: 267: Print(display_data_1);
  5775  0540  30A0               	movlw	low _display_data_1
  5776  0541  0020               	movlb	0	; select bank0
  5777  0542  00A2               	movwf	Print@str
  5778  0543  3000               	movlw	high _display_data_1
  5779  0544  00A3               	movwf	Print@str+1
  5780  0545  318D  2536  3185   	fcall	_Print
  5781                           
  5782                           ;main.c: 268: _delay((unsigned long)((200)*(2000000/4000.0)));
  5783  0548  3082               	movlw	130
  5784  0549  0020               	movlb	0	; select bank0
  5785  054A  00C0               	movwf	??_main
  5786  054B  30DD               	movlw	221
  5787  054C                     u2457:	
  5788  054C  0B89               	decfsz	9,f
  5789  054D  2D4C               	goto	u2457
  5790  054E  0BC0               	decfsz	??_main,f
  5791  054F  2D4C               	goto	u2457
  5792  0550  3200               	nop2
  5793                           
  5794                           ;main.c: 269: LCDSendData(0, 0b11000000);
  5795  0551  3000               	movlw	0
  5796  0552  00F3               	movwf	LCDSendData@RS
  5797  0553  00F4               	movwf	LCDSendData@RS+1
  5798  0554  30C0               	movlw	192
  5799  0555  0020               	movlb	0	; select bank0
  5800  0556  00C0               	movwf	??_main
  5801  0557  0840               	movf	??_main,w
  5802  0558  00F5               	movwf	LCDSendData@value
  5803  0559  318F  274B  3185   	fcall	_LCDSendData
  5804                           
  5805                           ;main.c: 270: Print(display_data_2);
  5806  055C  30BB               	movlw	low _display_data_2
  5807  055D  0020               	movlb	0	; select bank0
  5808  055E  00A2               	movwf	Print@str
  5809  055F  3000               	movlw	high _display_data_2
  5810  0560  00A3               	movwf	Print@str+1
  5811  0561  318D  2536  3185   	fcall	_Print
  5812                           
  5813                           ;main.c: 272: (INTCONbits.GIE = 1);
  5814  0564  178B               	bsf	11,7	;volatile
  5815                           
  5816                           ;main.c: 275: (INTCONbits.PEIE = 1);
  5817  0565  170B               	bsf	11,6	;volatile
  5818  0566                     l2703:	
  5819                           ;main.c: 284: while (1)
  5820                           
  5821                           
  5822                           ;main.c: 285: {
  5823                           ;main.c: 287: if(gInterruptFlag)
  5824  0566  0020               	movlb	0	; select bank0
  5825  0567  085D               	movf	_gInterruptFlag,w	;volatile
  5826  0568  1D03               	btfss	3,2
  5827                           
  5828                           ;main.c: 288: {
  5829                           ;main.c: 290: gInterruptFlag = 0;
  5830  0569  01DD               	clrf	_gInterruptFlag	;volatile
  5831                           
  5832                           ;main.c: 291: }
  5833                           ;main.c: 293: if(0 == PORTAbits.RA1 )
  5834  056A  188C               	btfsc	12,1	;volatile
  5835  056B  2DBB               	goto	l2729
  5836                           
  5837                           ;main.c: 294: {
  5838                           ;main.c: 295: _delay((unsigned long)((5)*(2000000/4000.0)));
  5839  056C  3004               	movlw	4
  5840  056D  0020               	movlb	0	; select bank0
  5841  056E  00C0               	movwf	??_main
  5842  056F  303D               	movlw	61
  5843  0570                     u2467:	
  5844  0570  0B89               	decfsz	9,f
  5845  0571  2D70               	goto	u2467
  5846  0572  0BC0               	decfsz	??_main,f
  5847  0573  2D70               	goto	u2467
  5848  0574  3200               	nop2
  5849                           
  5850                           ;main.c: 296: if(0 == PORTAbits.RA1 )
  5851  0575  0020               	movlb	0	; select bank0
  5852  0576  188C               	btfsc	12,1	;volatile
  5853  0577  2DC3               	goto	l2731
  5854                           
  5855                           ;main.c: 297: {
  5856                           ;main.c: 298: KeyPushTimeCnt++;
  5857  0578  3001               	movlw	1
  5858  0579  07D7               	addwf	_KeyPushTimeCnt,f	;volatile
  5859  057A  3000               	movlw	0
  5860  057B  3DD8               	addwfc	_KeyPushTimeCnt+1,f	;volatile
  5861  057C  3000               	movlw	0
  5862  057D  3DD9               	addwfc	_KeyPushTimeCnt+2,f	;volatile
  5863  057E  3000               	movlw	0
  5864  057F  3DDA               	addwfc	_KeyPushTimeCnt+3,f	;volatile
  5865                           
  5866                           ;main.c: 299: if(KeyPushTimeCnt > 600)
  5867  0580  085A               	movf	_KeyPushTimeCnt+3,w	;volatile
  5868  0581  1D03               	btfss	3,2
  5869  0582  2D8C               	goto	l2717
  5870  0583  0859               	movf	_KeyPushTimeCnt+2,w	;volatile
  5871  0584  1D03               	btfss	3,2
  5872  0585  2D8C               	goto	l2717
  5873  0586  3059               	movlw	89
  5874  0587  0257               	subwf	_KeyPushTimeCnt,w	;volatile
  5875  0588  3002               	movlw	2
  5876  0589  3B58               	subwfb	_KeyPushTimeCnt+1,w	;volatile
  5877  058A  1C03               	btfss	3,0
  5878  058B  2DB7               	goto	l2725
  5879  058C                     l2717:	
  5880                           
  5881                           ;main.c: 300: {
  5882                           ;main.c: 301: KeyClearHEFFlag = 1;
  5883  058C  3001               	movlw	1
  5884  058D  00C0               	movwf	??_main
  5885  058E  0840               	movf	??_main,w
  5886  058F  00DB               	movwf	_KeyClearHEFFlag	;volatile
  5887                           
  5888                           ;main.c: 302: KeyPushTimeCnt = 0;
  5889  0590  3000               	movlw	0
  5890  0591  00DA               	movwf	_KeyPushTimeCnt+3	;volatile
  5891  0592  3000               	movlw	0
  5892  0593  00D9               	movwf	_KeyPushTimeCnt+2	;volatile
  5893  0594  3000               	movlw	0
  5894  0595  00D8               	movwf	_KeyPushTimeCnt+1	;volatile
  5895  0596  3000               	movlw	0
  5896  0597  00D7               	movwf	_KeyPushTimeCnt	;volatile
  5897                           
  5898                           ;main.c: 303: LCDSendData(0, 0b10000000);
  5899  0598  3000               	movlw	0
  5900  0599  00F3               	movwf	LCDSendData@RS
  5901  059A  00F4               	movwf	LCDSendData@RS+1
  5902  059B  3080               	movlw	128
  5903  059C  00C0               	movwf	??_main
  5904  059D  0840               	movf	??_main,w
  5905  059E  00F5               	movwf	LCDSendData@value
  5906  059F  318F  274B  3185   	fcall	_LCDSendData
  5907                           
  5908                           ;main.c: 304: Print(clearingData);
  5909  05A2  3020               	movlw	low _clearingData
  5910  05A3  0020               	movlb	0	; select bank0
  5911  05A4  00A2               	movwf	Print@str
  5912  05A5  3001               	movlw	high _clearingData
  5913  05A6  00A3               	movwf	Print@str+1
  5914  05A7  318D  2536  3185   	fcall	_Print
  5915                           
  5916                           ;main.c: 305: _delay((unsigned long)((1000)*(2000000/4000.0)));
  5917  05AA  3003               	movlw	3
  5918  05AB  0020               	movlb	0	; select bank0
  5919  05AC  00C1               	movwf	??_main+1
  5920  05AD  308A               	movlw	138
  5921  05AE  00C0               	movwf	??_main
  5922  05AF  3055               	movlw	85
  5923  05B0                     u2477:	
  5924  05B0  0B89               	decfsz	9,f
  5925  05B1  2DB0               	goto	u2477
  5926  05B2  0BC0               	decfsz	??_main,f
  5927  05B3  2DB0               	goto	u2477
  5928  05B4  0BC1               	decfsz	??_main+1,f
  5929  05B5  2DB0               	goto	u2477
  5930  05B6  3200               	nop2
  5931  05B7                     l2725:	
  5932                           
  5933                           ;main.c: 306: }
  5934                           ;main.c: 307: gBoxCntStruct.AlarmFlag = 0;
  5935  05B7  0020               	movlb	0	; select bank0
  5936  05B8  01C4               	clrf	_gBoxCntStruct+2
  5937                           
  5938                           ;main.c: 308: gBoxCntStruct.JamFlag = 0;
  5939  05B9  01C5               	clrf	_gBoxCntStruct+3
  5940                           
  5941                           ;main.c: 309: }
  5942                           ;main.c: 310: }
  5943  05BA  2DC3               	goto	l2731
  5944  05BB                     l2729:	
  5945                           
  5946                           ;main.c: 311: else
  5947                           ;main.c: 312: {
  5948                           ;main.c: 313: KeyPushTimeCnt = 0;
  5949  05BB  3000               	movlw	0
  5950  05BC  00DA               	movwf	_KeyPushTimeCnt+3	;volatile
  5951  05BD  3000               	movlw	0
  5952  05BE  00D9               	movwf	_KeyPushTimeCnt+2	;volatile
  5953  05BF  3000               	movlw	0
  5954  05C0  00D8               	movwf	_KeyPushTimeCnt+1	;volatile
  5955  05C1  3000               	movlw	0
  5956  05C2  00D7               	movwf	_KeyPushTimeCnt	;volatile
  5957  05C3                     l2731:	
  5958                           
  5959                           ;main.c: 314: }
  5960                           ;main.c: 316: if(1 == PORTAbits.RA1 && 1 == KeyClearHEFFlag )
  5961  05C3  1C8C               	btfss	12,1	;volatile
  5962  05C4  2E2E               	goto	l2769
  5963  05C5  035B               	decf	_KeyClearHEFFlag,w	;volatile
  5964  05C6  1D03               	btfss	3,2
  5965  05C7  2E2E               	goto	l2769
  5966                           
  5967                           ;main.c: 317: {
  5968                           ;main.c: 318: KeyClearHEFFlag = 0;
  5969  05C8  01DB               	clrf	_KeyClearHEFFlag	;volatile
  5970                           
  5971                           ;main.c: 319: memset(&HEFBufferData, 0, sizeof(HEFBufferData));
  5972  05C9  3000               	movlw	0
  5973  05CA  00A0               	movwf	memset@c
  5974  05CB  00A1               	movwf	memset@c+1
  5975  05CC  3020               	movlw	32
  5976  05CD  00A2               	movwf	memset@n
  5977  05CE  3000               	movlw	0
  5978  05CF  00A3               	movwf	memset@n+1
  5979  05D0  30C6               	movlw	(low (_HEFBufferData| 0))& (0+255)
  5980  05D1  318C  24DC  3185   	fcall	_memset
  5981                           
  5982                           ;main.c: 320: HEFBufferData[0] = 0xAA;
  5983  05D4  30AA               	movlw	170
  5984  05D5  0020               	movlb	0	; select bank0
  5985  05D6  00C0               	movwf	??_main
  5986  05D7  0840               	movf	??_main,w
  5987  05D8  0021               	movlb	1	; select bank1
  5988  05D9  00C6               	movwf	_HEFBufferData^(0+128)
  5989                           
  5990                           ;main.c: 321: (INTCONbits.GIE = 0);
  5991  05DA  138B               	bcf	11,7	;volatile
  5992                           
  5993                           ;main.c: 322: HEFLASH_writeBlock(0, (void*)&HEFBufferData,sizeof(HEFBufferData));
  5994  05DB  30C6               	movlw	(low (_HEFBufferData| 0))& (0+255)
  5995  05DC  0020               	movlb	0	; select bank0
  5996  05DD  00C0               	movwf	??_main
  5997  05DE  0840               	movf	??_main,w
  5998  05DF  00A5               	movwf	HEFLASH_writeBlock@data
  5999  05E0  3020               	movlw	32
  6000  05E1  00C1               	movwf	??_main+1
  6001  05E2  0841               	movf	??_main+1,w
  6002  05E3  00A6               	movwf	HEFLASH_writeBlock@count
  6003  05E4  3000               	movlw	0
  6004  05E5  318E  26F3  3185   	fcall	_HEFLASH_writeBlock
  6005                           
  6006                           ;main.c: 323: (INTCONbits.GIE = 1);
  6007  05E8  178B               	bsf	11,7	;volatile
  6008                           
  6009                           ;main.c: 324: LCDSendData(0, 0b10000000);
  6010  05E9  3000               	movlw	0
  6011  05EA  00F3               	movwf	LCDSendData@RS
  6012  05EB  00F4               	movwf	LCDSendData@RS+1
  6013  05EC  3080               	movlw	128
  6014  05ED  0020               	movlb	0	; select bank0
  6015  05EE  00C0               	movwf	??_main
  6016  05EF  0840               	movf	??_main,w
  6017  05F0  00F5               	movwf	LCDSendData@value
  6018  05F1  318F  274B  3185   	fcall	_LCDSendData
  6019                           
  6020                           ;main.c: 325: Print(clearDataOk_1);
  6021  05F4  3032               	movlw	low _clearDataOk_1
  6022  05F5  0020               	movlb	0	; select bank0
  6023  05F6  00A2               	movwf	Print@str
  6024  05F7  3001               	movlw	high _clearDataOk_1
  6025  05F8  00A3               	movwf	Print@str+1
  6026  05F9  318D  2536  3185   	fcall	_Print
  6027                           
  6028                           ;main.c: 326: LCDSendData(0, 0b11000000);
  6029  05FC  3000               	movlw	0
  6030  05FD  00F3               	movwf	LCDSendData@RS
  6031  05FE  00F4               	movwf	LCDSendData@RS+1
  6032  05FF  30C0               	movlw	192
  6033  0600  0020               	movlb	0	; select bank0
  6034  0601  00C0               	movwf	??_main
  6035  0602  0840               	movf	??_main,w
  6036  0603  00F5               	movwf	LCDSendData@value
  6037  0604  318F  274B  3185   	fcall	_LCDSendData
  6038                           
  6039                           ;main.c: 327: Print(clearDataOk_2);
  6040  0607  30B0               	movlw	low _clearDataOk_2
  6041  0608  0020               	movlb	0	; select bank0
  6042  0609  00A2               	movwf	Print@str
  6043  060A  3000               	movlw	high _clearDataOk_2
  6044  060B  00A3               	movwf	Print@str+1
  6045  060C  318D  2536  3185   	fcall	_Print
  6046                           
  6047                           ;main.c: 328: _delay((unsigned long)((800)*(2000000/4000.0)));
  6048  060F  3003               	movlw	3
  6049  0610  0020               	movlb	0	; select bank0
  6050  0611  00C1               	movwf	??_main+1
  6051  0612  3008               	movlw	8
  6052  0613  00C0               	movwf	??_main
  6053  0614  3077               	movlw	119
  6054  0615                     u2487:	
  6055  0615  0B89               	decfsz	9,f
  6056  0616  2E15               	goto	u2487
  6057  0617  0BC0               	decfsz	??_main,f
  6058  0618  2E15               	goto	u2487
  6059  0619  0BC1               	decfsz	??_main+1,f
  6060  061A  2E15               	goto	u2487
  6061                           
  6062                           ;main.c: 329: gBoxCntStruct.BoxSum = 0;
  6063  061B  3000               	movlw	0
  6064  061C  0020               	movlb	0	; select bank0
  6065  061D  00D6               	movwf	_gBoxCntStruct+20
  6066  061E  3000               	movlw	0
  6067  061F  00D5               	movwf	_gBoxCntStruct+19
  6068  0620  3000               	movlw	0
  6069  0621  00D4               	movwf	_gBoxCntStruct+18
  6070  0622  3000               	movlw	0
  6071  0623  00D3               	movwf	_gBoxCntStruct+17
  6072                           
  6073                           ;main.c: 330: gBoxCntStruct.JamCnt = 0;
  6074  0624  01D1               	clrf	_gBoxCntStruct+15
  6075  0625  01D2               	clrf	_gBoxCntStruct+16
  6076                           
  6077                           ;main.c: 331: gBoxCntStruct.LargeBoxCnt = 0;
  6078  0626  01CF               	clrf	_gBoxCntStruct+13
  6079  0627  01D0               	clrf	_gBoxCntStruct+14
  6080                           
  6081                           ;main.c: 332: gBoxCntStruct.MiddleBoxCnt = 0;
  6082  0628  01CD               	clrf	_gBoxCntStruct+11
  6083  0629  01CE               	clrf	_gBoxCntStruct+12
  6084                           
  6085                           ;main.c: 333: gBoxCntStruct.SmallBoxCnt = 0;
  6086  062A  01CB               	clrf	_gBoxCntStruct+9
  6087  062B  01CC               	clrf	_gBoxCntStruct+10
  6088                           
  6089                           ;main.c: 335: gBoxCntStruct.DisplayReflashFlag = 1;
  6090  062C  01C6               	clrf	_gBoxCntStruct+4
  6091  062D  0AC6               	incf	_gBoxCntStruct+4,f
  6092  062E                     l2769:	
  6093                           
  6094                           ;main.c: 336: }
  6095                           ;main.c: 338: if(gTimer0NormalFlashFlag)
  6096  062E  0878               	movf	_gTimer0NormalFlashFlag,w	;volatile
  6097  062F  1903               	btfsc	3,2
  6098  0630  2E4C               	goto	l2779
  6099                           
  6100                           ;main.c: 339: {
  6101                           ;main.c: 340: gTimer0NormalFlashFlag = 0;
  6102  0631  01F8               	clrf	_gTimer0NormalFlashFlag	;volatile
  6103                           
  6104                           ;main.c: 342: do { LATAbits.LATA4 = ~LATAbits.LATA4; } while(0);
  6105  0632  1003               	clrc
  6106  0633  0022               	movlb	2	; select bank2
  6107  0634  1E0C               	btfss	12,4	;volatile
  6108  0635  1403               	setc
  6109  0636  1C03               	btfss	3,0
  6110  0637  2E3B               	goto	u2350
  6111  0638  0022               	movlb	2	; select bank2
  6112  0639  160C               	bsf	12,4	;volatile
  6113  063A  2E3D               	goto	l2775
  6114  063B                     u2350:	
  6115  063B  0022               	movlb	2	; select bank2
  6116  063C  120C               	bcf	12,4	;volatile
  6117  063D                     l2775:	
  6118                           
  6119                           ;main.c: 343: if(0 == gBoxCntStruct.AlarmFlag)
  6120  063D  0020               	movlb	0	; select bank0
  6121  063E  0844               	movf	_gBoxCntStruct+2,w
  6122  063F  1D03               	btfss	3,2
  6123  0640  2E4C               	goto	l2779
  6124                           
  6125                           ;main.c: 344: {
  6126                           ;main.c: 345: LATAbits.LATA5 = ~LATAbits.LATA4;
  6127  0641  1003               	clrc
  6128  0642  0022               	movlb	2	; select bank2
  6129  0643  1E0C               	btfss	12,4	;volatile
  6130  0644  1403               	setc
  6131  0645  1C03               	btfss	3,0
  6132  0646  2E4A               	goto	u2380
  6133  0647  0022               	movlb	2	; select bank2
  6134  0648  168C               	bsf	12,5	;volatile
  6135  0649  2E4C               	goto	l2779
  6136  064A                     u2380:	
  6137  064A  0022               	movlb	2	; select bank2
  6138  064B  128C               	bcf	12,5	;volatile
  6139  064C                     l2779:	
  6140                           
  6141                           ;main.c: 346: }
  6142                           ;main.c: 347: }
  6143                           ;main.c: 348: if(1 == gTimer0AlarmFlashFlag)
  6144  064C  037A               	decf	_gTimer0AlarmFlashFlag,w	;volatile
  6145  064D  1D03               	btfss	3,2
  6146  064E  2E5F               	goto	l2787
  6147                           
  6148                           ;main.c: 349: {
  6149                           ;main.c: 350: gTimer0AlarmFlashFlag = 0;
  6150  064F  01FA               	clrf	_gTimer0AlarmFlashFlag	;volatile
  6151                           
  6152                           ;main.c: 351: if(1 == gBoxCntStruct.AlarmFlag)
  6153  0650  0020               	movlb	0	; select bank0
  6154  0651  0344               	decf	_gBoxCntStruct+2,w
  6155  0652  1D03               	btfss	3,2
  6156  0653  2E5F               	goto	l2787
  6157                           
  6158                           ;main.c: 352: {
  6159                           ;main.c: 353: LATAbits.LATA5 = ~LATAbits.LATA5;
  6160  0654  1003               	clrc
  6161  0655  0022               	movlb	2	; select bank2
  6162  0656  1E8C               	btfss	12,5	;volatile
  6163  0657  1403               	setc
  6164  0658  1C03               	btfss	3,0
  6165  0659  2E5D               	goto	u2420
  6166  065A  0022               	movlb	2	; select bank2
  6167  065B  168C               	bsf	12,5	;volatile
  6168  065C  2E5F               	goto	l2787
  6169  065D                     u2420:	
  6170  065D  0022               	movlb	2	; select bank2
  6171  065E  128C               	bcf	12,5	;volatile
  6172  065F                     l2787:	
  6173                           
  6174                           ;main.c: 354: }
  6175                           ;main.c: 355: }
  6176                           ;main.c: 364: if(gBoxCntStruct.DisplayReflashFlag)
  6177  065F  0020               	movlb	0	; select bank0
  6178  0660  0846               	movf	_gBoxCntStruct+4,w
  6179  0661  1903               	btfsc	3,2
  6180  0662  2D66               	goto	l2703
  6181                           
  6182                           ;main.c: 365: {
  6183                           ;main.c: 367: gBoxCntStruct.DisplayReflashFlag = 0;
  6184  0663  01C6               	clrf	_gBoxCntStruct+4
  6185                           
  6186                           ;main.c: 368: Data_Toseg();
  6187  0664  3183  2306  3185   	fcall	_Data_Toseg
  6188                           
  6189                           ;main.c: 369: LCDSendData(0, 0b10000000);
  6190  0667  3000               	movlw	0
  6191  0668  00F3               	movwf	LCDSendData@RS
  6192  0669  00F4               	movwf	LCDSendData@RS+1
  6193  066A  3080               	movlw	128
  6194  066B  0020               	movlb	0	; select bank0
  6195  066C  00C0               	movwf	??_main
  6196  066D  0840               	movf	??_main,w
  6197  066E  00F5               	movwf	LCDSendData@value
  6198  066F  318F  274B  3185   	fcall	_LCDSendData
  6199                           
  6200                           ;main.c: 370: Print(display_data_1);
  6201  0672  30A0               	movlw	low _display_data_1
  6202  0673  0020               	movlb	0	; select bank0
  6203  0674  00A2               	movwf	Print@str
  6204  0675  3000               	movlw	high _display_data_1
  6205  0676  00A3               	movwf	Print@str+1
  6206  0677  318D  2536  3185   	fcall	_Print
  6207                           
  6208                           ;main.c: 371: LCDSendData(0, 0b11000000);
  6209  067A  3000               	movlw	0
  6210  067B  00F3               	movwf	LCDSendData@RS
  6211  067C  00F4               	movwf	LCDSendData@RS+1
  6212  067D  30C0               	movlw	192
  6213  067E  0020               	movlb	0	; select bank0
  6214  067F  00C0               	movwf	??_main
  6215  0680  0840               	movf	??_main,w
  6216  0681  00F5               	movwf	LCDSendData@value
  6217  0682  318F  274B  3185   	fcall	_LCDSendData
  6218                           
  6219                           ;main.c: 374: Print(display_data_2);
  6220  0685  30BB               	movlw	low _display_data_2
  6221  0686  0020               	movlb	0	; select bank0
  6222  0687  00A2               	movwf	Print@str
  6223  0688  3000               	movlw	high _display_data_2
  6224  0689  00A3               	movwf	Print@str+1
  6225  068A  318D  2536  3185   	fcall	_Print
  6226  068D  2D66               	goto	l2703
  6227  068E                     __end_of_main:	
  6228                           
  6229                           	psect	text1
  6230  0CF8                     __ptext1:	
  6231 ;; *************** function _bsp_CounterInit *****************
  6232 ;; Defined at:
  6233 ;;		line 6 in file "bsp_counter.c"
  6234 ;; Parameters:    Size  Location     Type
  6235 ;;		None
  6236 ;; Auto vars:     Size  Location     Type
  6237 ;;		None
  6238 ;; Return value:  Size  Location     Type
  6239 ;;                  1    wreg      void 
  6240 ;; Registers used:
  6241 ;;		wreg, status,2
  6242 ;; Tracked objects:
  6243 ;;		On entry : 0/0
  6244 ;;		On exit  : 0/0
  6245 ;;		Unchanged: 0/0
  6246 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6247 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6248 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6249 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6250 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6251 ;;Total ram usage:        0 bytes
  6252 ;; Hardware stack levels used:    1
  6253 ;; Hardware stack levels required when called:    4
  6254 ;; This function calls:
  6255 ;;		Nothing
  6256 ;; This function is called by:
  6257 ;;		_main
  6258 ;; This function uses a non-reentrant model
  6259 ;;
  6260                           
  6261                           
  6262                           ;psect for function _bsp_CounterInit
  6263  0CF8                     _bsp_CounterInit:	
  6264                           
  6265                           ;bsp_counter.c: 8: gBoxCntStruct.AlarmFlag = 0;
  6266                           
  6267                           ;incstack = 0
  6268                           ; Regs used in _bsp_CounterInit: [wreg+status,2]
  6269  0CF8  0020               	movlb	0	; select bank0
  6270  0CF9  01C4               	clrf	_gBoxCntStruct+2
  6271                           
  6272                           ;bsp_counter.c: 9: gBoxCntStruct.JamFlag = 0;
  6273  0CFA  01C5               	clrf	_gBoxCntStruct+3
  6274                           
  6275                           ;bsp_counter.c: 10: gBoxCntStruct.LargeBoxCnt = 0;
  6276  0CFB  01CF               	clrf	_gBoxCntStruct+13
  6277  0CFC  01D0               	clrf	_gBoxCntStruct+14
  6278                           
  6279                           ;bsp_counter.c: 11: gBoxCntStruct.MiddleBoxCnt = 0;
  6280  0CFD  01CD               	clrf	_gBoxCntStruct+11
  6281  0CFE  01CE               	clrf	_gBoxCntStruct+12
  6282                           
  6283                           ;bsp_counter.c: 12: gBoxCntStruct.SmallBoxCnt = 0;
  6284  0CFF  01CB               	clrf	_gBoxCntStruct+9
  6285  0D00  01CC               	clrf	_gBoxCntStruct+10
  6286                           
  6287                           ;bsp_counter.c: 13: gBoxCntStruct.BoxSum = 0;
  6288  0D01  3000               	movlw	0
  6289  0D02  00D6               	movwf	_gBoxCntStruct+20
  6290  0D03  3000               	movlw	0
  6291  0D04  00D5               	movwf	_gBoxCntStruct+19
  6292  0D05  3000               	movlw	0
  6293  0D06  00D4               	movwf	_gBoxCntStruct+18
  6294  0D07  3000               	movlw	0
  6295  0D08  00D3               	movwf	_gBoxCntStruct+17
  6296                           
  6297                           ;bsp_counter.c: 14: gBoxCntStruct.SingleTimeCnt = 0;
  6298  0D09  3000               	movlw	0
  6299  0D0A  00CA               	movwf	_gBoxCntStruct+8
  6300  0D0B  3000               	movlw	0
  6301  0D0C  00C9               	movwf	_gBoxCntStruct+7
  6302  0D0D  3000               	movlw	0
  6303  0D0E  00C8               	movwf	_gBoxCntStruct+6
  6304  0D0F  3000               	movlw	0
  6305  0D10  00C7               	movwf	_gBoxCntStruct+5
  6306                           
  6307                           ;bsp_counter.c: 15: gBoxCntStruct.TimeCntEndFlag = 0;
  6308  0D11  01C3               	clrf	_gBoxCntStruct+1
  6309                           
  6310                           ;bsp_counter.c: 16: gBoxCntStruct.TimeCntStartFlag = 0;
  6311  0D12  01C2               	clrf	_gBoxCntStruct
  6312                           
  6313                           ;bsp_counter.c: 17: gBoxCntStruct.DisplayReflashFlag = 0;
  6314  0D13  01C6               	clrf	_gBoxCntStruct+4
  6315  0D14  0008               	return
  6316  0D15                     __end_of_bsp_CounterInit:	
  6317                           
  6318                           	psect	text2
  6319  0C51                     __ptext2:	
  6320 ;; *************** function _SYSTEM_Initialize *****************
  6321 ;; Defined at:
  6322 ;;		line 50 in file "mcc_generated_files/mcc.c"
  6323 ;; Parameters:    Size  Location     Type
  6324 ;;		None
  6325 ;; Auto vars:     Size  Location     Type
  6326 ;;		None
  6327 ;; Return value:  Size  Location     Type
  6328 ;;                  1    wreg      void 
  6329 ;; Registers used:
  6330 ;;		wreg, status,2, status,0, pclath, cstack
  6331 ;; Tracked objects:
  6332 ;;		On entry : 0/0
  6333 ;;		On exit  : 0/0
  6334 ;;		Unchanged: 0/0
  6335 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6336 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6337 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6338 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6339 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6340 ;;Total ram usage:        0 bytes
  6341 ;; Hardware stack levels used:    1
  6342 ;; Hardware stack levels required when called:    6
  6343 ;; This function calls:
  6344 ;;		_EXT_INT_Initialize
  6345 ;;		_OSCILLATOR_Initialize
  6346 ;;		_PIN_MANAGER_Initialize
  6347 ;;		_TMR0_Initialize
  6348 ;;		_TMR1_Initialize
  6349 ;;		_TMR3_Initialize
  6350 ;; This function is called by:
  6351 ;;		_main
  6352 ;; This function uses a non-reentrant model
  6353 ;;
  6354                           
  6355                           
  6356                           ;psect for function _SYSTEM_Initialize
  6357  0C51                     _SYSTEM_Initialize:	
  6358                           
  6359                           ;mcc.c: 52: PIN_MANAGER_Initialize();
  6360                           
  6361                           ;incstack = 0
  6362                           ; Regs used in _SYSTEM_Initialize: [wreg+status,2+status,0+pclath+cstack]
  6363  0C51  318D  2558  318C   	fcall	_PIN_MANAGER_Initialize
  6364                           
  6365                           ;mcc.c: 53: OSCILLATOR_Initialize();
  6366  0C54  318B  23D8  318C   	fcall	_OSCILLATOR_Initialize
  6367                           
  6368                           ;mcc.c: 54: TMR3_Initialize();
  6369  0C57  318C  24A6  318C   	fcall	_TMR3_Initialize
  6370                           
  6371                           ;mcc.c: 55: EXT_INT_Initialize();
  6372  0C5A  318B  23F3  318C   	fcall	_EXT_INT_Initialize
  6373                           
  6374                           ;mcc.c: 56: TMR1_Initialize();
  6375  0C5D  318C  248F  318C   	fcall	_TMR1_Initialize
  6376                           
  6377                           ;mcc.c: 57: TMR0_Initialize();
  6378  0C60  318C  2463         	fcall	_TMR0_Initialize
  6379  0C62  0008               	return
  6380  0C63                     __end_of_SYSTEM_Initialize:	
  6381                           
  6382                           	psect	text3
  6383  0CA6                     __ptext3:	
  6384 ;; *************** function _TMR3_Initialize *****************
  6385 ;; Defined at:
  6386 ;;		line 67 in file "mcc_generated_files/tmr3.c"
  6387 ;; Parameters:    Size  Location     Type
  6388 ;;		None
  6389 ;; Auto vars:     Size  Location     Type
  6390 ;;		None
  6391 ;; Return value:  Size  Location     Type
  6392 ;;                  1    wreg      void 
  6393 ;; Registers used:
  6394 ;;		wreg, status,2, status,0, pclath, cstack
  6395 ;; Tracked objects:
  6396 ;;		On entry : 0/0
  6397 ;;		On exit  : 0/0
  6398 ;;		Unchanged: 0/0
  6399 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6400 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6401 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6402 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6403 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6404 ;;Total ram usage:        0 bytes
  6405 ;; Hardware stack levels used:    1
  6406 ;; Hardware stack levels required when called:    5
  6407 ;; This function calls:
  6408 ;;		_TMR3_SetInterruptHandler
  6409 ;; This function is called by:
  6410 ;;		_SYSTEM_Initialize
  6411 ;; This function uses a non-reentrant model
  6412 ;;
  6413                           
  6414                           
  6415                           ;psect for function _TMR3_Initialize
  6416  0CA6                     _TMR3_Initialize:	
  6417                           
  6418                           ;tmr3.c: 72: T3GCON = 0x00;
  6419                           
  6420                           ;incstack = 0
  6421                           ; Regs used in _TMR3_Initialize: [wreg+status,2+status,0+pclath+cstack]
  6422  0CA6  0029               	movlb	9	; select bank9
  6423  0CA7  0196               	clrf	22	;volatile
  6424                           
  6425                           ;tmr3.c: 75: TMR3H = 0xEC;
  6426  0CA8  30EC               	movlw	236
  6427  0CA9  0094               	movwf	20	;volatile
  6428                           
  6429                           ;tmr3.c: 78: TMR3L = 0x78;
  6430  0CAA  3078               	movlw	120
  6431  0CAB  0093               	movwf	19	;volatile
  6432                           
  6433                           ;tmr3.c: 81: timer3ReloadVal=(uint16_t)((TMR3H << 8) | TMR3L);
  6434  0CAC  0814               	movf	20,w	;volatile
  6435  0CAD  0020               	movlb	0	; select bank0
  6436  0CAE  00E1               	movwf	_timer3ReloadVal+1	;volatile
  6437  0CAF  0029               	movlb	9	; select bank9
  6438  0CB0  0813               	movf	19,w	;volatile
  6439  0CB1  0020               	movlb	0	; select bank0
  6440  0CB2  00E0               	movwf	_timer3ReloadVal	;volatile
  6441                           
  6442                           ;tmr3.c: 84: PIR5bits.TMR3IF = 0;
  6443  0CB3  1314               	bcf	20,6	;volatile
  6444                           
  6445                           ;tmr3.c: 87: PIE5bits.TMR3IE = 1;
  6446  0CB4  0021               	movlb	1	; select bank1
  6447  0CB5  1714               	bsf	20,6	;volatile
  6448                           
  6449                           ;tmr3.c: 90: TMR3_SetInterruptHandler(TMR3_DefaultInterruptHandler);
  6450  0CB6  3003               	movlw	low _TMR3_DefaultInterruptHandler
  6451  0CB7  00F3               	movwf	TMR3_SetInterruptHandler@InterruptHandler
  6452  0CB8  3000               	movlw	high _TMR3_DefaultInterruptHandler
  6453  0CB9  00F4               	movwf	TMR3_SetInterruptHandler@InterruptHandler+1
  6454  0CBA  318B  23B8         	fcall	_TMR3_SetInterruptHandler
  6455                           
  6456                           ;tmr3.c: 93: T3CON = 0x05;
  6457  0CBC  3005               	movlw	5
  6458  0CBD  0029               	movlb	9	; select bank9
  6459  0CBE  0095               	movwf	21	;volatile
  6460  0CBF  0008               	return
  6461  0CC0                     __end_of_TMR3_Initialize:	
  6462                           
  6463                           	psect	text4
  6464  0BB8                     __ptext4:	
  6465 ;; *************** function _TMR3_SetInterruptHandler *****************
  6466 ;; Defined at:
  6467 ;;		line 182 in file "mcc_generated_files/tmr3.c"
  6468 ;; Parameters:    Size  Location     Type
  6469 ;;  InterruptHan    2    3[COMMON] PTR FTN()void 
  6470 ;;		 -> TMR3_DefaultInterruptHandler(1), 
  6471 ;; Auto vars:     Size  Location     Type
  6472 ;;		None
  6473 ;; Return value:  Size  Location     Type
  6474 ;;                  1    wreg      void 
  6475 ;; Registers used:
  6476 ;;		wreg
  6477 ;; Tracked objects:
  6478 ;;		On entry : 0/0
  6479 ;;		On exit  : 0/0
  6480 ;;		Unchanged: 0/0
  6481 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6482 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6483 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6484 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6485 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6486 ;;Total ram usage:        2 bytes
  6487 ;; Hardware stack levels used:    1
  6488 ;; Hardware stack levels required when called:    4
  6489 ;; This function calls:
  6490 ;;		Nothing
  6491 ;; This function is called by:
  6492 ;;		_TMR3_Initialize
  6493 ;; This function uses a non-reentrant model
  6494 ;;
  6495                           
  6496                           
  6497                           ;psect for function _TMR3_SetInterruptHandler
  6498  0BB8                     _TMR3_SetInterruptHandler:	
  6499                           
  6500                           ;tmr3.c: 183: TMR3_InterruptHandler = InterruptHandler;
  6501                           
  6502                           ;incstack = 0
  6503                           ; Regs used in _TMR3_SetInterruptHandler: [wreg]
  6504  0BB8  0874               	movf	TMR3_SetInterruptHandler@InterruptHandler+1,w
  6505  0BB9  0020               	movlb	0	; select bank0
  6506  0BBA  00DF               	movwf	_TMR3_InterruptHandler+1
  6507  0BBB  0873               	movf	TMR3_SetInterruptHandler@InterruptHandler,w
  6508  0BBC  00DE               	movwf	_TMR3_InterruptHandler
  6509  0BBD  0008               	return
  6510  0BBE                     __end_of_TMR3_SetInterruptHandler:	
  6511                           
  6512                           	psect	text5
  6513  0C8F                     __ptext5:	
  6514 ;; *************** function _TMR1_Initialize *****************
  6515 ;; Defined at:
  6516 ;;		line 64 in file "mcc_generated_files/tmr1.c"
  6517 ;; Parameters:    Size  Location     Type
  6518 ;;		None
  6519 ;; Auto vars:     Size  Location     Type
  6520 ;;		None
  6521 ;; Return value:  Size  Location     Type
  6522 ;;                  1    wreg      void 
  6523 ;; Registers used:
  6524 ;;		wreg, status,2, status,0, pclath, cstack
  6525 ;; Tracked objects:
  6526 ;;		On entry : 0/0
  6527 ;;		On exit  : 0/0
  6528 ;;		Unchanged: 0/0
  6529 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6530 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6531 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6532 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6533 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6534 ;;Total ram usage:        0 bytes
  6535 ;; Hardware stack levels used:    1
  6536 ;; Hardware stack levels required when called:    5
  6537 ;; This function calls:
  6538 ;;		_TMR1_SetInterruptHandler
  6539 ;; This function is called by:
  6540 ;;		_SYSTEM_Initialize
  6541 ;; This function uses a non-reentrant model
  6542 ;;
  6543                           
  6544                           
  6545                           ;psect for function _TMR1_Initialize
  6546  0C8F                     _TMR1_Initialize:	
  6547                           
  6548                           ;tmr1.c: 69: T1GCON = 0x00;
  6549                           
  6550                           ;incstack = 0
  6551                           ; Regs used in _TMR1_Initialize: [wreg+status,2+status,0+pclath+cstack]
  6552  0C8F  0020               	movlb	0	; select bank0
  6553  0C90  0199               	clrf	25	;volatile
  6554                           
  6555                           ;tmr1.c: 72: TMR1H = 0xFF;
  6556  0C91  30FF               	movlw	255
  6557  0C92  0097               	movwf	23	;volatile
  6558                           
  6559                           ;tmr1.c: 75: TMR1L = 0xFF;
  6560  0C93  30FF               	movlw	255
  6561  0C94  0096               	movwf	22	;volatile
  6562                           
  6563                           ;tmr1.c: 78: timer1ReloadVal=(uint16_t)((TMR1H << 8) | TMR1L);
  6564  0C95  0817               	movf	23,w	;volatile
  6565  0C96  00E5               	movwf	_timer1ReloadVal+1	;volatile
  6566  0C97  0816               	movf	22,w	;volatile
  6567  0C98  00E4               	movwf	_timer1ReloadVal	;volatile
  6568                           
  6569                           ;tmr1.c: 81: PIR1bits.TMR1IF = 0;
  6570  0C99  1010               	bcf	16,0	;volatile
  6571                           
  6572                           ;tmr1.c: 84: PIE1bits.TMR1IE = 1;
  6573  0C9A  0021               	movlb	1	; select bank1
  6574  0C9B  1410               	bsf	16,0	;volatile
  6575                           
  6576                           ;tmr1.c: 87: TMR1_SetInterruptHandler(TMR1_DefaultInterruptHandler);
  6577  0C9C  30A1               	movlw	low _TMR1_DefaultInterruptHandler
  6578  0C9D  00F3               	movwf	TMR1_SetInterruptHandler@InterruptHandler
  6579  0C9E  300B               	movlw	high _TMR1_DefaultInterruptHandler
  6580  0C9F  00F4               	movwf	TMR1_SetInterruptHandler@InterruptHandler+1
  6581  0CA0  318B  23B2         	fcall	_TMR1_SetInterruptHandler
  6582                           
  6583                           ;tmr1.c: 90: T1CON = 0x01;
  6584  0CA2  3001               	movlw	1
  6585  0CA3  0020               	movlb	0	; select bank0
  6586  0CA4  0098               	movwf	24	;volatile
  6587  0CA5  0008               	return
  6588  0CA6                     __end_of_TMR1_Initialize:	
  6589                           
  6590                           	psect	text6
  6591  0BB2                     __ptext6:	
  6592 ;; *************** function _TMR1_SetInterruptHandler *****************
  6593 ;; Defined at:
  6594 ;;		line 178 in file "mcc_generated_files/tmr1.c"
  6595 ;; Parameters:    Size  Location     Type
  6596 ;;  InterruptHan    2    3[COMMON] PTR FTN()void 
  6597 ;;		 -> TMR1_DefaultInterruptHandler(1), 
  6598 ;; Auto vars:     Size  Location     Type
  6599 ;;		None
  6600 ;; Return value:  Size  Location     Type
  6601 ;;                  1    wreg      void 
  6602 ;; Registers used:
  6603 ;;		wreg
  6604 ;; Tracked objects:
  6605 ;;		On entry : 0/0
  6606 ;;		On exit  : 0/0
  6607 ;;		Unchanged: 0/0
  6608 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6609 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6610 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6611 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6612 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6613 ;;Total ram usage:        2 bytes
  6614 ;; Hardware stack levels used:    1
  6615 ;; Hardware stack levels required when called:    4
  6616 ;; This function calls:
  6617 ;;		Nothing
  6618 ;; This function is called by:
  6619 ;;		_TMR1_Initialize
  6620 ;; This function uses a non-reentrant model
  6621 ;;
  6622                           
  6623                           
  6624                           ;psect for function _TMR1_SetInterruptHandler
  6625  0BB2                     _TMR1_SetInterruptHandler:	
  6626                           
  6627                           ;tmr1.c: 179: TMR1_InterruptHandler = InterruptHandler;
  6628                           
  6629                           ;incstack = 0
  6630                           ; Regs used in _TMR1_SetInterruptHandler: [wreg]
  6631  0BB2  0874               	movf	TMR1_SetInterruptHandler@InterruptHandler+1,w
  6632  0BB3  0020               	movlb	0	; select bank0
  6633  0BB4  00E3               	movwf	_TMR1_InterruptHandler+1
  6634  0BB5  0873               	movf	TMR1_SetInterruptHandler@InterruptHandler,w
  6635  0BB6  00E2               	movwf	_TMR1_InterruptHandler
  6636  0BB7  0008               	return
  6637  0BB8                     __end_of_TMR1_SetInterruptHandler:	
  6638                           
  6639                           	psect	text7
  6640  0C63                     __ptext7:	
  6641 ;; *************** function _TMR0_Initialize *****************
  6642 ;; Defined at:
  6643 ;;		line 68 in file "mcc_generated_files/tmr0.c"
  6644 ;; Parameters:    Size  Location     Type
  6645 ;;		None
  6646 ;; Auto vars:     Size  Location     Type
  6647 ;;		None
  6648 ;; Return value:  Size  Location     Type
  6649 ;;                  1    wreg      void 
  6650 ;; Registers used:
  6651 ;;		wreg, status,2, status,0, pclath, cstack
  6652 ;; Tracked objects:
  6653 ;;		On entry : 0/0
  6654 ;;		On exit  : 0/0
  6655 ;;		Unchanged: 0/0
  6656 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6657 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6658 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6659 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6660 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6661 ;;Total ram usage:        1 bytes
  6662 ;; Hardware stack levels used:    1
  6663 ;; Hardware stack levels required when called:    5
  6664 ;; This function calls:
  6665 ;;		_TMR0_SetInterruptHandler
  6666 ;; This function is called by:
  6667 ;;		_SYSTEM_Initialize
  6668 ;; This function uses a non-reentrant model
  6669 ;;
  6670                           
  6671                           
  6672                           ;psect for function _TMR0_Initialize
  6673  0C63                     _TMR0_Initialize:	
  6674                           
  6675                           ;tmr0.c: 73: OPTION_REG = (uint8_t)((OPTION_REG & 0xC0) | 0xD7 & 0x3F);
  6676                           
  6677                           ;incstack = 0
  6678                           ; Regs used in _TMR0_Initialize: [wreg+status,2+status,0+pclath+cstack]
  6679  0C63  0021               	movlb	1	; select bank1
  6680  0C64  0815               	movf	21,w	;volatile
  6681  0C65  39C0               	andlw	192
  6682  0C66  3817               	iorlw	23
  6683  0C67  0095               	movwf	21	;volatile
  6684                           
  6685                           ;tmr0.c: 76: TMR0 = 0x9E;
  6686  0C68  309E               	movlw	158
  6687  0C69  0020               	movlb	0	; select bank0
  6688  0C6A  0095               	movwf	21	;volatile
  6689                           
  6690                           ;tmr0.c: 79: timer0ReloadVal= 158;
  6691  0C6B  309E               	movlw	158
  6692  0C6C  00F5               	movwf	??_TMR0_Initialize
  6693  0C6D  0875               	movf	??_TMR0_Initialize,w
  6694  0C6E  00E8               	movwf	_timer0ReloadVal	;volatile
  6695                           
  6696                           ;tmr0.c: 82: INTCONbits.TMR0IF = 0;
  6697  0C6F  110B               	bcf	11,2	;volatile
  6698                           
  6699                           ;tmr0.c: 85: INTCONbits.TMR0IE = 1;
  6700  0C70  168B               	bsf	11,5	;volatile
  6701                           
  6702                           ;tmr0.c: 88: TMR0_SetInterruptHandler(TMR0_DefaultInterruptHandler);
  6703  0C71  30A0               	movlw	low _TMR0_DefaultInterruptHandler
  6704  0C72  00F3               	movwf	TMR0_SetInterruptHandler@InterruptHandler
  6705  0C73  300B               	movlw	high _TMR0_DefaultInterruptHandler
  6706  0C74  00F4               	movwf	TMR0_SetInterruptHandler@InterruptHandler+1
  6707  0C75  318B  23AC         	fcall	_TMR0_SetInterruptHandler
  6708  0C77  0008               	return
  6709  0C78                     __end_of_TMR0_Initialize:	
  6710                           
  6711                           	psect	text8
  6712  0BAC                     __ptext8:	
  6713 ;; *************** function _TMR0_SetInterruptHandler *****************
  6714 ;; Defined at:
  6715 ;;		line 144 in file "mcc_generated_files/tmr0.c"
  6716 ;; Parameters:    Size  Location     Type
  6717 ;;  InterruptHan    2    3[COMMON] PTR FTN()void 
  6718 ;;		 -> TMR0_DefaultInterruptHandler(1), 
  6719 ;; Auto vars:     Size  Location     Type
  6720 ;;		None
  6721 ;; Return value:  Size  Location     Type
  6722 ;;                  1    wreg      void 
  6723 ;; Registers used:
  6724 ;;		wreg
  6725 ;; Tracked objects:
  6726 ;;		On entry : 0/0
  6727 ;;		On exit  : 0/0
  6728 ;;		Unchanged: 0/0
  6729 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6730 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6731 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6732 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6733 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6734 ;;Total ram usage:        2 bytes
  6735 ;; Hardware stack levels used:    1
  6736 ;; Hardware stack levels required when called:    4
  6737 ;; This function calls:
  6738 ;;		Nothing
  6739 ;; This function is called by:
  6740 ;;		_TMR0_Initialize
  6741 ;; This function uses a non-reentrant model
  6742 ;;
  6743                           
  6744                           
  6745                           ;psect for function _TMR0_SetInterruptHandler
  6746  0BAC                     _TMR0_SetInterruptHandler:	
  6747                           
  6748                           ;tmr0.c: 145: TMR0_InterruptHandler = InterruptHandler;
  6749                           
  6750                           ;incstack = 0
  6751                           ; Regs used in _TMR0_SetInterruptHandler: [wreg]
  6752  0BAC  0874               	movf	TMR0_SetInterruptHandler@InterruptHandler+1,w
  6753  0BAD  0020               	movlb	0	; select bank0
  6754  0BAE  00E7               	movwf	_TMR0_InterruptHandler+1
  6755  0BAF  0873               	movf	TMR0_SetInterruptHandler@InterruptHandler,w
  6756  0BB0  00E6               	movwf	_TMR0_InterruptHandler
  6757  0BB1  0008               	return
  6758  0BB2                     __end_of_TMR0_SetInterruptHandler:	
  6759                           
  6760                           	psect	text9
  6761  0D58                     __ptext9:	
  6762 ;; *************** function _PIN_MANAGER_Initialize *****************
  6763 ;; Defined at:
  6764 ;;		line 57 in file "mcc_generated_files/pin_manager.c"
  6765 ;; Parameters:    Size  Location     Type
  6766 ;;		None
  6767 ;; Auto vars:     Size  Location     Type
  6768 ;;		None
  6769 ;; Return value:  Size  Location     Type
  6770 ;;                  1    wreg      void 
  6771 ;; Registers used:
  6772 ;;		wreg, status,2
  6773 ;; Tracked objects:
  6774 ;;		On entry : 0/0
  6775 ;;		On exit  : 0/0
  6776 ;;		Unchanged: 0/0
  6777 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6778 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6779 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6780 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6781 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6782 ;;Total ram usage:        0 bytes
  6783 ;; Hardware stack levels used:    1
  6784 ;; Hardware stack levels required when called:    4
  6785 ;; This function calls:
  6786 ;;		Nothing
  6787 ;; This function is called by:
  6788 ;;		_SYSTEM_Initialize
  6789 ;; This function uses a non-reentrant model
  6790 ;;
  6791                           
  6792                           
  6793                           ;psect for function _PIN_MANAGER_Initialize
  6794  0D58                     _PIN_MANAGER_Initialize:	
  6795                           
  6796                           ;pin_manager.c: 62: LATA = 0x02;
  6797                           
  6798                           ;incstack = 0
  6799                           ; Regs used in _PIN_MANAGER_Initialize: [wreg+status,2]
  6800  0D58  3002               	movlw	2
  6801  0D59  0022               	movlb	2	; select bank2
  6802  0D5A  008C               	movwf	12	;volatile
  6803                           
  6804                           ;pin_manager.c: 63: LATB = 0xE0;
  6805  0D5B  30E0               	movlw	224
  6806  0D5C  008D               	movwf	13	;volatile
  6807                           
  6808                           ;pin_manager.c: 64: LATC = 0xFE;
  6809  0D5D  30FE               	movlw	254
  6810  0D5E  008E               	movwf	14	;volatile
  6811                           
  6812                           ;pin_manager.c: 69: TRISA = 0x05;
  6813  0D5F  3005               	movlw	5
  6814  0D60  0021               	movlb	1	; select bank1
  6815  0D61  008C               	movwf	12	;volatile
  6816                           
  6817                           ;pin_manager.c: 70: TRISB = 0x10;
  6818  0D62  3010               	movlw	16
  6819  0D63  008D               	movwf	13	;volatile
  6820                           
  6821                           ;pin_manager.c: 71: TRISC = 0x01;
  6822  0D64  3001               	movlw	1
  6823  0D65  008E               	movwf	14	;volatile
  6824                           
  6825                           ;pin_manager.c: 76: ANSELC = 0x01;
  6826  0D66  3001               	movlw	1
  6827  0D67  0023               	movlb	3	; select bank3
  6828  0D68  008E               	movwf	14	;volatile
  6829                           
  6830                           ;pin_manager.c: 77: ANSELB = 0x10;
  6831  0D69  3010               	movlw	16
  6832  0D6A  008D               	movwf	13	;volatile
  6833                           
  6834                           ;pin_manager.c: 78: ANSELA = 0x11;
  6835  0D6B  3011               	movlw	17
  6836  0D6C  008C               	movwf	12	;volatile
  6837                           
  6838                           ;pin_manager.c: 83: WPUB = 0x00;
  6839  0D6D  0024               	movlb	4	; select bank4
  6840  0D6E  018D               	clrf	13	;volatile
  6841                           
  6842                           ;pin_manager.c: 84: WPUA = 0x00;
  6843  0D6F  018C               	clrf	12	;volatile
  6844                           
  6845                           ;pin_manager.c: 85: WPUC = 0x00;
  6846  0D70  018E               	clrf	14	;volatile
  6847                           
  6848                           ;pin_manager.c: 86: OPTION_REGbits.nWPUEN = 1;
  6849  0D71  0021               	movlb	1	; select bank1
  6850  0D72  1795               	bsf	21,7	;volatile
  6851                           
  6852                           ;pin_manager.c: 91: ODCONA = 0x00;
  6853  0D73  0025               	movlb	5	; select bank5
  6854  0D74  018C               	clrf	12	;volatile
  6855                           
  6856                           ;pin_manager.c: 92: ODCONB = 0x00;
  6857  0D75  018D               	clrf	13	;volatile
  6858                           
  6859                           ;pin_manager.c: 93: ODCONC = 0x00;
  6860  0D76  018E               	clrf	14	;volatile
  6861                           
  6862                           ;pin_manager.c: 101: INTCONbits.IOCIE = 1;
  6863  0D77  158B               	bsf	11,3	;volatile
  6864                           
  6865                           ;pin_manager.c: 104: INTPPS = 0x02;
  6866  0D78  3002               	movlw	2
  6867  0D79  003C               	movlb	28	; select bank28
  6868  0D7A  0090               	movwf	16	;volatile
  6869  0D7B  0008               	return
  6870  0D7C                     __end_of_PIN_MANAGER_Initialize:	
  6871                           
  6872                           	psect	text10
  6873  0BD8                     __ptext10:	
  6874 ;; *************** function _OSCILLATOR_Initialize *****************
  6875 ;; Defined at:
  6876 ;;		line 60 in file "mcc_generated_files/mcc.c"
  6877 ;; Parameters:    Size  Location     Type
  6878 ;;		None
  6879 ;; Auto vars:     Size  Location     Type
  6880 ;;		None
  6881 ;; Return value:  Size  Location     Type
  6882 ;;                  1    wreg      void 
  6883 ;; Registers used:
  6884 ;;		wreg, status,2
  6885 ;; Tracked objects:
  6886 ;;		On entry : 0/0
  6887 ;;		On exit  : 0/0
  6888 ;;		Unchanged: 0/0
  6889 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6890 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6891 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6892 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6893 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6894 ;;Total ram usage:        0 bytes
  6895 ;; Hardware stack levels used:    1
  6896 ;; Hardware stack levels required when called:    4
  6897 ;; This function calls:
  6898 ;;		Nothing
  6899 ;; This function is called by:
  6900 ;;		_SYSTEM_Initialize
  6901 ;; This function uses a non-reentrant model
  6902 ;;
  6903                           
  6904                           
  6905                           ;psect for function _OSCILLATOR_Initialize
  6906  0BD8                     _OSCILLATOR_Initialize:	
  6907                           
  6908                           ;mcc.c: 63: OSCCON = 0x60;
  6909                           
  6910                           ;incstack = 0
  6911                           ; Regs used in _OSCILLATOR_Initialize: [wreg+status,2]
  6912  0BD8  3060               	movlw	96
  6913  0BD9  0021               	movlb	1	; select bank1
  6914  0BDA  0099               	movwf	25	;volatile
  6915                           
  6916                           ;mcc.c: 65: OSCTUNE = 0x00;
  6917  0BDB  0198               	clrf	24	;volatile
  6918                           
  6919                           ;mcc.c: 67: BORCON = 0x00;
  6920  0BDC  0022               	movlb	2	; select bank2
  6921  0BDD  0196               	clrf	22	;volatile
  6922  0BDE  0008               	return
  6923  0BDF                     __end_of_OSCILLATOR_Initialize:	
  6924                           
  6925                           	psect	text11
  6926  0BF3                     __ptext11:	
  6927 ;; *************** function _EXT_INT_Initialize *****************
  6928 ;; Defined at:
  6929 ;;		line 78 in file "mcc_generated_files/ext_int.c"
  6930 ;; Parameters:    Size  Location     Type
  6931 ;;		None
  6932 ;; Auto vars:     Size  Location     Type
  6933 ;;		None
  6934 ;; Return value:  Size  Location     Type
  6935 ;;                  1    wreg      void 
  6936 ;; Registers used:
  6937 ;;		wreg, status,2, status,0, pclath, cstack
  6938 ;; Tracked objects:
  6939 ;;		On entry : 0/0
  6940 ;;		On exit  : 0/0
  6941 ;;		Unchanged: 0/0
  6942 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  6943 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6944 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6945 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6946 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  6947 ;;Total ram usage:        0 bytes
  6948 ;; Hardware stack levels used:    1
  6949 ;; Hardware stack levels required when called:    5
  6950 ;; This function calls:
  6951 ;;		_INT_SetInterruptHandler
  6952 ;; This function is called by:
  6953 ;;		_SYSTEM_Initialize
  6954 ;; This function uses a non-reentrant model
  6955 ;;
  6956                           
  6957                           
  6958                           ;psect for function _EXT_INT_Initialize
  6959  0BF3                     _EXT_INT_Initialize:	
  6960                           
  6961                           ;ext_int.c: 83: (INTCONbits.INTF = 0);
  6962                           
  6963                           ;incstack = 0
  6964                           ; Regs used in _EXT_INT_Initialize: [wreg+status,2+status,0+pclath+cstack]
  6965  0BF3  108B               	bcf	11,1	;volatile
  6966                           
  6967                           ;ext_int.c: 84: (OPTION_REGbits.INTEDG = 1);
  6968  0BF4  0021               	movlb	1	; select bank1
  6969  0BF5  1715               	bsf	21,6	;volatile
  6970                           
  6971                           ;ext_int.c: 86: INT_SetInterruptHandler(INT_DefaultInterruptHandler);
  6972  0BF6  309E               	movlw	low _INT_DefaultInterruptHandler
  6973  0BF7  00F3               	movwf	INT_SetInterruptHandler@InterruptHandler
  6974  0BF8  300B               	movlw	high _INT_DefaultInterruptHandler
  6975  0BF9  00F4               	movwf	INT_SetInterruptHandler@InterruptHandler+1
  6976  0BFA  318B  23A6         	fcall	_INT_SetInterruptHandler
  6977                           
  6978                           ;ext_int.c: 87: (INTCONbits.INTE = 1);
  6979  0BFC  160B               	bsf	11,4	;volatile
  6980  0BFD  0008               	return
  6981  0BFE                     __end_of_EXT_INT_Initialize:	
  6982                           
  6983                           	psect	text12
  6984  0BA6                     __ptext12:	
  6985 ;; *************** function _INT_SetInterruptHandler *****************
  6986 ;; Defined at:
  6987 ;;		line 69 in file "mcc_generated_files/ext_int.c"
  6988 ;; Parameters:    Size  Location     Type
  6989 ;;  InterruptHan    2    3[COMMON] PTR FTN()void 
  6990 ;;		 -> INT_DefaultInterruptHandler(1), 
  6991 ;; Auto vars:     Size  Location     Type
  6992 ;;		None
  6993 ;; Return value:  Size  Location     Type
  6994 ;;                  1    wreg      void 
  6995 ;; Registers used:
  6996 ;;		wreg
  6997 ;; Tracked objects:
  6998 ;;		On entry : 0/0
  6999 ;;		On exit  : 0/0
  7000 ;;		Unchanged: 0/0
  7001 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7002 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7003 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7004 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7005 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7006 ;;Total ram usage:        2 bytes
  7007 ;; Hardware stack levels used:    1
  7008 ;; Hardware stack levels required when called:    4
  7009 ;; This function calls:
  7010 ;;		Nothing
  7011 ;; This function is called by:
  7012 ;;		_EXT_INT_Initialize
  7013 ;; This function uses a non-reentrant model
  7014 ;;
  7015                           
  7016                           
  7017                           ;psect for function _INT_SetInterruptHandler
  7018  0BA6                     _INT_SetInterruptHandler:	
  7019                           
  7020                           ;ext_int.c: 70: INT_InterruptHandler = InterruptHandler;
  7021                           
  7022                           ;incstack = 0
  7023                           ; Regs used in _INT_SetInterruptHandler: [wreg]
  7024  0BA6  0874               	movf	INT_SetInterruptHandler@InterruptHandler+1,w
  7025  0BA7  0021               	movlb	1	; select bank1
  7026  0BA8  00E7               	movwf	(_INT_InterruptHandler+1)^(0+128)
  7027  0BA9  0873               	movf	INT_SetInterruptHandler@InterruptHandler,w
  7028  0BAA  00E6               	movwf	_INT_InterruptHandler^(0+128)
  7029  0BAB  0008               	return
  7030  0BAC                     __end_of_INT_SetInterruptHandler:	
  7031                           
  7032                           	psect	text13
  7033  0D36                     __ptext13:	
  7034 ;; *************** function _Print *****************
  7035 ;; Defined at:
  7036 ;;		line 147 in file "main.c"
  7037 ;; Parameters:    Size  Location     Type
  7038 ;;  str             2    2[BANK0 ] PTR unsigned char 
  7039 ;;		 -> clearDataOk_2(11), clearDataOk_1(15), clearingData(18), display_data_2(11), 
  7040 ;;		 -> display_data_1(16), 
  7041 ;; Auto vars:     Size  Location     Type
  7042 ;;		None
  7043 ;; Return value:  Size  Location     Type
  7044 ;;                  1    wreg      void 
  7045 ;; Registers used:
  7046 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7047 ;; Tracked objects:
  7048 ;;		On entry : 0/0
  7049 ;;		On exit  : 0/0
  7050 ;;		Unchanged: 0/0
  7051 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7052 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7053 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7054 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7055 ;;      Totals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7056 ;;Total ram usage:        3 bytes
  7057 ;; Hardware stack levels used:    1
  7058 ;; Hardware stack levels required when called:    5
  7059 ;; This function calls:
  7060 ;;		_LCDSendData
  7061 ;; This function is called by:
  7062 ;;		_main
  7063 ;; This function uses a non-reentrant model
  7064 ;;
  7065                           
  7066                           
  7067                           ;psect for function _Print
  7068  0D36                     _Print:	
  7069  0D36                     l2593:	
  7070                           ;main.c: 149: while(*str !='\0')
  7071                           
  7072                           ;incstack = 0
  7073                           ; Regs used in _Print: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7074                           
  7075  0D36  0020               	movlb	0	; select bank0
  7076  0D37  0822               	movf	Print@str,w
  7077  0D38  0086               	movwf	6
  7078  0D39  0823               	movf	Print@str+1,w
  7079  0D3A  0087               	movwf	7
  7080  0D3B  0801               	movf	1,w
  7081  0D3C  1903               	btfsc	3,2
  7082  0D3D  0008               	return
  7083                           
  7084                           ;main.c: 150: {
  7085                           ;main.c: 151: LCDSendData(1,*str);
  7086  0D3E  3001               	movlw	1
  7087  0D3F  00F3               	movwf	LCDSendData@RS
  7088  0D40  3000               	movlw	0
  7089  0D41  00F4               	movwf	LCDSendData@RS+1
  7090  0D42  0020               	movlb	0	; select bank0
  7091  0D43  0822               	movf	Print@str,w
  7092  0D44  0086               	movwf	6
  7093  0D45  0823               	movf	Print@str+1,w
  7094  0D46  0087               	movwf	7
  7095  0D47  0801               	movf	1,w
  7096  0D48  00A4               	movwf	??_Print
  7097  0D49  0824               	movf	??_Print,w
  7098  0D4A  00F5               	movwf	LCDSendData@value
  7099  0D4B  318F  274B  318D   	fcall	_LCDSendData
  7100                           
  7101                           ;main.c: 152: str++;
  7102  0D4E  3001               	movlw	1
  7103  0D4F  0020               	movlb	0	; select bank0
  7104  0D50  07A2               	addwf	Print@str,f
  7105  0D51  3000               	movlw	0
  7106  0D52  3DA3               	addwfc	Print@str+1,f
  7107                           
  7108                           ;main.c: 153: _delay((unsigned long)((1)*(2000000/4000.0)));
  7109  0D53  30A6               	movlw	166
  7110  0D54                     u2497:	
  7111  0D54  0B89               	decfsz	9,f
  7112  0D55  2D54               	goto	u2497
  7113  0D56  3200               	nop2
  7114  0D57  2D36               	goto	l2593
  7115  0D58                     __end_of_Print:	
  7116                           
  7117                           	psect	text14
  7118  075A                     __ptext14:	
  7119 ;; *************** function _LCDInit *****************
  7120 ;; Defined at:
  7121 ;;		line 108 in file "main.c"
  7122 ;; Parameters:    Size  Location     Type
  7123 ;;		None
  7124 ;; Auto vars:     Size  Location     Type
  7125 ;;		None
  7126 ;; Return value:  Size  Location     Type
  7127 ;;                  1    wreg      void 
  7128 ;; Registers used:
  7129 ;;		wreg, status,2, status,0, pclath, cstack
  7130 ;; Tracked objects:
  7131 ;;		On entry : 0/0
  7132 ;;		On exit  : 0/0
  7133 ;;		Unchanged: 0/0
  7134 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7135 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7136 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7137 ;;      Temps:          0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7138 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7139 ;;Total ram usage:        1 bytes
  7140 ;; Hardware stack levels used:    1
  7141 ;; Hardware stack levels required when called:    5
  7142 ;; This function calls:
  7143 ;;		_LCDSendData
  7144 ;; This function is called by:
  7145 ;;		_main
  7146 ;; This function uses a non-reentrant model
  7147 ;;
  7148                           
  7149                           
  7150                           ;psect for function _LCDInit
  7151  075A                     _LCDInit:	
  7152                           
  7153                           ;main.c: 110: LATBbits.LATB6 = 0;
  7154                           
  7155                           ;incstack = 0
  7156                           ; Regs used in _LCDInit: [wreg+status,2+status,0+pclath+cstack]
  7157  075A  0022               	movlb	2	; select bank2
  7158  075B  130D               	bcf	13,6	;volatile
  7159                           
  7160                           ;main.c: 111: LATBbits.LATB7 = 0;
  7161  075C  138D               	bcf	13,7	;volatile
  7162                           
  7163                           ;main.c: 112: LATBbits.LATB5 = 0;
  7164  075D  128D               	bcf	13,5	;volatile
  7165                           
  7166                           ;main.c: 113: LATCbits.LATC1 = 0;
  7167  075E  108E               	bcf	14,1	;volatile
  7168                           
  7169                           ;main.c: 114: LATCbits.LATC2 = 0;
  7170  075F  110E               	bcf	14,2	;volatile
  7171                           
  7172                           ;main.c: 115: LATCbits.LATC3 = 0;
  7173  0760  118E               	bcf	14,3	;volatile
  7174                           
  7175                           ;main.c: 116: LATCbits.LATC4 = 0;
  7176  0761  120E               	bcf	14,4	;volatile
  7177                           
  7178                           ;main.c: 117: LATCbits.LATC5 = 0;
  7179  0762  128E               	bcf	14,5	;volatile
  7180                           
  7181                           ;main.c: 118: LATCbits.LATC6 = 0;
  7182  0763  130E               	bcf	14,6	;volatile
  7183                           
  7184                           ;main.c: 119: LATCbits.LATC7 = 0;
  7185  0764  138E               	bcf	14,7	;volatile
  7186                           
  7187                           ;main.c: 121: _delay((unsigned long)((50)*(2000000/4000.0)));
  7188  0765  3021               	movlw	33
  7189  0766  0020               	movlb	0	; select bank0
  7190  0767  00A2               	movwf	??_LCDInit
  7191  0768  3076               	movlw	118
  7192  0769                     u2507:	
  7193  0769  0B89               	decfsz	9,f
  7194  076A  2F69               	goto	u2507
  7195  076B  0BA2               	decfsz	??_LCDInit,f
  7196  076C  2F69               	goto	u2507
  7197  076D  0000               	nop
  7198                           
  7199                           ;main.c: 122: LCDSendData(0, 0b00111000);
  7200  076E  3000               	movlw	0
  7201  076F  00F3               	movwf	LCDSendData@RS
  7202  0770  00F4               	movwf	LCDSendData@RS+1
  7203  0771  3038               	movlw	56
  7204  0772  0020               	movlb	0	; select bank0
  7205  0773  00A2               	movwf	??_LCDInit
  7206  0774  0822               	movf	??_LCDInit,w
  7207  0775  00F5               	movwf	LCDSendData@value
  7208  0776  318F  274B  3187   	fcall	_LCDSendData
  7209                           
  7210                           ;main.c: 125: _delay((unsigned long)((50)*(2000000/4000.0)));
  7211  0779  3021               	movlw	33
  7212  077A  0020               	movlb	0	; select bank0
  7213  077B  00A2               	movwf	??_LCDInit
  7214  077C  3076               	movlw	118
  7215  077D                     u2517:	
  7216  077D  0B89               	decfsz	9,f
  7217  077E  2F7D               	goto	u2517
  7218  077F  0BA2               	decfsz	??_LCDInit,f
  7219  0780  2F7D               	goto	u2517
  7220  0781  0000               	nop
  7221                           
  7222                           ;main.c: 126: LCDSendData(0, 0b00111000);
  7223  0782  3000               	movlw	0
  7224  0783  00F3               	movwf	LCDSendData@RS
  7225  0784  00F4               	movwf	LCDSendData@RS+1
  7226  0785  3038               	movlw	56
  7227  0786  0020               	movlb	0	; select bank0
  7228  0787  00A2               	movwf	??_LCDInit
  7229  0788  0822               	movf	??_LCDInit,w
  7230  0789  00F5               	movwf	LCDSendData@value
  7231  078A  318F  274B  3187   	fcall	_LCDSendData
  7232                           
  7233                           ;main.c: 129: _delay((unsigned long)((50)*(2000000/4000.0)));
  7234  078D  3021               	movlw	33
  7235  078E  0020               	movlb	0	; select bank0
  7236  078F  00A2               	movwf	??_LCDInit
  7237  0790  3076               	movlw	118
  7238  0791                     u2527:	
  7239  0791  0B89               	decfsz	9,f
  7240  0792  2F91               	goto	u2527
  7241  0793  0BA2               	decfsz	??_LCDInit,f
  7242  0794  2F91               	goto	u2527
  7243  0795  0000               	nop
  7244                           
  7245                           ;main.c: 130: LCDSendData(0, 0b00111000);
  7246  0796  3000               	movlw	0
  7247  0797  00F3               	movwf	LCDSendData@RS
  7248  0798  00F4               	movwf	LCDSendData@RS+1
  7249  0799  3038               	movlw	56
  7250  079A  0020               	movlb	0	; select bank0
  7251  079B  00A2               	movwf	??_LCDInit
  7252  079C  0822               	movf	??_LCDInit,w
  7253  079D  00F5               	movwf	LCDSendData@value
  7254  079E  318F  274B  3187   	fcall	_LCDSendData
  7255                           
  7256                           ;main.c: 133: _delay((unsigned long)((50)*(2000000/4000.0)));
  7257  07A1  3021               	movlw	33
  7258  07A2  0020               	movlb	0	; select bank0
  7259  07A3  00A2               	movwf	??_LCDInit
  7260  07A4  3076               	movlw	118
  7261  07A5                     u2537:	
  7262  07A5  0B89               	decfsz	9,f
  7263  07A6  2FA5               	goto	u2537
  7264  07A7  0BA2               	decfsz	??_LCDInit,f
  7265  07A8  2FA5               	goto	u2537
  7266  07A9  0000               	nop
  7267                           
  7268                           ;main.c: 134: LCDSendData(0, 0b00111000);
  7269  07AA  3000               	movlw	0
  7270  07AB  00F3               	movwf	LCDSendData@RS
  7271  07AC  00F4               	movwf	LCDSendData@RS+1
  7272  07AD  3038               	movlw	56
  7273  07AE  0020               	movlb	0	; select bank0
  7274  07AF  00A2               	movwf	??_LCDInit
  7275  07B0  0822               	movf	??_LCDInit,w
  7276  07B1  00F5               	movwf	LCDSendData@value
  7277  07B2  318F  274B  3187   	fcall	_LCDSendData
  7278                           
  7279                           ;main.c: 135: LCDSendData(0, 0b00001111);
  7280  07B5  3000               	movlw	0
  7281  07B6  00F3               	movwf	LCDSendData@RS
  7282  07B7  00F4               	movwf	LCDSendData@RS+1
  7283  07B8  300F               	movlw	15
  7284  07B9  0020               	movlb	0	; select bank0
  7285  07BA  00A2               	movwf	??_LCDInit
  7286  07BB  0822               	movf	??_LCDInit,w
  7287  07BC  00F5               	movwf	LCDSendData@value
  7288  07BD  318F  274B  3187   	fcall	_LCDSendData
  7289                           
  7290                           ;main.c: 136: LCDSendData(0, 0b00000001);
  7291  07C0  3000               	movlw	0
  7292  07C1  00F3               	movwf	LCDSendData@RS
  7293  07C2  00F4               	movwf	LCDSendData@RS+1
  7294  07C3  01F5               	clrf	LCDSendData@value
  7295  07C4  0AF5               	incf	LCDSendData@value,f
  7296  07C5  318F  274B  3187   	fcall	_LCDSendData
  7297                           
  7298                           ;main.c: 137: LCDSendData(0, 0b00000110);
  7299  07C8  3000               	movlw	0
  7300  07C9  00F3               	movwf	LCDSendData@RS
  7301  07CA  00F4               	movwf	LCDSendData@RS+1
  7302  07CB  3006               	movlw	6
  7303  07CC  0020               	movlb	0	; select bank0
  7304  07CD  00A2               	movwf	??_LCDInit
  7305  07CE  0822               	movf	??_LCDInit,w
  7306  07CF  00F5               	movwf	LCDSendData@value
  7307  07D0  318F  274B         	fcall	_LCDSendData
  7308  07D2  0008               	return
  7309  07D3                     __end_of_LCDInit:	
  7310                           
  7311                           	psect	text15
  7312  0F4B                     __ptext15:	
  7313 ;; *************** function _LCDSendData *****************
  7314 ;; Defined at:
  7315 ;;		line 84 in file "main.c"
  7316 ;; Parameters:    Size  Location     Type
  7317 ;;  RS              2    3[COMMON] int 
  7318 ;;  value           1    5[COMMON] unsigned char 
  7319 ;; Auto vars:     Size  Location     Type
  7320 ;;		None
  7321 ;; Return value:  Size  Location     Type
  7322 ;;                  1    wreg      void 
  7323 ;; Registers used:
  7324 ;;		wreg, status,2, status,0
  7325 ;; Tracked objects:
  7326 ;;		On entry : 0/0
  7327 ;;		On exit  : 0/0
  7328 ;;		Unchanged: 0/0
  7329 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7330 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7331 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7332 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7333 ;;      Totals:         3       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7334 ;;Total ram usage:        5 bytes
  7335 ;; Hardware stack levels used:    1
  7336 ;; Hardware stack levels required when called:    4
  7337 ;; This function calls:
  7338 ;;		Nothing
  7339 ;; This function is called by:
  7340 ;;		_LCDInit
  7341 ;;		_Print
  7342 ;;		_main
  7343 ;; This function uses a non-reentrant model
  7344 ;;
  7345                           
  7346                           
  7347                           ;psect for function _LCDSendData
  7348  0F4B                     _LCDSendData:	
  7349                           
  7350                           ;main.c: 86: LATBbits.LATB5 = value & 1;
  7351                           
  7352                           ;incstack = 0
  7353                           ; Regs used in _LCDSendData: [wreg+status,2+status,0]
  7354  0F4B  0875               	movf	LCDSendData@value,w
  7355  0F4C  3901               	andlw	1
  7356  0F4D  0020               	movlb	0	; select bank0
  7357  0F4E  00A0               	movwf	??_LCDSendData
  7358  0F4F  0EA0               	swapf	??_LCDSendData,f
  7359  0F50  0DA0               	rlf	??_LCDSendData,f
  7360  0F51  0022               	movlb	2	; select bank2
  7361  0F52  080D               	movf	13,w	;volatile
  7362  0F53  0020               	movlb	0	; select bank0
  7363  0F54  0620               	xorwf	??_LCDSendData,w
  7364  0F55  39DF               	andlw	-33
  7365  0F56  0620               	xorwf	??_LCDSendData,w
  7366  0F57  0022               	movlb	2	; select bank2
  7367  0F58  008D               	movwf	13	;volatile
  7368                           
  7369                           ;main.c: 87: LATCbits.LATC1 = (value & 2) >> 1;
  7370  0F59  3675               	lsrf	LCDSendData@value,w
  7371  0F5A  3901               	andlw	1
  7372  0F5B  0020               	movlb	0	; select bank0
  7373  0F5C  00A0               	movwf	??_LCDSendData
  7374  0F5D  0DA0               	rlf	??_LCDSendData,f
  7375  0F5E  0022               	movlb	2	; select bank2
  7376  0F5F  080E               	movf	14,w	;volatile
  7377  0F60  0020               	movlb	0	; select bank0
  7378  0F61  0620               	xorwf	??_LCDSendData,w
  7379  0F62  39FD               	andlw	-3
  7380  0F63  0620               	xorwf	??_LCDSendData,w
  7381  0F64  0022               	movlb	2	; select bank2
  7382  0F65  008E               	movwf	14	;volatile
  7383                           
  7384                           ;main.c: 88: LATCbits.LATC2 = (value & 4) >> 2;
  7385  0F66  0875               	movf	LCDSendData@value,w
  7386  0F67  0020               	movlb	0	; select bank0
  7387  0F68  00A0               	movwf	??_LCDSendData
  7388  0F69  3002               	movlw	2
  7389  0F6A                     u1245:	
  7390  0F6A  36A0               	lsrf	??_LCDSendData,f
  7391  0F6B  0B89               	decfsz	9,f
  7392  0F6C  2F6A               	goto	u1245
  7393  0F6D  0820               	movf	??_LCDSendData,w
  7394  0F6E  3901               	andlw	1
  7395  0F6F  00A1               	movwf	??_LCDSendData+1
  7396  0F70  0DA1               	rlf	??_LCDSendData+1,f
  7397  0F71  0DA1               	rlf	??_LCDSendData+1,f
  7398  0F72  0022               	movlb	2	; select bank2
  7399  0F73  080E               	movf	14,w	;volatile
  7400  0F74  0020               	movlb	0	; select bank0
  7401  0F75  0621               	xorwf	??_LCDSendData+1,w
  7402  0F76  39FB               	andlw	-5
  7403  0F77  0621               	xorwf	??_LCDSendData+1,w
  7404  0F78  0022               	movlb	2	; select bank2
  7405  0F79  008E               	movwf	14	;volatile
  7406                           
  7407                           ;main.c: 89: LATCbits.LATC3 = (value & 8) >> 3;
  7408  0F7A  0875               	movf	LCDSendData@value,w
  7409  0F7B  0020               	movlb	0	; select bank0
  7410  0F7C  00A0               	movwf	??_LCDSendData
  7411  0F7D  3003               	movlw	3
  7412  0F7E                     u1255:	
  7413  0F7E  36A0               	lsrf	??_LCDSendData,f
  7414  0F7F  0B89               	decfsz	9,f
  7415  0F80  2F7E               	goto	u1255
  7416  0F81  0820               	movf	??_LCDSendData,w
  7417  0F82  3901               	andlw	1
  7418  0F83  00A1               	movwf	??_LCDSendData+1
  7419  0F84  0DA1               	rlf	??_LCDSendData+1,f
  7420  0F85  0DA1               	rlf	??_LCDSendData+1,f
  7421  0F86  0DA1               	rlf	??_LCDSendData+1,f
  7422  0F87  0022               	movlb	2	; select bank2
  7423  0F88  080E               	movf	14,w	;volatile
  7424  0F89  0020               	movlb	0	; select bank0
  7425  0F8A  0621               	xorwf	??_LCDSendData+1,w
  7426  0F8B  39F7               	andlw	-9
  7427  0F8C  0621               	xorwf	??_LCDSendData+1,w
  7428  0F8D  0022               	movlb	2	; select bank2
  7429  0F8E  008E               	movwf	14	;volatile
  7430                           
  7431                           ;main.c: 90: LATCbits.LATC4 = (value & 16) >> 4;
  7432  0F8F  0875               	movf	LCDSendData@value,w
  7433  0F90  0020               	movlb	0	; select bank0
  7434  0F91  00A0               	movwf	??_LCDSendData
  7435  0F92  3004               	movlw	4
  7436  0F93                     u1265:	
  7437  0F93  36A0               	lsrf	??_LCDSendData,f
  7438  0F94  0B89               	decfsz	9,f
  7439  0F95  2F93               	goto	u1265
  7440  0F96  0820               	movf	??_LCDSendData,w
  7441  0F97  3901               	andlw	1
  7442  0F98  00A1               	movwf	??_LCDSendData+1
  7443  0F99  0EA1               	swapf	??_LCDSendData+1,f
  7444  0F9A  0022               	movlb	2	; select bank2
  7445  0F9B  080E               	movf	14,w	;volatile
  7446  0F9C  0020               	movlb	0	; select bank0
  7447  0F9D  0621               	xorwf	??_LCDSendData+1,w
  7448  0F9E  39EF               	andlw	-17
  7449  0F9F  0621               	xorwf	??_LCDSendData+1,w
  7450  0FA0  0022               	movlb	2	; select bank2
  7451  0FA1  008E               	movwf	14	;volatile
  7452                           
  7453                           ;main.c: 91: LATCbits.LATC5 = (value & 32) >> 5;
  7454  0FA2  0875               	movf	LCDSendData@value,w
  7455  0FA3  0020               	movlb	0	; select bank0
  7456  0FA4  00A0               	movwf	??_LCDSendData
  7457  0FA5  3005               	movlw	5
  7458  0FA6                     u1275:	
  7459  0FA6  36A0               	lsrf	??_LCDSendData,f
  7460  0FA7  0B89               	decfsz	9,f
  7461  0FA8  2FA6               	goto	u1275
  7462  0FA9  0820               	movf	??_LCDSendData,w
  7463  0FAA  3901               	andlw	1
  7464  0FAB  00A1               	movwf	??_LCDSendData+1
  7465  0FAC  0EA1               	swapf	??_LCDSendData+1,f
  7466  0FAD  0DA1               	rlf	??_LCDSendData+1,f
  7467  0FAE  0022               	movlb	2	; select bank2
  7468  0FAF  080E               	movf	14,w	;volatile
  7469  0FB0  0020               	movlb	0	; select bank0
  7470  0FB1  0621               	xorwf	??_LCDSendData+1,w
  7471  0FB2  39DF               	andlw	-33
  7472  0FB3  0621               	xorwf	??_LCDSendData+1,w
  7473  0FB4  0022               	movlb	2	; select bank2
  7474  0FB5  008E               	movwf	14	;volatile
  7475                           
  7476                           ;main.c: 92: LATCbits.LATC6 = (value & 64) >> 6;
  7477  0FB6  0875               	movf	LCDSendData@value,w
  7478  0FB7  0020               	movlb	0	; select bank0
  7479  0FB8  00A0               	movwf	??_LCDSendData
  7480  0FB9  3006               	movlw	6
  7481  0FBA                     u1285:	
  7482  0FBA  36A0               	lsrf	??_LCDSendData,f
  7483  0FBB  0B89               	decfsz	9,f
  7484  0FBC  2FBA               	goto	u1285
  7485  0FBD  0820               	movf	??_LCDSendData,w
  7486  0FBE  3901               	andlw	1
  7487  0FBF  00A1               	movwf	??_LCDSendData+1
  7488  0FC0  0EA1               	swapf	??_LCDSendData+1,f
  7489  0FC1  0DA1               	rlf	??_LCDSendData+1,f
  7490  0FC2  0DA1               	rlf	??_LCDSendData+1,f
  7491  0FC3  0022               	movlb	2	; select bank2
  7492  0FC4  080E               	movf	14,w	;volatile
  7493  0FC5  0020               	movlb	0	; select bank0
  7494  0FC6  0621               	xorwf	??_LCDSendData+1,w
  7495  0FC7  39BF               	andlw	-65
  7496  0FC8  0621               	xorwf	??_LCDSendData+1,w
  7497  0FC9  0022               	movlb	2	; select bank2
  7498  0FCA  008E               	movwf	14	;volatile
  7499                           
  7500                           ;main.c: 93: LATCbits.LATC7 = (value & 128) >> 7;
  7501  0FCB  0875               	movf	LCDSendData@value,w
  7502  0FCC  0020               	movlb	0	; select bank0
  7503  0FCD  00A0               	movwf	??_LCDSendData
  7504  0FCE  3007               	movlw	7
  7505  0FCF                     u1295:	
  7506  0FCF  36A0               	lsrf	??_LCDSendData,f
  7507  0FD0  0B89               	decfsz	9,f
  7508  0FD1  2FCF               	goto	u1295
  7509  0FD2  0820               	movf	??_LCDSendData,w
  7510  0FD3  3901               	andlw	1
  7511  0FD4  00A1               	movwf	??_LCDSendData+1
  7512  0FD5  0CA1               	rrf	??_LCDSendData+1,f
  7513  0FD6  0CA1               	rrf	??_LCDSendData+1,f
  7514  0FD7  0022               	movlb	2	; select bank2
  7515  0FD8  080E               	movf	14,w	;volatile
  7516  0FD9  0020               	movlb	0	; select bank0
  7517  0FDA  0621               	xorwf	??_LCDSendData+1,w
  7518  0FDB  397F               	andlw	-129
  7519  0FDC  0621               	xorwf	??_LCDSendData+1,w
  7520  0FDD  0022               	movlb	2	; select bank2
  7521  0FDE  008E               	movwf	14	;volatile
  7522                           
  7523                           ;main.c: 94: if(RS > 0)
  7524  0FDF  0874               	movf	LCDSendData@RS+1,w
  7525  0FE0  3A80               	xorlw	128
  7526  0FE1  0020               	movlb	0	; select bank0
  7527  0FE2  00A0               	movwf	??_LCDSendData
  7528  0FE3  3080               	movlw	128
  7529  0FE4  0220               	subwf	??_LCDSendData,w
  7530  0FE5  1D03               	skipz
  7531  0FE6  2FE9               	goto	u1305
  7532  0FE7  3001               	movlw	1
  7533  0FE8  0273               	subwf	LCDSendData@RS,w
  7534  0FE9                     u1305:	
  7535  0FE9  1C03               	skipc
  7536  0FEA  2FEE               	goto	l370
  7537                           
  7538                           ;main.c: 95: {
  7539                           ;main.c: 96: LATBbits.LATB7 = 1;
  7540  0FEB  0022               	movlb	2	; select bank2
  7541  0FEC  178D               	bsf	13,7	;volatile
  7542                           
  7543                           ;main.c: 97: }
  7544  0FED  2FF0               	goto	l372
  7545  0FEE                     l370:	
  7546                           
  7547                           ;main.c: 98: else
  7548                           ;main.c: 99: {
  7549                           ;main.c: 100: LATBbits.LATB7 = 0;
  7550  0FEE  0022               	movlb	2	; select bank2
  7551  0FEF  138D               	bcf	13,7	;volatile
  7552  0FF0                     l372:	
  7553                           ;main.c: 101: }
  7554                           ;main.c: 102: do { LATBbits.LATB6 = 1; } while(0);
  7555                           
  7556  0FF0  170D               	bsf	13,6	;volatile
  7557                           
  7558                           ;main.c: 103: _delay((unsigned long)((1)*(2000000/4000.0)));
  7559  0FF1  30A6               	movlw	166
  7560  0FF2                     u2547:	
  7561  0FF2  0B89               	decfsz	9,f
  7562  0FF3  2FF2               	goto	u2547
  7563  0FF4  3200               	nop2
  7564                           
  7565                           ;main.c: 104: do { LATBbits.LATB6 = 0; } while(0);
  7566  0FF5  0022               	movlb	2	; select bank2
  7567  0FF6  130D               	bcf	13,6	;volatile
  7568                           
  7569                           ;main.c: 105: _delay((unsigned long)((10)*(2000000/4000.0)));
  7570  0FF7  3007               	movlw	7
  7571  0FF8  0020               	movlb	0	; select bank0
  7572  0FF9  00A0               	movwf	??_LCDSendData
  7573  0FFA  307D               	movlw	125
  7574  0FFB                     u2557:	
  7575  0FFB  0B89               	decfsz	9,f
  7576  0FFC  2FFB               	goto	u2557
  7577  0FFD  0BA0               	decfsz	??_LCDSendData,f
  7578  0FFE  2FFB               	goto	u2557
  7579  0FFF  0008               	return
  7580  1000                     __end_of_LCDSendData:	
  7581                           
  7582                           	psect	text16
  7583  0069                     __ptext16:	
  7584 ;; *************** function _HEFLASH_checkData *****************
  7585 ;; Defined at:
  7586 ;;		line 205 in file "main.c"
  7587 ;; Parameters:    Size  Location     Type
  7588 ;;		None
  7589 ;; Auto vars:     Size  Location     Type
  7590 ;;  r               2   30[BANK0 ] unsigned int 
  7591 ;; Return value:  Size  Location     Type
  7592 ;;                  1    wreg      void 
  7593 ;; Registers used:
  7594 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  7595 ;; Tracked objects:
  7596 ;;		On entry : 0/0
  7597 ;;		On exit  : 0/0
  7598 ;;		Unchanged: 0/0
  7599 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  7600 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7601 ;;      Locals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7602 ;;      Temps:          0       9       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7603 ;;      Totals:         0      11       0       0       0       0       0       0       0       0       0       0       
      +0       0
  7604 ;;Total ram usage:       11 bytes
  7605 ;; Hardware stack levels used:    1
  7606 ;; Hardware stack levels required when called:    7
  7607 ;; This function calls:
  7608 ;;		_HEFLASH_readBlock
  7609 ;;		_HEFLASH_writeBlock
  7610 ;;		___lldiv
  7611 ;;		___llmod
  7612 ;;		___lwdiv
  7613 ;;		___lwmod
  7614 ;;		__fassert
  7615 ;;		_memset
  7616 ;; This function is called by:
  7617 ;;		_main
  7618 ;; This function uses a non-reentrant model
  7619 ;;
  7620                           
  7621                           
  7622                           ;psect for function _HEFLASH_checkData
  7623  0069                     _HEFLASH_checkData:	
  7624                           
  7625                           ;main.c: 207: unsigned r;
  7626                           ;main.c: 208: _delay((unsigned long)((200)*(2000000/4000.0)));
  7627                           
  7628                           ;incstack = 0
  7629                           ; Regs used in _HEFLASH_checkData: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  7630  0069  3082               	movlw	130
  7631  006A  0020               	movlb	0	; select bank0
  7632  006B  00B5               	movwf	??_HEFLASH_checkData
  7633  006C  30DD               	movlw	221
  7634  006D                     u2567:	
  7635  006D  0B89               	decfsz	9,f
  7636  006E  286D               	goto	u2567
  7637  006F  0BB5               	decfsz	??_HEFLASH_checkData,f
  7638  0070  286D               	goto	u2567
  7639  0071  3200               	nop2
  7640                           
  7641                           ;main.c: 209: r = HEFLASH_readBlock(HEFBufferData, 0, 32);
  7642  0072  0020               	movlb	0	; select bank0
  7643  0073  01A0               	clrf	HEFLASH_readBlock@radd
  7644  0074  3020               	movlw	32
  7645  0075  00B5               	movwf	??_HEFLASH_checkData
  7646  0076  0835               	movf	??_HEFLASH_checkData,w
  7647  0077  00A1               	movwf	HEFLASH_readBlock@count
  7648  0078  30C6               	movlw	(low (_HEFBufferData| 0))& (0+255)
  7649  0079  318E  2625  3180   	fcall	_HEFLASH_readBlock
  7650  007C  0020               	movlb	0	; select bank0
  7651  007D  00B6               	movwf	??_HEFLASH_checkData+1
  7652  007E  01B7               	clrf	??_HEFLASH_checkData+2
  7653  007F  0836               	movf	??_HEFLASH_checkData+1,w
  7654  0080  00BE               	movwf	HEFLASH_checkData@r
  7655  0081  0837               	movf	??_HEFLASH_checkData+2,w
  7656  0082  00BF               	movwf	HEFLASH_checkData@r+1
  7657                           
  7658                           ;main.c: 210: if(!(0 == r)) {_fassert(210, "main.c", "0 == r");};
  7659  0083  083E               	movf	HEFLASH_checkData@r,w
  7660  0084  043F               	iorwf	HEFLASH_checkData@r+1,w
  7661  0085  1903               	btfsc	3,2
  7662  0086  2896               	goto	l2643
  7663  0087  30D2               	movlw	210
  7664  0088  00A0               	movwf	__fassert@line
  7665  0089  3000               	movlw	0
  7666  008A  00A1               	movwf	__fassert@line+1
  7667  008B  3000               	movlw	low (STR_1| (0+32768))
  7668  008C  00A2               	movwf	__fassert@file
  7669  008D  3090               	movlw	high (STR_1| (0+32768))
  7670  008E  00A3               	movwf	__fassert@file+1
  7671  008F  3007               	movlw	low (STR_2| (0+32768))
  7672  0090  00A4               	movwf	__fassert@expr
  7673  0091  3090               	movlw	high (STR_2| (0+32768))
  7674  0092  00A5               	movwf	__fassert@expr+1
  7675  0093  318B  23D1  3180   	fcall	__fassert
  7676  0096                     l2643:	
  7677                           
  7678                           ;main.c: 211: if(0xAA == HEFBufferData[0])
  7679  0096  30AA               	movlw	170
  7680  0097  0021               	movlb	1	; select bank1
  7681  0098  0646               	xorwf	_HEFBufferData^(0+128),w
  7682  0099  1D03               	btfss	3,2
  7683  009A  2AD3               	goto	l2677
  7684                           
  7685                           ;main.c: 212: {
  7686                           ;main.c: 213: gBoxCntStruct.SmallBoxCnt = (unsigned int)((HEFBufferData[3] << 8) + (HEFB
      +                          ufferData[4]));
  7687  009B  084A               	movf	(_HEFBufferData^(0+128)+4),w
  7688  009C  0020               	movlb	0	; select bank0
  7689  009D  00B5               	movwf	??_HEFLASH_checkData
  7690  009E  01B6               	clrf	??_HEFLASH_checkData+1
  7691  009F  0021               	movlb	1	; select bank1
  7692  00A0  0849               	movf	(_HEFBufferData^(0+128)+3),w
  7693  00A1  0020               	movlb	0	; select bank0
  7694  00A2  00B7               	movwf	??_HEFLASH_checkData+2
  7695  00A3  01B8               	clrf	??_HEFLASH_checkData+3
  7696  00A4  0837               	movf	??_HEFLASH_checkData+2,w
  7697  00A5  00B8               	movwf	??_HEFLASH_checkData+3
  7698  00A6  01B7               	clrf	??_HEFLASH_checkData+2
  7699  00A7  0835               	movf	??_HEFLASH_checkData,w
  7700  00A8  0737               	addwf	??_HEFLASH_checkData+2,w
  7701  00A9  00CB               	movwf	_gBoxCntStruct+9
  7702  00AA  0836               	movf	??_HEFLASH_checkData+1,w
  7703  00AB  3D38               	addwfc	??_HEFLASH_checkData+3,w
  7704  00AC  00CC               	movwf	_gBoxCntStruct+10
  7705                           
  7706                           ;main.c: 215: gBoxCntStruct.MiddleBoxCnt = (unsigned int)((HEFBufferData[7] << 8) + (HEF
      +                          BufferData[8]));
  7707  00AD  0021               	movlb	1	; select bank1
  7708  00AE  084E               	movf	(_HEFBufferData^(0+128)+8),w
  7709  00AF  0020               	movlb	0	; select bank0
  7710  00B0  00B5               	movwf	??_HEFLASH_checkData
  7711  00B1  01B6               	clrf	??_HEFLASH_checkData+1
  7712  00B2  0021               	movlb	1	; select bank1
  7713  00B3  084D               	movf	(_HEFBufferData^(0+128)+7),w
  7714  00B4  0020               	movlb	0	; select bank0
  7715  00B5  00B7               	movwf	??_HEFLASH_checkData+2
  7716  00B6  01B8               	clrf	??_HEFLASH_checkData+3
  7717  00B7  0837               	movf	??_HEFLASH_checkData+2,w
  7718  00B8  00B8               	movwf	??_HEFLASH_checkData+3
  7719  00B9  01B7               	clrf	??_HEFLASH_checkData+2
  7720  00BA  0835               	movf	??_HEFLASH_checkData,w
  7721  00BB  0737               	addwf	??_HEFLASH_checkData+2,w
  7722  00BC  00CD               	movwf	_gBoxCntStruct+11
  7723  00BD  0836               	movf	??_HEFLASH_checkData+1,w
  7724  00BE  3D38               	addwfc	??_HEFLASH_checkData+3,w
  7725  00BF  00CE               	movwf	_gBoxCntStruct+12
  7726                           
  7727                           ;main.c: 217: gBoxCntStruct.LargeBoxCnt = (unsigned int)((HEFBufferData[11] << 8) + (HEF
      +                          BufferData[12]));
  7728  00C0  0021               	movlb	1	; select bank1
  7729  00C1  0852               	movf	(_HEFBufferData^(0+128)+12),w
  7730  00C2  0020               	movlb	0	; select bank0
  7731  00C3  00B5               	movwf	??_HEFLASH_checkData
  7732  00C4  01B6               	clrf	??_HEFLASH_checkData+1
  7733  00C5  0021               	movlb	1	; select bank1
  7734  00C6  0851               	movf	(_HEFBufferData^(0+128)+11),w
  7735  00C7  0020               	movlb	0	; select bank0
  7736  00C8  00B7               	movwf	??_HEFLASH_checkData+2
  7737  00C9  01B8               	clrf	??_HEFLASH_checkData+3
  7738  00CA  0837               	movf	??_HEFLASH_checkData+2,w
  7739  00CB  00B8               	movwf	??_HEFLASH_checkData+3
  7740  00CC  01B7               	clrf	??_HEFLASH_checkData+2
  7741  00CD  0835               	movf	??_HEFLASH_checkData,w
  7742  00CE  0737               	addwf	??_HEFLASH_checkData+2,w
  7743  00CF  00CF               	movwf	_gBoxCntStruct+13
  7744  00D0  0836               	movf	??_HEFLASH_checkData+1,w
  7745  00D1  3D38               	addwfc	??_HEFLASH_checkData+3,w
  7746  00D2  00D0               	movwf	_gBoxCntStruct+14
  7747                           
  7748                           ;main.c: 219: gBoxCntStruct.BoxSum = (HEFBufferData[13] << 24) + (HEFBufferData[14] << 1
      +                          6) + (HEFBufferData[15] << 8) + (HEFBufferData[16]);
  7749  00D3  0021               	movlb	1	; select bank1
  7750  00D4  0856               	movf	(_HEFBufferData^(0+128)+16),w
  7751  00D5  0020               	movlb	0	; select bank0
  7752  00D6  00B5               	movwf	??_HEFLASH_checkData
  7753  00D7  01B6               	clrf	??_HEFLASH_checkData+1
  7754  00D8  0021               	movlb	1	; select bank1
  7755  00D9  0855               	movf	(_HEFBufferData^(0+128)+15),w
  7756  00DA  0020               	movlb	0	; select bank0
  7757  00DB  00B7               	movwf	??_HEFLASH_checkData+2
  7758  00DC  01B8               	clrf	??_HEFLASH_checkData+3
  7759  00DD  0837               	movf	??_HEFLASH_checkData+2,w
  7760  00DE  00B8               	movwf	??_HEFLASH_checkData+3
  7761  00DF  01B7               	clrf	??_HEFLASH_checkData+2
  7762  00E0  0021               	movlb	1	; select bank1
  7763  00E1  0853               	movf	(_HEFBufferData^(0+128)+13),w
  7764  00E2  0754               	addwf	(_HEFBufferData^(0+128)+14),w
  7765  00E3  0020               	movlb	0	; select bank0
  7766  00E4  00BA               	movwf	??_HEFLASH_checkData+5
  7767  00E5  01BB               	clrf	??_HEFLASH_checkData+6
  7768  00E6  0DBB               	rlf	??_HEFLASH_checkData+6,f
  7769  00E7  0837               	movf	??_HEFLASH_checkData+2,w
  7770  00E8  073A               	addwf	??_HEFLASH_checkData+5,w
  7771  00E9  00BC               	movwf	??_HEFLASH_checkData+7
  7772  00EA  0838               	movf	??_HEFLASH_checkData+3,w
  7773  00EB  3D3B               	addwfc	??_HEFLASH_checkData+6,w
  7774  00EC  00BD               	movwf	??_HEFLASH_checkData+8
  7775  00ED  0835               	movf	??_HEFLASH_checkData,w
  7776  00EE  073C               	addwf	??_HEFLASH_checkData+7,w
  7777  00EF  00D3               	movwf	_gBoxCntStruct+17
  7778  00F0  0836               	movf	??_HEFLASH_checkData+1,w
  7779  00F1  3D3D               	addwfc	??_HEFLASH_checkData+8,w
  7780  00F2  00D4               	movwf	_gBoxCntStruct+18
  7781  00F3  01D5               	clrf	_gBoxCntStruct+19
  7782  00F4  1BD4               	btfsc	_gBoxCntStruct+18,7
  7783  00F5  03D5               	decf	_gBoxCntStruct+19,f
  7784  00F6  0855               	movf	_gBoxCntStruct+19,w
  7785  00F7  00D6               	movwf	_gBoxCntStruct+20
  7786                           
  7787                           ;main.c: 222: gBoxCntStruct.JamCnt = (unsigned int)((HEFBufferData[19] << 8) + (HEFBuffe
      +                          rData[20]));
  7788  00F8  0021               	movlb	1	; select bank1
  7789  00F9  085A               	movf	(_HEFBufferData^(0+128)+20),w
  7790  00FA  0020               	movlb	0	; select bank0
  7791  00FB  00B5               	movwf	??_HEFLASH_checkData
  7792  00FC  01B6               	clrf	??_HEFLASH_checkData+1
  7793  00FD  0021               	movlb	1	; select bank1
  7794  00FE  0859               	movf	(_HEFBufferData^(0+128)+19),w
  7795  00FF  0020               	movlb	0	; select bank0
  7796  0100  00B7               	movwf	??_HEFLASH_checkData+2
  7797  0101  01B8               	clrf	??_HEFLASH_checkData+3
  7798  0102  0837               	movf	??_HEFLASH_checkData+2,w
  7799  0103  00B8               	movwf	??_HEFLASH_checkData+3
  7800  0104  01B7               	clrf	??_HEFLASH_checkData+2
  7801  0105  0835               	movf	??_HEFLASH_checkData,w
  7802  0106  0737               	addwf	??_HEFLASH_checkData+2,w
  7803  0107  00D1               	movwf	_gBoxCntStruct+15
  7804  0108  0836               	movf	??_HEFLASH_checkData+1,w
  7805  0109  3D38               	addwfc	??_HEFLASH_checkData+3,w
  7806  010A  00D2               	movwf	_gBoxCntStruct+16
  7807                           
  7808                           ;main.c: 224: display_data_1[2] = (gBoxCntStruct.SmallBoxCnt%1000/100)+0x30;
  7809  010B  3064               	movlw	100
  7810  010C  00A4               	movwf	___lwdiv@divisor
  7811  010D  3000               	movlw	0
  7812  010E  00A5               	movwf	___lwdiv@divisor+1
  7813  010F  084C               	movf	_gBoxCntStruct+10,w
  7814  0110  00A3               	movwf	___lwmod@dividend+1
  7815  0111  084B               	movf	_gBoxCntStruct+9,w
  7816  0112  00A2               	movwf	___lwmod@dividend
  7817  0113  30E8               	movlw	232
  7818  0114  00A0               	movwf	___lwmod@divisor
  7819  0115  3003               	movlw	3
  7820  0116  00A1               	movwf	___lwmod@divisor+1
  7821  0117  3187  27D3  3180   	fcall	___lwmod
  7822  011A  0020               	movlb	0	; select bank0
  7823  011B  0821               	movf	?___lwmod+1,w
  7824  011C  00A7               	movwf	___lwdiv@dividend+1
  7825  011D  0820               	movf	?___lwmod,w
  7826  011E  00A6               	movwf	___lwdiv@dividend
  7827  011F  318D  25F0  3180   	fcall	___lwdiv
  7828  0122  0020               	movlb	0	; select bank0
  7829  0123  0824               	movf	?___lwdiv,w
  7830  0124  3E30               	addlw	48
  7831  0125  00B5               	movwf	??_HEFLASH_checkData
  7832  0126  0835               	movf	??_HEFLASH_checkData,w
  7833  0127  0021               	movlb	1	; select bank1
  7834  0128  00A2               	movwf	(_display_data_1^(0+128)+2)
  7835                           
  7836                           ;main.c: 225: display_data_1[3] = (gBoxCntStruct.SmallBoxCnt%100/10)+0x30;
  7837  0129  300A               	movlw	10
  7838  012A  0020               	movlb	0	; select bank0
  7839  012B  00A4               	movwf	___lwdiv@divisor
  7840  012C  3000               	movlw	0
  7841  012D  00A5               	movwf	___lwdiv@divisor+1
  7842  012E  084C               	movf	_gBoxCntStruct+10,w
  7843  012F  00A3               	movwf	___lwmod@dividend+1
  7844  0130  084B               	movf	_gBoxCntStruct+9,w
  7845  0131  00A2               	movwf	___lwmod@dividend
  7846  0132  3064               	movlw	100
  7847  0133  00A0               	movwf	___lwmod@divisor
  7848  0134  3000               	movlw	0
  7849  0135  00A1               	movwf	___lwmod@divisor+1
  7850  0136  3187  27D3  3180   	fcall	___lwmod
  7851  0139  0020               	movlb	0	; select bank0
  7852  013A  0821               	movf	?___lwmod+1,w
  7853  013B  00A7               	movwf	___lwdiv@dividend+1
  7854  013C  0820               	movf	?___lwmod,w
  7855  013D  00A6               	movwf	___lwdiv@dividend
  7856  013E  318D  25F0  3180   	fcall	___lwdiv
  7857  0141  0020               	movlb	0	; select bank0
  7858  0142  0824               	movf	?___lwdiv,w
  7859  0143  3E30               	addlw	48
  7860  0144  00B5               	movwf	??_HEFLASH_checkData
  7861  0145  0835               	movf	??_HEFLASH_checkData,w
  7862  0146  0021               	movlb	1	; select bank1
  7863  0147  00A3               	movwf	(_display_data_1^(0+128)+3)
  7864                           
  7865                           ;main.c: 226: display_data_1[4] = (gBoxCntStruct.SmallBoxCnt%10)+0x30;
  7866  0148  300A               	movlw	10
  7867  0149  0020               	movlb	0	; select bank0
  7868  014A  00A0               	movwf	___lwmod@divisor
  7869  014B  3000               	movlw	0
  7870  014C  00A1               	movwf	___lwmod@divisor+1
  7871  014D  084C               	movf	_gBoxCntStruct+10,w
  7872  014E  00A3               	movwf	___lwmod@dividend+1
  7873  014F  084B               	movf	_gBoxCntStruct+9,w
  7874  0150  00A2               	movwf	___lwmod@dividend
  7875  0151  3187  27D3  3180   	fcall	___lwmod
  7876  0154  0020               	movlb	0	; select bank0
  7877  0155  0820               	movf	?___lwmod,w
  7878  0156  3E30               	addlw	48
  7879  0157  00B5               	movwf	??_HEFLASH_checkData
  7880  0158  0835               	movf	??_HEFLASH_checkData,w
  7881  0159  0021               	movlb	1	; select bank1
  7882  015A  00A4               	movwf	(_display_data_1^(0+128)+4)
  7883                           
  7884                           ;main.c: 229: display_data_1[7] = (gBoxCntStruct.MiddleBoxCnt%1000/100)+0x30;
  7885  015B  3064               	movlw	100
  7886  015C  0020               	movlb	0	; select bank0
  7887  015D  00A4               	movwf	___lwdiv@divisor
  7888  015E  3000               	movlw	0
  7889  015F  00A5               	movwf	___lwdiv@divisor+1
  7890  0160  084E               	movf	_gBoxCntStruct+12,w
  7891  0161  00A3               	movwf	___lwmod@dividend+1
  7892  0162  084D               	movf	_gBoxCntStruct+11,w
  7893  0163  00A2               	movwf	___lwmod@dividend
  7894  0164  30E8               	movlw	232
  7895  0165  00A0               	movwf	___lwmod@divisor
  7896  0166  3003               	movlw	3
  7897  0167  00A1               	movwf	___lwmod@divisor+1
  7898  0168  3187  27D3  3180   	fcall	___lwmod
  7899  016B  0020               	movlb	0	; select bank0
  7900  016C  0821               	movf	?___lwmod+1,w
  7901  016D  00A7               	movwf	___lwdiv@dividend+1
  7902  016E  0820               	movf	?___lwmod,w
  7903  016F  00A6               	movwf	___lwdiv@dividend
  7904  0170  318D  25F0  3180   	fcall	___lwdiv
  7905  0173  0020               	movlb	0	; select bank0
  7906  0174  0824               	movf	?___lwdiv,w
  7907  0175  3E30               	addlw	48
  7908  0176  00B5               	movwf	??_HEFLASH_checkData
  7909  0177  0835               	movf	??_HEFLASH_checkData,w
  7910  0178  0021               	movlb	1	; select bank1
  7911  0179  00A7               	movwf	(_display_data_1^(0+128)+7)
  7912                           
  7913                           ;main.c: 230: display_data_1[8] = (gBoxCntStruct.MiddleBoxCnt%100/10)+0x30;
  7914  017A  300A               	movlw	10
  7915  017B  0020               	movlb	0	; select bank0
  7916  017C  00A4               	movwf	___lwdiv@divisor
  7917  017D  3000               	movlw	0
  7918  017E  00A5               	movwf	___lwdiv@divisor+1
  7919  017F  084E               	movf	_gBoxCntStruct+12,w
  7920  0180  00A3               	movwf	___lwmod@dividend+1
  7921  0181  084D               	movf	_gBoxCntStruct+11,w
  7922  0182  00A2               	movwf	___lwmod@dividend
  7923  0183  3064               	movlw	100
  7924  0184  00A0               	movwf	___lwmod@divisor
  7925  0185  3000               	movlw	0
  7926  0186  00A1               	movwf	___lwmod@divisor+1
  7927  0187  3187  27D3  3180   	fcall	___lwmod
  7928  018A  0020               	movlb	0	; select bank0
  7929  018B  0821               	movf	?___lwmod+1,w
  7930  018C  00A7               	movwf	___lwdiv@dividend+1
  7931  018D  0820               	movf	?___lwmod,w
  7932  018E  00A6               	movwf	___lwdiv@dividend
  7933  018F  318D  25F0  3180   	fcall	___lwdiv
  7934  0192  0020               	movlb	0	; select bank0
  7935  0193  0824               	movf	?___lwdiv,w
  7936  0194  3E30               	addlw	48
  7937  0195  00B5               	movwf	??_HEFLASH_checkData
  7938  0196  0835               	movf	??_HEFLASH_checkData,w
  7939  0197  0021               	movlb	1	; select bank1
  7940  0198  00A8               	movwf	(_display_data_1^(0+128)+8)
  7941                           
  7942                           ;main.c: 231: display_data_1[9] = (gBoxCntStruct.MiddleBoxCnt%10)+0x30;
  7943  0199  300A               	movlw	10
  7944  019A  0020               	movlb	0	; select bank0
  7945  019B  00A0               	movwf	___lwmod@divisor
  7946  019C  3000               	movlw	0
  7947  019D  00A1               	movwf	___lwmod@divisor+1
  7948  019E  084E               	movf	_gBoxCntStruct+12,w
  7949  019F  00A3               	movwf	___lwmod@dividend+1
  7950  01A0  084D               	movf	_gBoxCntStruct+11,w
  7951  01A1  00A2               	movwf	___lwmod@dividend
  7952  01A2  3187  27D3  3180   	fcall	___lwmod
  7953  01A5  0020               	movlb	0	; select bank0
  7954  01A6  0820               	movf	?___lwmod,w
  7955  01A7  3E30               	addlw	48
  7956  01A8  00B5               	movwf	??_HEFLASH_checkData
  7957  01A9  0835               	movf	??_HEFLASH_checkData,w
  7958  01AA  0021               	movlb	1	; select bank1
  7959  01AB  00A9               	movwf	(_display_data_1^(0+128)+9)
  7960                           
  7961                           ;main.c: 233: display_data_1[12] = (gBoxCntStruct.LargeBoxCnt%1000/100)+0x30;
  7962  01AC  3064               	movlw	100
  7963  01AD  0020               	movlb	0	; select bank0
  7964  01AE  00A4               	movwf	___lwdiv@divisor
  7965  01AF  3000               	movlw	0
  7966  01B0  00A5               	movwf	___lwdiv@divisor+1
  7967  01B1  0850               	movf	_gBoxCntStruct+14,w
  7968  01B2  00A3               	movwf	___lwmod@dividend+1
  7969  01B3  084F               	movf	_gBoxCntStruct+13,w
  7970  01B4  00A2               	movwf	___lwmod@dividend
  7971  01B5  30E8               	movlw	232
  7972  01B6  00A0               	movwf	___lwmod@divisor
  7973  01B7  3003               	movlw	3
  7974  01B8  00A1               	movwf	___lwmod@divisor+1
  7975  01B9  3187  27D3  3180   	fcall	___lwmod
  7976  01BC  0020               	movlb	0	; select bank0
  7977  01BD  0821               	movf	?___lwmod+1,w
  7978  01BE  00A7               	movwf	___lwdiv@dividend+1
  7979  01BF  0820               	movf	?___lwmod,w
  7980  01C0  00A6               	movwf	___lwdiv@dividend
  7981  01C1  318D  25F0  3180   	fcall	___lwdiv
  7982  01C4  0020               	movlb	0	; select bank0
  7983  01C5  0824               	movf	?___lwdiv,w
  7984  01C6  3E30               	addlw	48
  7985  01C7  00B5               	movwf	??_HEFLASH_checkData
  7986  01C8  0835               	movf	??_HEFLASH_checkData,w
  7987  01C9  0021               	movlb	1	; select bank1
  7988  01CA  00AC               	movwf	(_display_data_1^(0+128)+12)
  7989                           
  7990                           ;main.c: 234: display_data_1[13] = (gBoxCntStruct.LargeBoxCnt%100/10)+0x30;
  7991  01CB  300A               	movlw	10
  7992  01CC  0020               	movlb	0	; select bank0
  7993  01CD  00A4               	movwf	___lwdiv@divisor
  7994  01CE  3000               	movlw	0
  7995  01CF  00A5               	movwf	___lwdiv@divisor+1
  7996  01D0  0850               	movf	_gBoxCntStruct+14,w
  7997  01D1  00A3               	movwf	___lwmod@dividend+1
  7998  01D2  084F               	movf	_gBoxCntStruct+13,w
  7999  01D3  00A2               	movwf	___lwmod@dividend
  8000  01D4  3064               	movlw	100
  8001  01D5  00A0               	movwf	___lwmod@divisor
  8002  01D6  3000               	movlw	0
  8003  01D7  00A1               	movwf	___lwmod@divisor+1
  8004  01D8  3187  27D3  3180   	fcall	___lwmod
  8005  01DB  0020               	movlb	0	; select bank0
  8006  01DC  0821               	movf	?___lwmod+1,w
  8007  01DD  00A7               	movwf	___lwdiv@dividend+1
  8008  01DE  0820               	movf	?___lwmod,w
  8009  01DF  00A6               	movwf	___lwdiv@dividend
  8010  01E0  318D  25F0  3180   	fcall	___lwdiv
  8011  01E3  0020               	movlb	0	; select bank0
  8012  01E4  0824               	movf	?___lwdiv,w
  8013  01E5  3E30               	addlw	48
  8014  01E6  00B5               	movwf	??_HEFLASH_checkData
  8015  01E7  0835               	movf	??_HEFLASH_checkData,w
  8016  01E8  0021               	movlb	1	; select bank1
  8017  01E9  00AD               	movwf	(_display_data_1^(0+128)+13)
  8018                           
  8019                           ;main.c: 235: display_data_1[14] = (gBoxCntStruct.LargeBoxCnt%10)+0x30;
  8020  01EA  300A               	movlw	10
  8021  01EB  0020               	movlb	0	; select bank0
  8022  01EC  00A0               	movwf	___lwmod@divisor
  8023  01ED  3000               	movlw	0
  8024  01EE  00A1               	movwf	___lwmod@divisor+1
  8025  01EF  0850               	movf	_gBoxCntStruct+14,w
  8026  01F0  00A3               	movwf	___lwmod@dividend+1
  8027  01F1  084F               	movf	_gBoxCntStruct+13,w
  8028  01F2  00A2               	movwf	___lwmod@dividend
  8029  01F3  3187  27D3  3180   	fcall	___lwmod
  8030  01F6  0020               	movlb	0	; select bank0
  8031  01F7  0820               	movf	?___lwmod,w
  8032  01F8  3E30               	addlw	48
  8033  01F9  00B5               	movwf	??_HEFLASH_checkData
  8034  01FA  0835               	movf	??_HEFLASH_checkData,w
  8035  01FB  0021               	movlb	1	; select bank1
  8036  01FC  00AE               	movwf	(_display_data_1^(0+128)+14)
  8037                           
  8038                           ;main.c: 237: display_data_2[2] = (gBoxCntStruct.BoxSum%1000/100)+0x30;
  8039  01FD  3000               	movlw	0
  8040  01FE  0020               	movlb	0	; select bank0
  8041  01FF  00AB               	movwf	___lldiv@divisor+3
  8042  0200  3000               	movlw	0
  8043  0201  00AA               	movwf	___lldiv@divisor+2
  8044  0202  3000               	movlw	0
  8045  0203  00A9               	movwf	___lldiv@divisor+1
  8046  0204  3064               	movlw	100
  8047  0205  00A8               	movwf	___lldiv@divisor
  8048  0206  3011               	movlw	17
  8049  0207  3E42               	addlw	(low (_gBoxCntStruct| 0))& (0+255)
  8050  0208  0086               	movwf	6
  8051  0209  0187               	clrf	7
  8052  020A  3F40               	moviw [0]fsr1
  8053  020B  00A4               	movwf	___llmod@dividend
  8054  020C  3F41               	moviw [1]fsr1
  8055  020D  00A5               	movwf	___llmod@dividend+1
  8056  020E  3F42               	moviw [2]fsr1
  8057  020F  00A6               	movwf	___llmod@dividend+2
  8058  0210  3F43               	moviw [3]fsr1
  8059  0211  00A7               	movwf	___llmod@dividend+3
  8060  0212  3000               	movlw	0
  8061  0213  00A3               	movwf	___llmod@divisor+3
  8062  0214  3000               	movlw	0
  8063  0215  00A2               	movwf	___llmod@divisor+2
  8064  0216  3003               	movlw	3
  8065  0217  00A1               	movwf	___llmod@divisor+1
  8066  0218  30E8               	movlw	232
  8067  0219  00A0               	movwf	___llmod@divisor
  8068  021A  318E  265D  3180   	fcall	___llmod
  8069  021D  0020               	movlb	0	; select bank0
  8070  021E  0823               	movf	?___llmod+3,w
  8071  021F  00AF               	movwf	___lldiv@dividend+3
  8072  0220  0822               	movf	?___llmod+2,w
  8073  0221  00AE               	movwf	___lldiv@dividend+2
  8074  0222  0821               	movf	?___llmod+1,w
  8075  0223  00AD               	movwf	___lldiv@dividend+1
  8076  0224  0820               	movf	?___llmod,w
  8077  0225  00AC               	movwf	___lldiv@dividend
  8078  0226  318E  26A0  3180   	fcall	___lldiv
  8079  0229  0020               	movlb	0	; select bank0
  8080  022A  0828               	movf	?___lldiv,w
  8081  022B  3E30               	addlw	48
  8082  022C  00B5               	movwf	??_HEFLASH_checkData
  8083  022D  0835               	movf	??_HEFLASH_checkData,w
  8084  022E  0021               	movlb	1	; select bank1
  8085  022F  00BD               	movwf	(_display_data_2^(0+128)+2)
  8086                           
  8087                           ;main.c: 238: display_data_2[3] = (gBoxCntStruct.BoxSum%100/10)+0x30;
  8088  0230  3000               	movlw	0
  8089  0231  0020               	movlb	0	; select bank0
  8090  0232  00AB               	movwf	___lldiv@divisor+3
  8091  0233  3000               	movlw	0
  8092  0234  00AA               	movwf	___lldiv@divisor+2
  8093  0235  3000               	movlw	0
  8094  0236  00A9               	movwf	___lldiv@divisor+1
  8095  0237  300A               	movlw	10
  8096  0238  00A8               	movwf	___lldiv@divisor
  8097  0239  3011               	movlw	17
  8098  023A  3E42               	addlw	(low (_gBoxCntStruct| 0))& (0+255)
  8099  023B  0086               	movwf	6
  8100  023C  0187               	clrf	7
  8101  023D  3F40               	moviw [0]fsr1
  8102  023E  00A4               	movwf	___llmod@dividend
  8103  023F  3F41               	moviw [1]fsr1
  8104  0240  00A5               	movwf	___llmod@dividend+1
  8105  0241  3F42               	moviw [2]fsr1
  8106  0242  00A6               	movwf	___llmod@dividend+2
  8107  0243  3F43               	moviw [3]fsr1
  8108  0244  00A7               	movwf	___llmod@dividend+3
  8109  0245  3000               	movlw	0
  8110  0246  00A3               	movwf	___llmod@divisor+3
  8111  0247  3000               	movlw	0
  8112  0248  00A2               	movwf	___llmod@divisor+2
  8113  0249  3000               	movlw	0
  8114  024A  00A1               	movwf	___llmod@divisor+1
  8115  024B  3064               	movlw	100
  8116  024C  00A0               	movwf	___llmod@divisor
  8117  024D  318E  265D  3180   	fcall	___llmod
  8118  0250  0020               	movlb	0	; select bank0
  8119  0251  0823               	movf	?___llmod+3,w
  8120  0252  00AF               	movwf	___lldiv@dividend+3
  8121  0253  0822               	movf	?___llmod+2,w
  8122  0254  00AE               	movwf	___lldiv@dividend+2
  8123  0255  0821               	movf	?___llmod+1,w
  8124  0256  00AD               	movwf	___lldiv@dividend+1
  8125  0257  0820               	movf	?___llmod,w
  8126  0258  00AC               	movwf	___lldiv@dividend
  8127  0259  318E  26A0  3180   	fcall	___lldiv
  8128  025C  0020               	movlb	0	; select bank0
  8129  025D  0828               	movf	?___lldiv,w
  8130  025E  3E30               	addlw	48
  8131  025F  00B5               	movwf	??_HEFLASH_checkData
  8132  0260  0835               	movf	??_HEFLASH_checkData,w
  8133  0261  0021               	movlb	1	; select bank1
  8134  0262  00BE               	movwf	(_display_data_2^(0+128)+3)
  8135                           
  8136                           ;main.c: 239: display_data_2[4] = (gBoxCntStruct.BoxSum%10)+0x30;
  8137  0263  3000               	movlw	0
  8138  0264  0020               	movlb	0	; select bank0
  8139  0265  00A3               	movwf	___llmod@divisor+3
  8140  0266  3000               	movlw	0
  8141  0267  00A2               	movwf	___llmod@divisor+2
  8142  0268  3000               	movlw	0
  8143  0269  00A1               	movwf	___llmod@divisor+1
  8144  026A  300A               	movlw	10
  8145  026B  00A0               	movwf	___llmod@divisor
  8146  026C  3011               	movlw	17
  8147  026D  3E42               	addlw	(low (_gBoxCntStruct| 0))& (0+255)
  8148  026E  0086               	movwf	6
  8149  026F  0187               	clrf	7
  8150  0270  3F40               	moviw [0]fsr1
  8151  0271  00A4               	movwf	___llmod@dividend
  8152  0272  3F41               	moviw [1]fsr1
  8153  0273  00A5               	movwf	___llmod@dividend+1
  8154  0274  3F42               	moviw [2]fsr1
  8155  0275  00A6               	movwf	___llmod@dividend+2
  8156  0276  3F43               	moviw [3]fsr1
  8157  0277  00A7               	movwf	___llmod@dividend+3
  8158  0278  318E  265D  3180   	fcall	___llmod
  8159  027B  0020               	movlb	0	; select bank0
  8160  027C  0820               	movf	?___llmod,w
  8161  027D  3E30               	addlw	48
  8162  027E  00B5               	movwf	??_HEFLASH_checkData
  8163  027F  0835               	movf	??_HEFLASH_checkData,w
  8164  0280  0021               	movlb	1	; select bank1
  8165  0281  00BF               	movwf	(_display_data_2^(0+128)+4)
  8166                           
  8167                           ;main.c: 241: display_data_2[7] = (gBoxCntStruct.JamCnt%1000/100)+0x30;
  8168  0282  3064               	movlw	100
  8169  0283  0020               	movlb	0	; select bank0
  8170  0284  00A4               	movwf	___lwdiv@divisor
  8171  0285  3000               	movlw	0
  8172  0286  00A5               	movwf	___lwdiv@divisor+1
  8173  0287  0852               	movf	_gBoxCntStruct+16,w
  8174  0288  00A3               	movwf	___lwmod@dividend+1
  8175  0289  0851               	movf	_gBoxCntStruct+15,w
  8176  028A  00A2               	movwf	___lwmod@dividend
  8177  028B  30E8               	movlw	232
  8178  028C  00A0               	movwf	___lwmod@divisor
  8179  028D  3003               	movlw	3
  8180  028E  00A1               	movwf	___lwmod@divisor+1
  8181  028F  3187  27D3  3180   	fcall	___lwmod
  8182  0292  0020               	movlb	0	; select bank0
  8183  0293  0821               	movf	?___lwmod+1,w
  8184  0294  00A7               	movwf	___lwdiv@dividend+1
  8185  0295  0820               	movf	?___lwmod,w
  8186  0296  00A6               	movwf	___lwdiv@dividend
  8187  0297  318D  25F0  3180   	fcall	___lwdiv
  8188  029A  0020               	movlb	0	; select bank0
  8189  029B  0824               	movf	?___lwdiv,w
  8190  029C  3E30               	addlw	48
  8191  029D  00B5               	movwf	??_HEFLASH_checkData
  8192  029E  0835               	movf	??_HEFLASH_checkData,w
  8193  029F  0021               	movlb	1	; select bank1
  8194  02A0  00C2               	movwf	(_display_data_2^(0+128)+7)
  8195                           
  8196                           ;main.c: 242: display_data_2[8] = (gBoxCntStruct.JamCnt%100/10)+0x30;
  8197  02A1  300A               	movlw	10
  8198  02A2  0020               	movlb	0	; select bank0
  8199  02A3  00A4               	movwf	___lwdiv@divisor
  8200  02A4  3000               	movlw	0
  8201  02A5  00A5               	movwf	___lwdiv@divisor+1
  8202  02A6  0852               	movf	_gBoxCntStruct+16,w
  8203  02A7  00A3               	movwf	___lwmod@dividend+1
  8204  02A8  0851               	movf	_gBoxCntStruct+15,w
  8205  02A9  00A2               	movwf	___lwmod@dividend
  8206  02AA  3064               	movlw	100
  8207  02AB  00A0               	movwf	___lwmod@divisor
  8208  02AC  3000               	movlw	0
  8209  02AD  00A1               	movwf	___lwmod@divisor+1
  8210  02AE  3187  27D3  3180   	fcall	___lwmod
  8211  02B1  0020               	movlb	0	; select bank0
  8212  02B2  0821               	movf	?___lwmod+1,w
  8213  02B3  00A7               	movwf	___lwdiv@dividend+1
  8214  02B4  0820               	movf	?___lwmod,w
  8215  02B5  00A6               	movwf	___lwdiv@dividend
  8216  02B6  318D  25F0  3180   	fcall	___lwdiv
  8217  02B9  0020               	movlb	0	; select bank0
  8218  02BA  0824               	movf	?___lwdiv,w
  8219  02BB  3E30               	addlw	48
  8220  02BC  00B5               	movwf	??_HEFLASH_checkData
  8221  02BD  0835               	movf	??_HEFLASH_checkData,w
  8222  02BE  0021               	movlb	1	; select bank1
  8223  02BF  00C3               	movwf	(_display_data_2^(0+128)+8)
  8224                           
  8225                           ;main.c: 243: display_data_2[9] = (gBoxCntStruct.JamCnt%10)+0x30;
  8226  02C0  300A               	movlw	10
  8227  02C1  0020               	movlb	0	; select bank0
  8228  02C2  00A0               	movwf	___lwmod@divisor
  8229  02C3  3000               	movlw	0
  8230  02C4  00A1               	movwf	___lwmod@divisor+1
  8231  02C5  0852               	movf	_gBoxCntStruct+16,w
  8232  02C6  00A3               	movwf	___lwmod@dividend+1
  8233  02C7  0851               	movf	_gBoxCntStruct+15,w
  8234  02C8  00A2               	movwf	___lwmod@dividend
  8235  02C9  3187  27D3         	fcall	___lwmod
  8236  02CB  0020               	movlb	0	; select bank0
  8237  02CC  0820               	movf	?___lwmod,w
  8238  02CD  3E30               	addlw	48
  8239  02CE  00B5               	movwf	??_HEFLASH_checkData
  8240  02CF  0835               	movf	??_HEFLASH_checkData,w
  8241  02D0  0021               	movlb	1	; select bank1
  8242  02D1  00C4               	movwf	(_display_data_2^(0+128)+9)
  8243                           
  8244                           ;main.c: 244: }
  8245  02D2  0008               	return
  8246  02D3                     l2677:	
  8247                           
  8248                           ;main.c: 245: else
  8249                           ;main.c: 246: {
  8250                           ;main.c: 247: memset(&HEFBufferData, 0, sizeof(HEFBufferData));
  8251  02D3  3000               	movlw	0
  8252  02D4  0020               	movlb	0	; select bank0
  8253  02D5  00A0               	movwf	memset@c
  8254  02D6  00A1               	movwf	memset@c+1
  8255  02D7  3020               	movlw	32
  8256  02D8  00A2               	movwf	memset@n
  8257  02D9  3000               	movlw	0
  8258  02DA  00A3               	movwf	memset@n+1
  8259  02DB  30C6               	movlw	(low (_HEFBufferData| 0))& (0+255)
  8260  02DC  318C  24DC  3180   	fcall	_memset
  8261                           
  8262                           ;main.c: 248: HEFBufferData[0] = 0xAA;
  8263  02DF  30AA               	movlw	170
  8264  02E0  0020               	movlb	0	; select bank0
  8265  02E1  00B5               	movwf	??_HEFLASH_checkData
  8266  02E2  0835               	movf	??_HEFLASH_checkData,w
  8267  02E3  0021               	movlb	1	; select bank1
  8268  02E4  00C6               	movwf	_HEFBufferData^(0+128)
  8269                           
  8270                           ;main.c: 249: r == HEFLASH_writeBlock(0, (void*)&HEFBufferData,sizeof(HEFBufferData));
  8271  02E5  30C6               	movlw	(low (_HEFBufferData| 0))& (0+255)
  8272  02E6  0020               	movlb	0	; select bank0
  8273  02E7  00B5               	movwf	??_HEFLASH_checkData
  8274  02E8  0835               	movf	??_HEFLASH_checkData,w
  8275  02E9  00A5               	movwf	HEFLASH_writeBlock@data
  8276  02EA  3020               	movlw	32
  8277  02EB  00B6               	movwf	??_HEFLASH_checkData+1
  8278  02EC  0836               	movf	??_HEFLASH_checkData+1,w
  8279  02ED  00A6               	movwf	HEFLASH_writeBlock@count
  8280  02EE  3000               	movlw	0
  8281  02EF  318E  26F3  3180   	fcall	_HEFLASH_writeBlock
  8282                           
  8283                           ;main.c: 250: if(!(0 == r)) {_fassert(250, "main.c", "0 == r");};
  8284  02F2  0020               	movlb	0	; select bank0
  8285  02F3  083E               	movf	HEFLASH_checkData@r,w
  8286  02F4  043F               	iorwf	HEFLASH_checkData@r+1,w
  8287  02F5  1903               	btfsc	3,2
  8288  02F6  0008               	return
  8289  02F7  30FA               	movlw	250
  8290  02F8  00A0               	movwf	__fassert@line
  8291  02F9  3000               	movlw	0
  8292  02FA  00A1               	movwf	__fassert@line+1
  8293  02FB  3000               	movlw	low (STR_1| (0+32768))
  8294  02FC  00A2               	movwf	__fassert@file
  8295  02FD  3090               	movlw	high (STR_1| (0+32768))
  8296  02FE  00A3               	movwf	__fassert@file+1
  8297  02FF  3007               	movlw	low (STR_2| (0+32768))
  8298  0300  00A4               	movwf	__fassert@expr
  8299  0301  3090               	movlw	high (STR_2| (0+32768))
  8300  0302  00A5               	movwf	__fassert@expr+1
  8301  0303  318B  23D1         	fcall	__fassert
  8302  0305  0008               	return
  8303  0306                     __end_of_HEFLASH_checkData:	
  8304                           
  8305                           	psect	text17
  8306  0CDC                     __ptext17:	
  8307 ;; *************** function _memset *****************
  8308 ;; Defined at:
  8309 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\memset.c"
  8310 ;; Parameters:    Size  Location     Type
  8311 ;;  p1              1    wreg     PTR void 
  8312 ;;		 -> HEFBufferData(32), 
  8313 ;;  c               2    0[BANK0 ] int 
  8314 ;;  n               2    2[BANK0 ] unsigned int 
  8315 ;; Auto vars:     Size  Location     Type
  8316 ;;  p1              1    5[COMMON] PTR void 
  8317 ;;		 -> HEFBufferData(32), 
  8318 ;;  p               1    4[COMMON] PTR unsigned char 
  8319 ;;		 -> HEFBufferData(32), 
  8320 ;; Return value:  Size  Location     Type
  8321 ;;                  1    wreg      PTR void 
  8322 ;; Registers used:
  8323 ;;		wreg, fsr1l, fsr1h, status,2, status,0
  8324 ;; Tracked objects:
  8325 ;;		On entry : 0/0
  8326 ;;		On exit  : 0/0
  8327 ;;		Unchanged: 0/0
  8328 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8329 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8330 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8331 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8332 ;;      Totals:         3       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8333 ;;Total ram usage:        7 bytes
  8334 ;; Hardware stack levels used:    1
  8335 ;; Hardware stack levels required when called:    4
  8336 ;; This function calls:
  8337 ;;		Nothing
  8338 ;; This function is called by:
  8339 ;;		_HEFLASH_checkData
  8340 ;;		_main
  8341 ;; This function uses a non-reentrant model
  8342 ;;
  8343                           
  8344                           
  8345                           ;psect for function _memset
  8346  0CDC                     _memset:	
  8347                           
  8348                           ;incstack = 0
  8349                           ; Regs used in _memset: [wreg+fsr1l+fsr1h+status,2+status,0]
  8350                           ;memset@p1 stored from wreg
  8351  0CDC  00F5               	movwf	memset@p1
  8352  0CDD  0875               	movf	memset@p1,w
  8353  0CDE  00F3               	movwf	??_memset
  8354  0CDF  0873               	movf	??_memset,w
  8355  0CE0  00F4               	movwf	memset@p
  8356  0CE1                     l2515:	
  8357  0CE1  3001               	movlw	1
  8358  0CE2  0020               	movlb	0	; select bank0
  8359  0CE3  02A2               	subwf	memset@n,f
  8360  0CE4  3000               	movlw	0
  8361  0CE5  3BA3               	subwfb	memset@n+1,f
  8362  0CE6  0A22               	incf	memset@n,w
  8363  0CE7  1903               	btfsc	3,2
  8364  0CE8  0A23               	incf	memset@n+1,w
  8365  0CE9  1903               	btfsc	3,2
  8366  0CEA  0008               	return
  8367  0CEB  0020               	movlb	0	; select bank0
  8368  0CEC  0820               	movf	memset@c,w
  8369  0CED  00F3               	movwf	??_memset
  8370  0CEE  0874               	movf	memset@p,w
  8371  0CEF  0086               	movwf	6
  8372  0CF0  0187               	clrf	7
  8373  0CF1  0873               	movf	??_memset,w
  8374  0CF2  0081               	movwf	1
  8375  0CF3  3001               	movlw	1
  8376  0CF4  00F3               	movwf	??_memset
  8377  0CF5  0873               	movf	??_memset,w
  8378  0CF6  07F4               	addwf	memset@p,f
  8379  0CF7  2CE1               	goto	l2515
  8380  0CF8                     __end_of_memset:	
  8381                           ;	Return value of _memset is never used
  8382                           
  8383                           
  8384                           	psect	text18
  8385  0BD1                     __ptext18:	
  8386 ;; *************** function __fassert *****************
  8387 ;; Defined at:
  8388 ;;		line 77 in file "main.c"
  8389 ;; Parameters:    Size  Location     Type
  8390 ;;  line            2    0[BANK0 ] int 
  8391 ;;  file            2    2[BANK0 ] PTR const unsigned char 
  8392 ;;		 -> STR_3(7), STR_1(7), 
  8393 ;;  expr            2    4[BANK0 ] PTR const unsigned char 
  8394 ;;		 -> STR_4(7), STR_2(7), 
  8395 ;; Auto vars:     Size  Location     Type
  8396 ;;		None
  8397 ;; Return value:  Size  Location     Type
  8398 ;;                  1    wreg      void 
  8399 ;; Registers used:
  8400 ;;		wreg
  8401 ;; Tracked objects:
  8402 ;;		On entry : 0/0
  8403 ;;		On exit  : 0/0
  8404 ;;		Unchanged: 0/0
  8405 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8406 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8407 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8408 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8409 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8410 ;;Total ram usage:        6 bytes
  8411 ;; Hardware stack levels used:    1
  8412 ;; Hardware stack levels required when called:    4
  8413 ;; This function calls:
  8414 ;;		Nothing
  8415 ;; This function is called by:
  8416 ;;		_HEFLASH_checkData
  8417 ;; This function uses a non-reentrant model
  8418 ;;
  8419                           
  8420                           
  8421                           ;psect for function __fassert
  8422  0BD1                     __fassert:	
  8423                           
  8424                           ;main.c: 79: TRISC = 0xf0;
  8425                           
  8426                           ;incstack = 0
  8427                           ; Regs used in __fassert: [wreg]
  8428  0BD1  30F0               	movlw	240
  8429  0BD2  0021               	movlb	1	; select bank1
  8430  0BD3  008E               	movwf	14	;volatile
  8431                           
  8432                           ;main.c: 80: PORTC = PORTC;
  8433  0BD4  0020               	movlb	0	; select bank0
  8434  0BD5  080E               	movf	14,w	;volatile
  8435  0BD6  008E               	movwf	14	;volatile
  8436  0BD7  0008               	return
  8437  0BD8                     __end_of__fassert:	
  8438                           
  8439                           	psect	text19
  8440  0E25                     __ptext19:	
  8441 ;; *************** function _HEFLASH_readBlock *****************
  8442 ;; Defined at:
  8443 ;;		line 49 in file "HEFlash.c"
  8444 ;; Parameters:    Size  Location     Type
  8445 ;;  buffer          1    wreg     PTR unsigned char 
  8446 ;;		 -> HEFBufferData(32), 
  8447 ;;  radd            1    0[BANK0 ] unsigned char 
  8448 ;;  count           1    1[BANK0 ] unsigned char 
  8449 ;; Auto vars:     Size  Location     Type
  8450 ;;  buffer          1    6[BANK0 ] PTR unsigned char 
  8451 ;;		 -> HEFBufferData(32), 
  8452 ;;  add             2    4[BANK0 ] unsigned int 
  8453 ;; Return value:  Size  Location     Type
  8454 ;;                  1    wreg      unsigned char 
  8455 ;; Registers used:
  8456 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8457 ;; Tracked objects:
  8458 ;;		On entry : 0/0
  8459 ;;		On exit  : 0/0
  8460 ;;		Unchanged: 0/0
  8461 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8462 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8463 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8464 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8465 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8466 ;;Total ram usage:        7 bytes
  8467 ;; Hardware stack levels used:    1
  8468 ;; Hardware stack levels required when called:    5
  8469 ;; This function calls:
  8470 ;;		_FLASH_read
  8471 ;; This function is called by:
  8472 ;;		_HEFLASH_checkData
  8473 ;; This function uses a non-reentrant model
  8474 ;;
  8475                           
  8476                           
  8477                           ;psect for function _HEFLASH_readBlock
  8478  0E25                     _HEFLASH_readBlock:	
  8479                           
  8480                           ;incstack = 0
  8481                           ; Regs used in _HEFLASH_readBlock: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8482                           ;HEFLASH_readBlock@buffer stored from wreg
  8483  0E25  0020               	movlb	0	; select bank0
  8484  0E26  00A6               	movwf	HEFLASH_readBlock@buffer
  8485                           
  8486                           ;HEFlash.c: 52: unsigned add = radd * 32 + 0x1F80;
  8487  0E27  0820               	movf	HEFLASH_readBlock@radd,w
  8488  0E28  00A2               	movwf	??_HEFLASH_readBlock
  8489  0E29  01A3               	clrf	??_HEFLASH_readBlock+1
  8490  0E2A  3005               	movlw	5
  8491  0E2B                     u2055:	
  8492  0E2B  35A2               	lslf	??_HEFLASH_readBlock,f
  8493  0E2C  0DA3               	rlf	??_HEFLASH_readBlock+1,f
  8494  0E2D  0B89               	decfsz	9,f
  8495  0E2E  2E2B               	goto	u2055
  8496  0E2F  0822               	movf	??_HEFLASH_readBlock,w
  8497  0E30  3E80               	addlw	128
  8498  0E31  00A4               	movwf	HEFLASH_readBlock@add
  8499  0E32  301F               	movlw	31
  8500  0E33  3D23               	addwfc	??_HEFLASH_readBlock+1,w
  8501  0E34  00A5               	movwf	HEFLASH_readBlock@add+1
  8502                           
  8503                           ;HEFlash.c: 55: if ( ( count > 32) || (radd >= (0x1FFF-0x1F80+1)/32))
  8504  0E35  3021               	movlw	33
  8505  0E36  0221               	subwf	HEFLASH_readBlock@count,w
  8506  0E37  1803               	skipnc
  8507  0E38  2E3D               	goto	l2491
  8508  0E39  3004               	movlw	4
  8509  0E3A  0220               	subwf	HEFLASH_readBlock@radd,w
  8510  0E3B  1C03               	skipc
  8511  0E3C  2E58               	goto	l2503
  8512  0E3D                     l2491:	
  8513                           
  8514                           ;HEFlash.c: 56: return -1;
  8515  0E3D  30FF               	movlw	255
  8516  0E3E  0008               	return
  8517  0E3F                     l2495:	
  8518                           ;HEFlash.c: 59: while ( count > 0)
  8519                           
  8520                           
  8521                           ;HEFlash.c: 60: {
  8522                           ;HEFlash.c: 61: *buffer++ = (char) FLASH_read( add++);
  8523  0E3F  0825               	movf	HEFLASH_readBlock@add+1,w
  8524  0E40  00F4               	movwf	FLASH_read@address+1
  8525  0E41  0824               	movf	HEFLASH_readBlock@add,w
  8526  0E42  00F3               	movwf	FLASH_read@address
  8527  0E43  318C  2442  318E   	fcall	_FLASH_read
  8528  0E46  0873               	movf	?_FLASH_read,w
  8529  0E47  0020               	movlb	0	; select bank0
  8530  0E48  00A2               	movwf	??_HEFLASH_readBlock
  8531  0E49  0826               	movf	HEFLASH_readBlock@buffer,w
  8532  0E4A  0086               	movwf	6
  8533  0E4B  0187               	clrf	7
  8534  0E4C  0822               	movf	??_HEFLASH_readBlock,w
  8535  0E4D  0081               	movwf	1
  8536  0E4E  3001               	movlw	1
  8537  0E4F  07A4               	addwf	HEFLASH_readBlock@add,f
  8538  0E50  3000               	movlw	0
  8539  0E51  3DA5               	addwfc	HEFLASH_readBlock@add+1,f
  8540  0E52  3001               	movlw	1
  8541  0E53  00A2               	movwf	??_HEFLASH_readBlock
  8542  0E54  0822               	movf	??_HEFLASH_readBlock,w
  8543  0E55  07A6               	addwf	HEFLASH_readBlock@buffer,f
  8544                           
  8545                           ;HEFlash.c: 62: count--;
  8546  0E56  3001               	movlw	1
  8547  0E57  02A1               	subwf	HEFLASH_readBlock@count,f
  8548  0E58                     l2503:	
  8549  0E58  0821               	movf	HEFLASH_readBlock@count,w
  8550  0E59  1D03               	btfss	3,2
  8551  0E5A  2E3F               	goto	l2495
  8552                           
  8553                           ;HEFlash.c: 63: }
  8554                           ;HEFlash.c: 66: return 0;
  8555  0E5B  3000               	movlw	0
  8556  0E5C  0008               	return
  8557  0E5D                     __end_of_HEFLASH_readBlock:	
  8558                           
  8559                           	psect	text20
  8560  0C42                     __ptext20:	
  8561 ;; *************** function _FLASH_read *****************
  8562 ;; Defined at:
  8563 ;;		line 31 in file "Flash.c"
  8564 ;; Parameters:    Size  Location     Type
  8565 ;;  address         2    3[COMMON] unsigned int 
  8566 ;; Auto vars:     Size  Location     Type
  8567 ;;		None
  8568 ;; Return value:  Size  Location     Type
  8569 ;;                  2    3[COMMON] unsigned int 
  8570 ;; Registers used:
  8571 ;;		wreg
  8572 ;; Tracked objects:
  8573 ;;		On entry : 0/0
  8574 ;;		On exit  : 0/0
  8575 ;;		Unchanged: 0/0
  8576 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8577 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8578 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8579 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8580 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8581 ;;Total ram usage:        2 bytes
  8582 ;; Hardware stack levels used:    1
  8583 ;; Hardware stack levels required when called:    4
  8584 ;; This function calls:
  8585 ;;		Nothing
  8586 ;; This function is called by:
  8587 ;;		_HEFLASH_readBlock
  8588 ;;		_FLASH_readBlock
  8589 ;;		_HEFLASH_readByte
  8590 ;; This function uses a non-reentrant model
  8591 ;;
  8592                           
  8593                           
  8594                           ;psect for function _FLASH_read
  8595  0C42                     _FLASH_read:	
  8596                           
  8597                           ;Flash.c: 34: PMADR = address;
  8598                           
  8599                           ;incstack = 0
  8600                           ; Regs used in _FLASH_read: [wreg]
  8601  0C42  0874               	movf	FLASH_read@address+1,w
  8602  0C43  0023               	movlb	3	; select bank3
  8603  0C44  0092               	movwf	18	;volatile
  8604  0C45  0873               	movf	FLASH_read@address,w
  8605  0C46  0091               	movwf	17	;volatile
  8606                           
  8607                           ;Flash.c: 35: PMCON1bits.CFGS = 0;
  8608  0C47  1315               	bcf	21,6	;volatile
  8609                           
  8610                           ;Flash.c: 36: PMCON1bits.RD = 1;
  8611  0C48  1415               	bsf	21,0	;volatile
  8612                           
  8613                           ;Flash.c: 37: __nop();
  8614  0C49  0000               	nop
  8615                           
  8616                           ;Flash.c: 38: __nop();
  8617  0C4A  0000               	nop
  8618                           
  8619                           ;Flash.c: 41: return PMDAT;
  8620  0C4B  0023               	movlb	3	; select bank3
  8621  0C4C  0814               	movf	20,w	;volatile
  8622  0C4D  00F4               	movwf	?_FLASH_read+1
  8623  0C4E  0813               	movf	19,w	;volatile
  8624  0C4F  00F3               	movwf	?_FLASH_read
  8625  0C50  0008               	return
  8626  0C51                     __end_of_FLASH_read:	
  8627                           
  8628                           	psect	text21
  8629  0306                     __ptext21:	
  8630 ;; *************** function _Data_Toseg *****************
  8631 ;; Defined at:
  8632 ;;		line 157 in file "main.c"
  8633 ;; Parameters:    Size  Location     Type
  8634 ;;		None
  8635 ;; Auto vars:     Size  Location     Type
  8636 ;;		None
  8637 ;; Return value:  Size  Location     Type
  8638 ;;                  1    wreg      void 
  8639 ;; Registers used:
  8640 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  8641 ;; Tracked objects:
  8642 ;;		On entry : 0/0
  8643 ;;		On exit  : 0/0
  8644 ;;		Unchanged: 0/0
  8645 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  8646 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8647 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8648 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8649 ;;      Totals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  8650 ;;Total ram usage:        5 bytes
  8651 ;; Hardware stack levels used:    1
  8652 ;; Hardware stack levels required when called:    7
  8653 ;; This function calls:
  8654 ;;		_HEFLASH_writeBlock
  8655 ;;		___lldiv
  8656 ;;		___llmod
  8657 ;;		___lwdiv
  8658 ;;		___lwmod
  8659 ;; This function is called by:
  8660 ;;		_main
  8661 ;; This function uses a non-reentrant model
  8662 ;;
  8663                           
  8664                           
  8665                           ;psect for function _Data_Toseg
  8666  0306                     _Data_Toseg:	
  8667                           
  8668                           ;main.c: 159: display_data_1[2] = (gBoxCntStruct.SmallBoxCnt%1000/100)+0x30;
  8669                           
  8670                           ;incstack = 0
  8671                           ; Regs used in _Data_Toseg: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  8672  0306  3064               	movlw	100
  8673  0307  0020               	movlb	0	; select bank0
  8674  0308  00A4               	movwf	___lwdiv@divisor
  8675  0309  3000               	movlw	0
  8676  030A  00A5               	movwf	___lwdiv@divisor+1
  8677  030B  084C               	movf	_gBoxCntStruct+10,w
  8678  030C  00A3               	movwf	___lwmod@dividend+1
  8679  030D  084B               	movf	_gBoxCntStruct+9,w
  8680  030E  00A2               	movwf	___lwmod@dividend
  8681  030F  30E8               	movlw	232
  8682  0310  00A0               	movwf	___lwmod@divisor
  8683  0311  3003               	movlw	3
  8684  0312  00A1               	movwf	___lwmod@divisor+1
  8685  0313  3187  27D3  3183   	fcall	___lwmod
  8686  0316  0020               	movlb	0	; select bank0
  8687  0317  0821               	movf	?___lwmod+1,w
  8688  0318  00A7               	movwf	___lwdiv@dividend+1
  8689  0319  0820               	movf	?___lwmod,w
  8690  031A  00A6               	movwf	___lwdiv@dividend
  8691  031B  318D  25F0  3183   	fcall	___lwdiv
  8692  031E  0020               	movlb	0	; select bank0
  8693  031F  0824               	movf	?___lwdiv,w
  8694  0320  3E30               	addlw	48
  8695  0321  00B5               	movwf	??_Data_Toseg
  8696  0322  0835               	movf	??_Data_Toseg,w
  8697  0323  0021               	movlb	1	; select bank1
  8698  0324  00A2               	movwf	(_display_data_1^(0+128)+2)
  8699                           
  8700                           ;main.c: 160: display_data_1[3] = (gBoxCntStruct.SmallBoxCnt%100/10)+0x30;
  8701  0325  300A               	movlw	10
  8702  0326  0020               	movlb	0	; select bank0
  8703  0327  00A4               	movwf	___lwdiv@divisor
  8704  0328  3000               	movlw	0
  8705  0329  00A5               	movwf	___lwdiv@divisor+1
  8706  032A  084C               	movf	_gBoxCntStruct+10,w
  8707  032B  00A3               	movwf	___lwmod@dividend+1
  8708  032C  084B               	movf	_gBoxCntStruct+9,w
  8709  032D  00A2               	movwf	___lwmod@dividend
  8710  032E  3064               	movlw	100
  8711  032F  00A0               	movwf	___lwmod@divisor
  8712  0330  3000               	movlw	0
  8713  0331  00A1               	movwf	___lwmod@divisor+1
  8714  0332  3187  27D3  3183   	fcall	___lwmod
  8715  0335  0020               	movlb	0	; select bank0
  8716  0336  0821               	movf	?___lwmod+1,w
  8717  0337  00A7               	movwf	___lwdiv@dividend+1
  8718  0338  0820               	movf	?___lwmod,w
  8719  0339  00A6               	movwf	___lwdiv@dividend
  8720  033A  318D  25F0  3183   	fcall	___lwdiv
  8721  033D  0020               	movlb	0	; select bank0
  8722  033E  0824               	movf	?___lwdiv,w
  8723  033F  3E30               	addlw	48
  8724  0340  00B5               	movwf	??_Data_Toseg
  8725  0341  0835               	movf	??_Data_Toseg,w
  8726  0342  0021               	movlb	1	; select bank1
  8727  0343  00A3               	movwf	(_display_data_1^(0+128)+3)
  8728                           
  8729                           ;main.c: 161: display_data_1[4] = (gBoxCntStruct.SmallBoxCnt%10)+0x30;
  8730  0344  300A               	movlw	10
  8731  0345  0020               	movlb	0	; select bank0
  8732  0346  00A0               	movwf	___lwmod@divisor
  8733  0347  3000               	movlw	0
  8734  0348  00A1               	movwf	___lwmod@divisor+1
  8735  0349  084C               	movf	_gBoxCntStruct+10,w
  8736  034A  00A3               	movwf	___lwmod@dividend+1
  8737  034B  084B               	movf	_gBoxCntStruct+9,w
  8738  034C  00A2               	movwf	___lwmod@dividend
  8739  034D  3187  27D3  3183   	fcall	___lwmod
  8740  0350  0020               	movlb	0	; select bank0
  8741  0351  0820               	movf	?___lwmod,w
  8742  0352  3E30               	addlw	48
  8743  0353  00B5               	movwf	??_Data_Toseg
  8744  0354  0835               	movf	??_Data_Toseg,w
  8745  0355  0021               	movlb	1	; select bank1
  8746  0356  00A4               	movwf	(_display_data_1^(0+128)+4)
  8747                           
  8748                           ;main.c: 164: display_data_1[7] = (gBoxCntStruct.MiddleBoxCnt%1000/100)+0x30;
  8749  0357  3064               	movlw	100
  8750  0358  0020               	movlb	0	; select bank0
  8751  0359  00A4               	movwf	___lwdiv@divisor
  8752  035A  3000               	movlw	0
  8753  035B  00A5               	movwf	___lwdiv@divisor+1
  8754  035C  084E               	movf	_gBoxCntStruct+12,w
  8755  035D  00A3               	movwf	___lwmod@dividend+1
  8756  035E  084D               	movf	_gBoxCntStruct+11,w
  8757  035F  00A2               	movwf	___lwmod@dividend
  8758  0360  30E8               	movlw	232
  8759  0361  00A0               	movwf	___lwmod@divisor
  8760  0362  3003               	movlw	3
  8761  0363  00A1               	movwf	___lwmod@divisor+1
  8762  0364  3187  27D3  3183   	fcall	___lwmod
  8763  0367  0020               	movlb	0	; select bank0
  8764  0368  0821               	movf	?___lwmod+1,w
  8765  0369  00A7               	movwf	___lwdiv@dividend+1
  8766  036A  0820               	movf	?___lwmod,w
  8767  036B  00A6               	movwf	___lwdiv@dividend
  8768  036C  318D  25F0  3183   	fcall	___lwdiv
  8769  036F  0020               	movlb	0	; select bank0
  8770  0370  0824               	movf	?___lwdiv,w
  8771  0371  3E30               	addlw	48
  8772  0372  00B5               	movwf	??_Data_Toseg
  8773  0373  0835               	movf	??_Data_Toseg,w
  8774  0374  0021               	movlb	1	; select bank1
  8775  0375  00A7               	movwf	(_display_data_1^(0+128)+7)
  8776                           
  8777                           ;main.c: 165: display_data_1[8] = (gBoxCntStruct.MiddleBoxCnt%100/10)+0x30;
  8778  0376  300A               	movlw	10
  8779  0377  0020               	movlb	0	; select bank0
  8780  0378  00A4               	movwf	___lwdiv@divisor
  8781  0379  3000               	movlw	0
  8782  037A  00A5               	movwf	___lwdiv@divisor+1
  8783  037B  084E               	movf	_gBoxCntStruct+12,w
  8784  037C  00A3               	movwf	___lwmod@dividend+1
  8785  037D  084D               	movf	_gBoxCntStruct+11,w
  8786  037E  00A2               	movwf	___lwmod@dividend
  8787  037F  3064               	movlw	100
  8788  0380  00A0               	movwf	___lwmod@divisor
  8789  0381  3000               	movlw	0
  8790  0382  00A1               	movwf	___lwmod@divisor+1
  8791  0383  3187  27D3  3183   	fcall	___lwmod
  8792  0386  0020               	movlb	0	; select bank0
  8793  0387  0821               	movf	?___lwmod+1,w
  8794  0388  00A7               	movwf	___lwdiv@dividend+1
  8795  0389  0820               	movf	?___lwmod,w
  8796  038A  00A6               	movwf	___lwdiv@dividend
  8797  038B  318D  25F0  3183   	fcall	___lwdiv
  8798  038E  0020               	movlb	0	; select bank0
  8799  038F  0824               	movf	?___lwdiv,w
  8800  0390  3E30               	addlw	48
  8801  0391  00B5               	movwf	??_Data_Toseg
  8802  0392  0835               	movf	??_Data_Toseg,w
  8803  0393  0021               	movlb	1	; select bank1
  8804  0394  00A8               	movwf	(_display_data_1^(0+128)+8)
  8805                           
  8806                           ;main.c: 166: display_data_1[9] = (gBoxCntStruct.MiddleBoxCnt%10)+0x30;
  8807  0395  300A               	movlw	10
  8808  0396  0020               	movlb	0	; select bank0
  8809  0397  00A0               	movwf	___lwmod@divisor
  8810  0398  3000               	movlw	0
  8811  0399  00A1               	movwf	___lwmod@divisor+1
  8812  039A  084E               	movf	_gBoxCntStruct+12,w
  8813  039B  00A3               	movwf	___lwmod@dividend+1
  8814  039C  084D               	movf	_gBoxCntStruct+11,w
  8815  039D  00A2               	movwf	___lwmod@dividend
  8816  039E  3187  27D3  3183   	fcall	___lwmod
  8817  03A1  0020               	movlb	0	; select bank0
  8818  03A2  0820               	movf	?___lwmod,w
  8819  03A3  3E30               	addlw	48
  8820  03A4  00B5               	movwf	??_Data_Toseg
  8821  03A5  0835               	movf	??_Data_Toseg,w
  8822  03A6  0021               	movlb	1	; select bank1
  8823  03A7  00A9               	movwf	(_display_data_1^(0+128)+9)
  8824                           
  8825                           ;main.c: 168: display_data_1[12] = (gBoxCntStruct.LargeBoxCnt%1000/100)+0x30;
  8826  03A8  3064               	movlw	100
  8827  03A9  0020               	movlb	0	; select bank0
  8828  03AA  00A4               	movwf	___lwdiv@divisor
  8829  03AB  3000               	movlw	0
  8830  03AC  00A5               	movwf	___lwdiv@divisor+1
  8831  03AD  0850               	movf	_gBoxCntStruct+14,w
  8832  03AE  00A3               	movwf	___lwmod@dividend+1
  8833  03AF  084F               	movf	_gBoxCntStruct+13,w
  8834  03B0  00A2               	movwf	___lwmod@dividend
  8835  03B1  30E8               	movlw	232
  8836  03B2  00A0               	movwf	___lwmod@divisor
  8837  03B3  3003               	movlw	3
  8838  03B4  00A1               	movwf	___lwmod@divisor+1
  8839  03B5  3187  27D3  3183   	fcall	___lwmod
  8840  03B8  0020               	movlb	0	; select bank0
  8841  03B9  0821               	movf	?___lwmod+1,w
  8842  03BA  00A7               	movwf	___lwdiv@dividend+1
  8843  03BB  0820               	movf	?___lwmod,w
  8844  03BC  00A6               	movwf	___lwdiv@dividend
  8845  03BD  318D  25F0  3183   	fcall	___lwdiv
  8846  03C0  0020               	movlb	0	; select bank0
  8847  03C1  0824               	movf	?___lwdiv,w
  8848  03C2  3E30               	addlw	48
  8849  03C3  00B5               	movwf	??_Data_Toseg
  8850  03C4  0835               	movf	??_Data_Toseg,w
  8851  03C5  0021               	movlb	1	; select bank1
  8852  03C6  00AC               	movwf	(_display_data_1^(0+128)+12)
  8853                           
  8854                           ;main.c: 169: display_data_1[13] = (gBoxCntStruct.LargeBoxCnt%100/10)+0x30;
  8855  03C7  300A               	movlw	10
  8856  03C8  0020               	movlb	0	; select bank0
  8857  03C9  00A4               	movwf	___lwdiv@divisor
  8858  03CA  3000               	movlw	0
  8859  03CB  00A5               	movwf	___lwdiv@divisor+1
  8860  03CC  0850               	movf	_gBoxCntStruct+14,w
  8861  03CD  00A3               	movwf	___lwmod@dividend+1
  8862  03CE  084F               	movf	_gBoxCntStruct+13,w
  8863  03CF  00A2               	movwf	___lwmod@dividend
  8864  03D0  3064               	movlw	100
  8865  03D1  00A0               	movwf	___lwmod@divisor
  8866  03D2  3000               	movlw	0
  8867  03D3  00A1               	movwf	___lwmod@divisor+1
  8868  03D4  3187  27D3  3183   	fcall	___lwmod
  8869  03D7  0020               	movlb	0	; select bank0
  8870  03D8  0821               	movf	?___lwmod+1,w
  8871  03D9  00A7               	movwf	___lwdiv@dividend+1
  8872  03DA  0820               	movf	?___lwmod,w
  8873  03DB  00A6               	movwf	___lwdiv@dividend
  8874  03DC  318D  25F0  3183   	fcall	___lwdiv
  8875  03DF  0020               	movlb	0	; select bank0
  8876  03E0  0824               	movf	?___lwdiv,w
  8877  03E1  3E30               	addlw	48
  8878  03E2  00B5               	movwf	??_Data_Toseg
  8879  03E3  0835               	movf	??_Data_Toseg,w
  8880  03E4  0021               	movlb	1	; select bank1
  8881  03E5  00AD               	movwf	(_display_data_1^(0+128)+13)
  8882                           
  8883                           ;main.c: 170: display_data_1[14] = (gBoxCntStruct.LargeBoxCnt%10)+0x30;
  8884  03E6  300A               	movlw	10
  8885  03E7  0020               	movlb	0	; select bank0
  8886  03E8  00A0               	movwf	___lwmod@divisor
  8887  03E9  3000               	movlw	0
  8888  03EA  00A1               	movwf	___lwmod@divisor+1
  8889  03EB  0850               	movf	_gBoxCntStruct+14,w
  8890  03EC  00A3               	movwf	___lwmod@dividend+1
  8891  03ED  084F               	movf	_gBoxCntStruct+13,w
  8892  03EE  00A2               	movwf	___lwmod@dividend
  8893  03EF  3187  27D3  3183   	fcall	___lwmod
  8894  03F2  0020               	movlb	0	; select bank0
  8895  03F3  0820               	movf	?___lwmod,w
  8896  03F4  3E30               	addlw	48
  8897  03F5  00B5               	movwf	??_Data_Toseg
  8898  03F6  0835               	movf	??_Data_Toseg,w
  8899  03F7  0021               	movlb	1	; select bank1
  8900  03F8  00AE               	movwf	(_display_data_1^(0+128)+14)
  8901                           
  8902                           ;main.c: 172: display_data_2[2] = (gBoxCntStruct.BoxSum%1000/100)+0x30;
  8903  03F9  3000               	movlw	0
  8904  03FA  0020               	movlb	0	; select bank0
  8905  03FB  00AB               	movwf	___lldiv@divisor+3
  8906  03FC  3000               	movlw	0
  8907  03FD  00AA               	movwf	___lldiv@divisor+2
  8908  03FE  3000               	movlw	0
  8909  03FF  00A9               	movwf	___lldiv@divisor+1
  8910  0400  3064               	movlw	100
  8911  0401  00A8               	movwf	___lldiv@divisor
  8912  0402  3011               	movlw	17
  8913  0403  3E42               	addlw	(low (_gBoxCntStruct| 0))& (0+255)
  8914  0404  0086               	movwf	6
  8915  0405  0187               	clrf	7
  8916  0406  3F40               	moviw [0]fsr1
  8917  0407  00A4               	movwf	___llmod@dividend
  8918  0408  3F41               	moviw [1]fsr1
  8919  0409  00A5               	movwf	___llmod@dividend+1
  8920  040A  3F42               	moviw [2]fsr1
  8921  040B  00A6               	movwf	___llmod@dividend+2
  8922  040C  3F43               	moviw [3]fsr1
  8923  040D  00A7               	movwf	___llmod@dividend+3
  8924  040E  3000               	movlw	0
  8925  040F  00A3               	movwf	___llmod@divisor+3
  8926  0410  3000               	movlw	0
  8927  0411  00A2               	movwf	___llmod@divisor+2
  8928  0412  3003               	movlw	3
  8929  0413  00A1               	movwf	___llmod@divisor+1
  8930  0414  30E8               	movlw	232
  8931  0415  00A0               	movwf	___llmod@divisor
  8932  0416  318E  265D  3183   	fcall	___llmod
  8933  0419  0020               	movlb	0	; select bank0
  8934  041A  0823               	movf	?___llmod+3,w
  8935  041B  00AF               	movwf	___lldiv@dividend+3
  8936  041C  0822               	movf	?___llmod+2,w
  8937  041D  00AE               	movwf	___lldiv@dividend+2
  8938  041E  0821               	movf	?___llmod+1,w
  8939  041F  00AD               	movwf	___lldiv@dividend+1
  8940  0420  0820               	movf	?___llmod,w
  8941  0421  00AC               	movwf	___lldiv@dividend
  8942  0422  318E  26A0  3183   	fcall	___lldiv
  8943  0425  0020               	movlb	0	; select bank0
  8944  0426  0828               	movf	?___lldiv,w
  8945  0427  3E30               	addlw	48
  8946  0428  00B5               	movwf	??_Data_Toseg
  8947  0429  0835               	movf	??_Data_Toseg,w
  8948  042A  0021               	movlb	1	; select bank1
  8949  042B  00BD               	movwf	(_display_data_2^(0+128)+2)
  8950                           
  8951                           ;main.c: 173: display_data_2[3] = (gBoxCntStruct.BoxSum%100/10)+0x30;
  8952  042C  3000               	movlw	0
  8953  042D  0020               	movlb	0	; select bank0
  8954  042E  00AB               	movwf	___lldiv@divisor+3
  8955  042F  3000               	movlw	0
  8956  0430  00AA               	movwf	___lldiv@divisor+2
  8957  0431  3000               	movlw	0
  8958  0432  00A9               	movwf	___lldiv@divisor+1
  8959  0433  300A               	movlw	10
  8960  0434  00A8               	movwf	___lldiv@divisor
  8961  0435  3011               	movlw	17
  8962  0436  3E42               	addlw	(low (_gBoxCntStruct| 0))& (0+255)
  8963  0437  0086               	movwf	6
  8964  0438  0187               	clrf	7
  8965  0439  3F40               	moviw [0]fsr1
  8966  043A  00A4               	movwf	___llmod@dividend
  8967  043B  3F41               	moviw [1]fsr1
  8968  043C  00A5               	movwf	___llmod@dividend+1
  8969  043D  3F42               	moviw [2]fsr1
  8970  043E  00A6               	movwf	___llmod@dividend+2
  8971  043F  3F43               	moviw [3]fsr1
  8972  0440  00A7               	movwf	___llmod@dividend+3
  8973  0441  3000               	movlw	0
  8974  0442  00A3               	movwf	___llmod@divisor+3
  8975  0443  3000               	movlw	0
  8976  0444  00A2               	movwf	___llmod@divisor+2
  8977  0445  3000               	movlw	0
  8978  0446  00A1               	movwf	___llmod@divisor+1
  8979  0447  3064               	movlw	100
  8980  0448  00A0               	movwf	___llmod@divisor
  8981  0449  318E  265D  3183   	fcall	___llmod
  8982  044C  0020               	movlb	0	; select bank0
  8983  044D  0823               	movf	?___llmod+3,w
  8984  044E  00AF               	movwf	___lldiv@dividend+3
  8985  044F  0822               	movf	?___llmod+2,w
  8986  0450  00AE               	movwf	___lldiv@dividend+2
  8987  0451  0821               	movf	?___llmod+1,w
  8988  0452  00AD               	movwf	___lldiv@dividend+1
  8989  0453  0820               	movf	?___llmod,w
  8990  0454  00AC               	movwf	___lldiv@dividend
  8991  0455  318E  26A0  3183   	fcall	___lldiv
  8992  0458  0020               	movlb	0	; select bank0
  8993  0459  0828               	movf	?___lldiv,w
  8994  045A  3E30               	addlw	48
  8995  045B  00B5               	movwf	??_Data_Toseg
  8996  045C  0835               	movf	??_Data_Toseg,w
  8997  045D  0021               	movlb	1	; select bank1
  8998  045E  00BE               	movwf	(_display_data_2^(0+128)+3)
  8999                           
  9000                           ;main.c: 174: display_data_2[4] = (gBoxCntStruct.BoxSum%10)+0x30;
  9001  045F  3000               	movlw	0
  9002  0460  0020               	movlb	0	; select bank0
  9003  0461  00A3               	movwf	___llmod@divisor+3
  9004  0462  3000               	movlw	0
  9005  0463  00A2               	movwf	___llmod@divisor+2
  9006  0464  3000               	movlw	0
  9007  0465  00A1               	movwf	___llmod@divisor+1
  9008  0466  300A               	movlw	10
  9009  0467  00A0               	movwf	___llmod@divisor
  9010  0468  3011               	movlw	17
  9011  0469  3E42               	addlw	(low (_gBoxCntStruct| 0))& (0+255)
  9012  046A  0086               	movwf	6
  9013  046B  0187               	clrf	7
  9014  046C  3F40               	moviw [0]fsr1
  9015  046D  00A4               	movwf	___llmod@dividend
  9016  046E  3F41               	moviw [1]fsr1
  9017  046F  00A5               	movwf	___llmod@dividend+1
  9018  0470  3F42               	moviw [2]fsr1
  9019  0471  00A6               	movwf	___llmod@dividend+2
  9020  0472  3F43               	moviw [3]fsr1
  9021  0473  00A7               	movwf	___llmod@dividend+3
  9022  0474  318E  265D  3183   	fcall	___llmod
  9023  0477  0020               	movlb	0	; select bank0
  9024  0478  0820               	movf	?___llmod,w
  9025  0479  3E30               	addlw	48
  9026  047A  00B5               	movwf	??_Data_Toseg
  9027  047B  0835               	movf	??_Data_Toseg,w
  9028  047C  0021               	movlb	1	; select bank1
  9029  047D  00BF               	movwf	(_display_data_2^(0+128)+4)
  9030                           
  9031                           ;main.c: 176: display_data_2[7] = (gBoxCntStruct.JamCnt%1000/100)+0x30;
  9032  047E  3064               	movlw	100
  9033  047F  0020               	movlb	0	; select bank0
  9034  0480  00A4               	movwf	___lwdiv@divisor
  9035  0481  3000               	movlw	0
  9036  0482  00A5               	movwf	___lwdiv@divisor+1
  9037  0483  0852               	movf	_gBoxCntStruct+16,w
  9038  0484  00A3               	movwf	___lwmod@dividend+1
  9039  0485  0851               	movf	_gBoxCntStruct+15,w
  9040  0486  00A2               	movwf	___lwmod@dividend
  9041  0487  30E8               	movlw	232
  9042  0488  00A0               	movwf	___lwmod@divisor
  9043  0489  3003               	movlw	3
  9044  048A  00A1               	movwf	___lwmod@divisor+1
  9045  048B  3187  27D3  3183   	fcall	___lwmod
  9046  048E  0020               	movlb	0	; select bank0
  9047  048F  0821               	movf	?___lwmod+1,w
  9048  0490  00A7               	movwf	___lwdiv@dividend+1
  9049  0491  0820               	movf	?___lwmod,w
  9050  0492  00A6               	movwf	___lwdiv@dividend
  9051  0493  318D  25F0  3183   	fcall	___lwdiv
  9052  0496  0020               	movlb	0	; select bank0
  9053  0497  0824               	movf	?___lwdiv,w
  9054  0498  3E30               	addlw	48
  9055  0499  00B5               	movwf	??_Data_Toseg
  9056  049A  0835               	movf	??_Data_Toseg,w
  9057  049B  0021               	movlb	1	; select bank1
  9058  049C  00C2               	movwf	(_display_data_2^(0+128)+7)
  9059                           
  9060                           ;main.c: 177: display_data_2[8] = (gBoxCntStruct.JamCnt%100/10)+0x30;
  9061  049D  300A               	movlw	10
  9062  049E  0020               	movlb	0	; select bank0
  9063  049F  00A4               	movwf	___lwdiv@divisor
  9064  04A0  3000               	movlw	0
  9065  04A1  00A5               	movwf	___lwdiv@divisor+1
  9066  04A2  0852               	movf	_gBoxCntStruct+16,w
  9067  04A3  00A3               	movwf	___lwmod@dividend+1
  9068  04A4  0851               	movf	_gBoxCntStruct+15,w
  9069  04A5  00A2               	movwf	___lwmod@dividend
  9070  04A6  3064               	movlw	100
  9071  04A7  00A0               	movwf	___lwmod@divisor
  9072  04A8  3000               	movlw	0
  9073  04A9  00A1               	movwf	___lwmod@divisor+1
  9074  04AA  3187  27D3  3183   	fcall	___lwmod
  9075  04AD  0020               	movlb	0	; select bank0
  9076  04AE  0821               	movf	?___lwmod+1,w
  9077  04AF  00A7               	movwf	___lwdiv@dividend+1
  9078  04B0  0820               	movf	?___lwmod,w
  9079  04B1  00A6               	movwf	___lwdiv@dividend
  9080  04B2  318D  25F0  3183   	fcall	___lwdiv
  9081  04B5  0020               	movlb	0	; select bank0
  9082  04B6  0824               	movf	?___lwdiv,w
  9083  04B7  3E30               	addlw	48
  9084  04B8  00B5               	movwf	??_Data_Toseg
  9085  04B9  0835               	movf	??_Data_Toseg,w
  9086  04BA  0021               	movlb	1	; select bank1
  9087  04BB  00C3               	movwf	(_display_data_2^(0+128)+8)
  9088                           
  9089                           ;main.c: 178: display_data_2[9] = (gBoxCntStruct.JamCnt%10)+0x30;
  9090  04BC  300A               	movlw	10
  9091  04BD  0020               	movlb	0	; select bank0
  9092  04BE  00A0               	movwf	___lwmod@divisor
  9093  04BF  3000               	movlw	0
  9094  04C0  00A1               	movwf	___lwmod@divisor+1
  9095  04C1  0852               	movf	_gBoxCntStruct+16,w
  9096  04C2  00A3               	movwf	___lwmod@dividend+1
  9097  04C3  0851               	movf	_gBoxCntStruct+15,w
  9098  04C4  00A2               	movwf	___lwmod@dividend
  9099  04C5  3187  27D3  3183   	fcall	___lwmod
  9100  04C8  0020               	movlb	0	; select bank0
  9101  04C9  0820               	movf	?___lwmod,w
  9102  04CA  3E30               	addlw	48
  9103  04CB  00B5               	movwf	??_Data_Toseg
  9104  04CC  0835               	movf	??_Data_Toseg,w
  9105  04CD  0021               	movlb	1	; select bank1
  9106  04CE  00C4               	movwf	(_display_data_2^(0+128)+9)
  9107                           
  9108                           ;main.c: 181: HEFBufferData[3] = (unsigned char)(gBoxCntStruct.SmallBoxCnt >> 8);
  9109  04CF  0020               	movlb	0	; select bank0
  9110  04D0  084C               	movf	_gBoxCntStruct+10,w
  9111  04D1  00B5               	movwf	??_Data_Toseg
  9112  04D2  0835               	movf	??_Data_Toseg,w
  9113  04D3  0021               	movlb	1	; select bank1
  9114  04D4  00C9               	movwf	(_HEFBufferData^(0+128)+3)
  9115                           
  9116                           ;main.c: 182: HEFBufferData[4] = (unsigned char)(gBoxCntStruct.SmallBoxCnt);
  9117  04D5  0020               	movlb	0	; select bank0
  9118  04D6  084B               	movf	_gBoxCntStruct+9,w
  9119  04D7  00B5               	movwf	??_Data_Toseg
  9120  04D8  0835               	movf	??_Data_Toseg,w
  9121  04D9  0021               	movlb	1	; select bank1
  9122  04DA  00CA               	movwf	(_HEFBufferData^(0+128)+4)
  9123                           
  9124                           ;main.c: 185: HEFBufferData[7] = (unsigned char)(gBoxCntStruct.MiddleBoxCnt >> 8);
  9125  04DB  0020               	movlb	0	; select bank0
  9126  04DC  084E               	movf	_gBoxCntStruct+12,w
  9127  04DD  00B5               	movwf	??_Data_Toseg
  9128  04DE  0835               	movf	??_Data_Toseg,w
  9129  04DF  0021               	movlb	1	; select bank1
  9130  04E0  00CD               	movwf	(_HEFBufferData^(0+128)+7)
  9131                           
  9132                           ;main.c: 186: HEFBufferData[8] = (unsigned char)(gBoxCntStruct.MiddleBoxCnt);
  9133  04E1  0020               	movlb	0	; select bank0
  9134  04E2  084D               	movf	_gBoxCntStruct+11,w
  9135  04E3  00B5               	movwf	??_Data_Toseg
  9136  04E4  0835               	movf	??_Data_Toseg,w
  9137  04E5  0021               	movlb	1	; select bank1
  9138  04E6  00CE               	movwf	(_HEFBufferData^(0+128)+8)
  9139                           
  9140                           ;main.c: 189: HEFBufferData[11] = (unsigned char)(gBoxCntStruct.LargeBoxCnt >> 8);
  9141  04E7  0020               	movlb	0	; select bank0
  9142  04E8  0850               	movf	_gBoxCntStruct+14,w
  9143  04E9  00B5               	movwf	??_Data_Toseg
  9144  04EA  0835               	movf	??_Data_Toseg,w
  9145  04EB  0021               	movlb	1	; select bank1
  9146  04EC  00D1               	movwf	(_HEFBufferData^(0+128)+11)
  9147                           
  9148                           ;main.c: 190: HEFBufferData[12] = (unsigned char)(gBoxCntStruct.LargeBoxCnt );
  9149  04ED  0020               	movlb	0	; select bank0
  9150  04EE  084F               	movf	_gBoxCntStruct+13,w
  9151  04EF  00B5               	movwf	??_Data_Toseg
  9152  04F0  0835               	movf	??_Data_Toseg,w
  9153  04F1  0021               	movlb	1	; select bank1
  9154  04F2  00D2               	movwf	(_HEFBufferData^(0+128)+12)
  9155                           
  9156                           ;main.c: 193: HEFBufferData[15] = (unsigned char)(gBoxCntStruct.BoxSum >> 8);
  9157  04F3  0020               	movlb	0	; select bank0
  9158  04F4  0853               	movf	_gBoxCntStruct+17,w
  9159  04F5  00B5               	movwf	??_Data_Toseg
  9160  04F6  0854               	movf	_gBoxCntStruct+18,w
  9161  04F7  00B6               	movwf	??_Data_Toseg+1
  9162  04F8  0855               	movf	_gBoxCntStruct+19,w
  9163  04F9  00B7               	movwf	??_Data_Toseg+2
  9164  04FA  0856               	movf	_gBoxCntStruct+20,w
  9165  04FB  00B8               	movwf	??_Data_Toseg+3
  9166  04FC  3008               	movlw	8
  9167  04FD                     u2245:	
  9168  04FD  36B8               	lsrf	??_Data_Toseg+3,f
  9169  04FE  0CB7               	rrf	??_Data_Toseg+2,f
  9170  04FF  0CB6               	rrf	??_Data_Toseg+1,f
  9171  0500  0CB5               	rrf	??_Data_Toseg,f
  9172  0501  0B89               	decfsz	9,f
  9173  0502  2CFD               	goto	u2245
  9174  0503  0835               	movf	??_Data_Toseg,w
  9175  0504  00B9               	movwf	??_Data_Toseg+4
  9176  0505  0839               	movf	??_Data_Toseg+4,w
  9177  0506  0021               	movlb	1	; select bank1
  9178  0507  00D5               	movwf	(_HEFBufferData^(0+128)+15)
  9179                           
  9180                           ;main.c: 194: HEFBufferData[16] = (unsigned char)(gBoxCntStruct.BoxSum );
  9181  0508  0020               	movlb	0	; select bank0
  9182  0509  0853               	movf	_gBoxCntStruct+17,w
  9183  050A  00B5               	movwf	??_Data_Toseg
  9184  050B  0835               	movf	??_Data_Toseg,w
  9185  050C  0021               	movlb	1	; select bank1
  9186  050D  00D6               	movwf	(_HEFBufferData^(0+128)+16)
  9187                           
  9188                           ;main.c: 197: HEFBufferData[19] = (unsigned char)(gBoxCntStruct.JamCnt >> 8);
  9189  050E  0020               	movlb	0	; select bank0
  9190  050F  0852               	movf	_gBoxCntStruct+16,w
  9191  0510  00B5               	movwf	??_Data_Toseg
  9192  0511  0835               	movf	??_Data_Toseg,w
  9193  0512  0021               	movlb	1	; select bank1
  9194  0513  00D9               	movwf	(_HEFBufferData^(0+128)+19)
  9195                           
  9196                           ;main.c: 198: HEFBufferData[20] = (unsigned char)(gBoxCntStruct.JamCnt );
  9197  0514  0020               	movlb	0	; select bank0
  9198  0515  0851               	movf	_gBoxCntStruct+15,w
  9199  0516  00B5               	movwf	??_Data_Toseg
  9200  0517  0835               	movf	??_Data_Toseg,w
  9201  0518  0021               	movlb	1	; select bank1
  9202  0519  00DA               	movwf	(_HEFBufferData^(0+128)+20)
  9203                           
  9204                           ;main.c: 200: (INTCONbits.GIE = 0);
  9205  051A  138B               	bcf	11,7	;volatile
  9206                           
  9207                           ;main.c: 201: HEFLASH_writeBlock(0, (void*)&HEFBufferData,sizeof(HEFBufferData));
  9208  051B  30C6               	movlw	(low (_HEFBufferData| 0))& (0+255)
  9209  051C  0020               	movlb	0	; select bank0
  9210  051D  00B5               	movwf	??_Data_Toseg
  9211  051E  0835               	movf	??_Data_Toseg,w
  9212  051F  00A5               	movwf	HEFLASH_writeBlock@data
  9213  0520  3020               	movlw	32
  9214  0521  00B6               	movwf	??_Data_Toseg+1
  9215  0522  0836               	movf	??_Data_Toseg+1,w
  9216  0523  00A6               	movwf	HEFLASH_writeBlock@count
  9217  0524  3000               	movlw	0
  9218  0525  318E  26F3         	fcall	_HEFLASH_writeBlock
  9219                           
  9220                           ;main.c: 202: (INTCONbits.GIE = 1);
  9221  0527  178B               	bsf	11,7	;volatile
  9222  0528  0008               	return
  9223  0529                     __end_of_Data_Toseg:	
  9224                           
  9225                           	psect	text22
  9226  07D3                     __ptext22:	
  9227 ;; *************** function ___lwmod *****************
  9228 ;; Defined at:
  9229 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwmod.c"
  9230 ;; Parameters:    Size  Location     Type
  9231 ;;  divisor         2    0[BANK0 ] unsigned int 
  9232 ;;  dividend        2    2[BANK0 ] unsigned int 
  9233 ;; Auto vars:     Size  Location     Type
  9234 ;;  counter         1    4[COMMON] unsigned char 
  9235 ;; Return value:  Size  Location     Type
  9236 ;;                  2    0[BANK0 ] unsigned int 
  9237 ;; Registers used:
  9238 ;;		wreg, status,2, status,0
  9239 ;; Tracked objects:
  9240 ;;		On entry : 0/0
  9241 ;;		On exit  : 0/0
  9242 ;;		Unchanged: 0/0
  9243 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9244 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9245 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9246 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9247 ;;      Totals:         2       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9248 ;;Total ram usage:        6 bytes
  9249 ;; Hardware stack levels used:    1
  9250 ;; Hardware stack levels required when called:    4
  9251 ;; This function calls:
  9252 ;;		Nothing
  9253 ;; This function is called by:
  9254 ;;		_Data_Toseg
  9255 ;;		_HEFLASH_checkData
  9256 ;; This function uses a non-reentrant model
  9257 ;;
  9258                           
  9259                           
  9260                           ;psect for function ___lwmod
  9261  07D3                     ___lwmod:	
  9262                           
  9263                           ;incstack = 0
  9264                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  9265  07D3  0020               	movlb	0	; select bank0
  9266  07D4  0820               	movf	___lwmod@divisor,w
  9267  07D5  0421               	iorwf	___lwmod@divisor+1,w
  9268  07D6  1903               	btfsc	3,2
  9269  07D7  2FFB               	goto	l2561
  9270  07D8  01F4               	clrf	___lwmod@counter
  9271  07D9  0AF4               	incf	___lwmod@counter,f
  9272  07DA                     l2551:	
  9273  07DA  1BA1               	btfsc	___lwmod@divisor+1,7
  9274  07DB  2FE6               	goto	l2553
  9275  07DC  3001               	movlw	1
  9276  07DD                     u2185:	
  9277  07DD  35A0               	lslf	___lwmod@divisor,f
  9278  07DE  0DA1               	rlf	___lwmod@divisor+1,f
  9279  07DF  0B89               	decfsz	9,f
  9280  07E0  2FDD               	goto	u2185
  9281  07E1  3001               	movlw	1
  9282  07E2  00F3               	movwf	??___lwmod
  9283  07E3  0873               	movf	??___lwmod,w
  9284  07E4  07F4               	addwf	___lwmod@counter,f
  9285  07E5  2FDA               	goto	l2551
  9286  07E6                     l2553:	
  9287  07E6  0821               	movf	___lwmod@divisor+1,w
  9288  07E7  0223               	subwf	___lwmod@dividend+1,w
  9289  07E8  1D03               	skipz
  9290  07E9  2FEC               	goto	u2205
  9291  07EA  0820               	movf	___lwmod@divisor,w
  9292  07EB  0222               	subwf	___lwmod@dividend,w
  9293  07EC                     u2205:	
  9294  07EC  1C03               	skipc
  9295  07ED  2FF2               	goto	l2557
  9296  07EE  0820               	movf	___lwmod@divisor,w
  9297  07EF  02A2               	subwf	___lwmod@dividend,f
  9298  07F0  0821               	movf	___lwmod@divisor+1,w
  9299  07F1  3BA3               	subwfb	___lwmod@dividend+1,f
  9300  07F2                     l2557:	
  9301  07F2  3001               	movlw	1
  9302  07F3                     u2215:	
  9303  07F3  36A1               	lsrf	___lwmod@divisor+1,f
  9304  07F4  0CA0               	rrf	___lwmod@divisor,f
  9305  07F5  0B89               	decfsz	9,f
  9306  07F6  2FF3               	goto	u2215
  9307  07F7  3001               	movlw	1
  9308  07F8  02F4               	subwf	___lwmod@counter,f
  9309  07F9  1D03               	btfss	3,2
  9310  07FA  2FE6               	goto	l2553
  9311  07FB                     l2561:	
  9312  07FB  0823               	movf	___lwmod@dividend+1,w
  9313  07FC  00A1               	movwf	?___lwmod+1
  9314  07FD  0822               	movf	___lwmod@dividend,w
  9315  07FE  00A0               	movwf	?___lwmod
  9316  07FF  0008               	return
  9317  0800                     __end_of___lwmod:	
  9318                           
  9319                           	psect	text23
  9320  0DF0                     __ptext23:	
  9321 ;; *************** function ___lwdiv *****************
  9322 ;; Defined at:
  9323 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lwdiv.c"
  9324 ;; Parameters:    Size  Location     Type
  9325 ;;  divisor         2    4[BANK0 ] unsigned int 
  9326 ;;  dividend        2    6[BANK0 ] unsigned int 
  9327 ;; Auto vars:     Size  Location     Type
  9328 ;;  quotient        2    9[BANK0 ] unsigned int 
  9329 ;;  counter         1    8[BANK0 ] unsigned char 
  9330 ;; Return value:  Size  Location     Type
  9331 ;;                  2    4[BANK0 ] unsigned int 
  9332 ;; Registers used:
  9333 ;;		wreg, status,2, status,0
  9334 ;; Tracked objects:
  9335 ;;		On entry : 0/0
  9336 ;;		On exit  : 0/0
  9337 ;;		Unchanged: 0/0
  9338 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9339 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9340 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9341 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9342 ;;      Totals:         1       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9343 ;;Total ram usage:        8 bytes
  9344 ;; Hardware stack levels used:    1
  9345 ;; Hardware stack levels required when called:    4
  9346 ;; This function calls:
  9347 ;;		Nothing
  9348 ;; This function is called by:
  9349 ;;		_Data_Toseg
  9350 ;;		_HEFLASH_checkData
  9351 ;; This function uses a non-reentrant model
  9352 ;;
  9353                           
  9354                           
  9355                           ;psect for function ___lwdiv
  9356  0DF0                     ___lwdiv:	
  9357                           
  9358                           ;incstack = 0
  9359                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  9360  0DF0  0020               	movlb	0	; select bank0
  9361  0DF1  01A9               	clrf	___lwdiv@quotient
  9362  0DF2  01AA               	clrf	___lwdiv@quotient+1
  9363  0DF3  0824               	movf	___lwdiv@divisor,w
  9364  0DF4  0425               	iorwf	___lwdiv@divisor+1,w
  9365  0DF5  1903               	btfsc	3,2
  9366  0DF6  2E20               	goto	l2539
  9367  0DF7  01A8               	clrf	___lwdiv@counter
  9368  0DF8  0AA8               	incf	___lwdiv@counter,f
  9369  0DF9                     l2527:	
  9370  0DF9  1BA5               	btfsc	___lwdiv@divisor+1,7
  9371  0DFA  2E05               	goto	l2529
  9372  0DFB  3001               	movlw	1
  9373  0DFC                     u2115:	
  9374  0DFC  35A4               	lslf	___lwdiv@divisor,f
  9375  0DFD  0DA5               	rlf	___lwdiv@divisor+1,f
  9376  0DFE  0B89               	decfsz	9,f
  9377  0DFF  2DFC               	goto	u2115
  9378  0E00  3001               	movlw	1
  9379  0E01  00F5               	movwf	??___lwdiv
  9380  0E02  0875               	movf	??___lwdiv,w
  9381  0E03  07A8               	addwf	___lwdiv@counter,f
  9382  0E04  2DF9               	goto	l2527
  9383  0E05                     l2529:	
  9384  0E05  3001               	movlw	1
  9385  0E06                     u2135:	
  9386  0E06  35A9               	lslf	___lwdiv@quotient,f
  9387  0E07  0DAA               	rlf	___lwdiv@quotient+1,f
  9388  0E08  0B89               	decfsz	9,f
  9389  0E09  2E06               	goto	u2135
  9390  0E0A  0825               	movf	___lwdiv@divisor+1,w
  9391  0E0B  0227               	subwf	___lwdiv@dividend+1,w
  9392  0E0C  1D03               	skipz
  9393  0E0D  2E10               	goto	u2145
  9394  0E0E  0824               	movf	___lwdiv@divisor,w
  9395  0E0F  0226               	subwf	___lwdiv@dividend,w
  9396  0E10                     u2145:	
  9397  0E10  1C03               	skipc
  9398  0E11  2E17               	goto	l2535
  9399  0E12  0824               	movf	___lwdiv@divisor,w
  9400  0E13  02A6               	subwf	___lwdiv@dividend,f
  9401  0E14  0825               	movf	___lwdiv@divisor+1,w
  9402  0E15  3BA7               	subwfb	___lwdiv@dividend+1,f
  9403  0E16  1429               	bsf	___lwdiv@quotient,0
  9404  0E17                     l2535:	
  9405  0E17  3001               	movlw	1
  9406  0E18                     u2155:	
  9407  0E18  36A5               	lsrf	___lwdiv@divisor+1,f
  9408  0E19  0CA4               	rrf	___lwdiv@divisor,f
  9409  0E1A  0B89               	decfsz	9,f
  9410  0E1B  2E18               	goto	u2155
  9411  0E1C  3001               	movlw	1
  9412  0E1D  02A8               	subwf	___lwdiv@counter,f
  9413  0E1E  1D03               	btfss	3,2
  9414  0E1F  2E05               	goto	l2529
  9415  0E20                     l2539:	
  9416  0E20  082A               	movf	___lwdiv@quotient+1,w
  9417  0E21  00A5               	movwf	?___lwdiv+1
  9418  0E22  0829               	movf	___lwdiv@quotient,w
  9419  0E23  00A4               	movwf	?___lwdiv
  9420  0E24  0008               	return
  9421  0E25                     __end_of___lwdiv:	
  9422                           
  9423                           	psect	text24
  9424  0E5D                     __ptext24:	
  9425 ;; *************** function ___llmod *****************
  9426 ;; Defined at:
  9427 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\llmod.c"
  9428 ;; Parameters:    Size  Location     Type
  9429 ;;  divisor         4    0[BANK0 ] unsigned long 
  9430 ;;  dividend        4    4[BANK0 ] unsigned long 
  9431 ;; Auto vars:     Size  Location     Type
  9432 ;;  counter         1    4[COMMON] unsigned char 
  9433 ;; Return value:  Size  Location     Type
  9434 ;;                  4    0[BANK0 ] unsigned long 
  9435 ;; Registers used:
  9436 ;;		wreg, status,2, status,0
  9437 ;; Tracked objects:
  9438 ;;		On entry : 0/0
  9439 ;;		On exit  : 0/0
  9440 ;;		Unchanged: 0/0
  9441 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9442 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9443 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9444 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9445 ;;      Totals:         2       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9446 ;;Total ram usage:       10 bytes
  9447 ;; Hardware stack levels used:    1
  9448 ;; Hardware stack levels required when called:    4
  9449 ;; This function calls:
  9450 ;;		Nothing
  9451 ;; This function is called by:
  9452 ;;		_Data_Toseg
  9453 ;;		_HEFLASH_checkData
  9454 ;; This function uses a non-reentrant model
  9455 ;;
  9456                           
  9457                           
  9458                           ;psect for function ___llmod
  9459  0E5D                     ___llmod:	
  9460                           
  9461                           ;incstack = 0
  9462                           ; Regs used in ___llmod: [wreg+status,2+status,0]
  9463  0E5D  0020               	movlb	0	; select bank0
  9464  0E5E  0823               	movf	___llmod@divisor+3,w
  9465  0E5F  0422               	iorwf	___llmod@divisor+2,w
  9466  0E60  0421               	iorwf	___llmod@divisor+1,w
  9467  0E61  0420               	iorwf	___llmod@divisor,w
  9468  0E62  1903               	skipnz
  9469  0E63  2E97               	goto	l2107
  9470  0E64  01F4               	clrf	___llmod@counter
  9471  0E65  0AF4               	incf	___llmod@counter,f
  9472  0E66                     l2097:	
  9473  0E66  1BA3               	btfsc	___llmod@divisor+3,7
  9474  0E67  2E74               	goto	l2099
  9475  0E68  3001               	movlw	1
  9476  0E69                     u1485:	
  9477  0E69  35A0               	lslf	___llmod@divisor,f
  9478  0E6A  0DA1               	rlf	___llmod@divisor+1,f
  9479  0E6B  0DA2               	rlf	___llmod@divisor+2,f
  9480  0E6C  0DA3               	rlf	___llmod@divisor+3,f
  9481  0E6D  0B89               	decfsz	9,f
  9482  0E6E  2E69               	goto	u1485
  9483  0E6F  3001               	movlw	1
  9484  0E70  00F3               	movwf	??___llmod
  9485  0E71  0873               	movf	??___llmod,w
  9486  0E72  07F4               	addwf	___llmod@counter,f
  9487  0E73  2E66               	goto	l2097
  9488  0E74                     l2099:	
  9489  0E74  0823               	movf	___llmod@divisor+3,w
  9490  0E75  0227               	subwf	___llmod@dividend+3,w
  9491  0E76  1D03               	skipz
  9492  0E77  2E82               	goto	u1505
  9493  0E78  0822               	movf	___llmod@divisor+2,w
  9494  0E79  0226               	subwf	___llmod@dividend+2,w
  9495  0E7A  1D03               	skipz
  9496  0E7B  2E82               	goto	u1505
  9497  0E7C  0821               	movf	___llmod@divisor+1,w
  9498  0E7D  0225               	subwf	___llmod@dividend+1,w
  9499  0E7E  1D03               	skipz
  9500  0E7F  2E82               	goto	u1505
  9501  0E80  0820               	movf	___llmod@divisor,w
  9502  0E81  0224               	subwf	___llmod@dividend,w
  9503  0E82                     u1505:	
  9504  0E82  1C03               	skipc
  9505  0E83  2E8C               	goto	l2103
  9506  0E84  0820               	movf	___llmod@divisor,w
  9507  0E85  02A4               	subwf	___llmod@dividend,f
  9508  0E86  0821               	movf	___llmod@divisor+1,w
  9509  0E87  3BA5               	subwfb	___llmod@dividend+1,f
  9510  0E88  0822               	movf	___llmod@divisor+2,w
  9511  0E89  3BA6               	subwfb	___llmod@dividend+2,f
  9512  0E8A  0823               	movf	___llmod@divisor+3,w
  9513  0E8B  3BA7               	subwfb	___llmod@dividend+3,f
  9514  0E8C                     l2103:	
  9515  0E8C  3001               	movlw	1
  9516  0E8D                     u1515:	
  9517  0E8D  36A3               	lsrf	___llmod@divisor+3,f
  9518  0E8E  0CA2               	rrf	___llmod@divisor+2,f
  9519  0E8F  0CA1               	rrf	___llmod@divisor+1,f
  9520  0E90  0CA0               	rrf	___llmod@divisor,f
  9521  0E91  0B89               	decfsz	9,f
  9522  0E92  2E8D               	goto	u1515
  9523  0E93  3001               	movlw	1
  9524  0E94  02F4               	subwf	___llmod@counter,f
  9525  0E95  1D03               	btfss	3,2
  9526  0E96  2E74               	goto	l2099
  9527  0E97                     l2107:	
  9528  0E97  0827               	movf	___llmod@dividend+3,w
  9529  0E98  00A3               	movwf	?___llmod+3
  9530  0E99  0826               	movf	___llmod@dividend+2,w
  9531  0E9A  00A2               	movwf	?___llmod+2
  9532  0E9B  0825               	movf	___llmod@dividend+1,w
  9533  0E9C  00A1               	movwf	?___llmod+1
  9534  0E9D  0824               	movf	___llmod@dividend,w
  9535  0E9E  00A0               	movwf	?___llmod
  9536  0E9F  0008               	return
  9537  0EA0                     __end_of___llmod:	
  9538                           
  9539                           	psect	text25
  9540  0EA0                     __ptext25:	
  9541 ;; *************** function ___lldiv *****************
  9542 ;; Defined at:
  9543 ;;		line 6 in file "C:\Program Files (x86)\Microchip\xc8\v1.45\sources\common\lldiv.c"
  9544 ;; Parameters:    Size  Location     Type
  9545 ;;  divisor         4    8[BANK0 ] unsigned long 
  9546 ;;  dividend        4   12[BANK0 ] unsigned long 
  9547 ;; Auto vars:     Size  Location     Type
  9548 ;;  quotient        4   16[BANK0 ] unsigned long 
  9549 ;;  counter         1   20[BANK0 ] unsigned char 
  9550 ;; Return value:  Size  Location     Type
  9551 ;;                  4    8[BANK0 ] unsigned long 
  9552 ;; Registers used:
  9553 ;;		wreg, status,2, status,0
  9554 ;; Tracked objects:
  9555 ;;		On entry : 0/0
  9556 ;;		On exit  : 0/0
  9557 ;;		Unchanged: 0/0
  9558 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9559 ;;      Params:         0       8       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9560 ;;      Locals:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9561 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9562 ;;      Totals:         1      13       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9563 ;;Total ram usage:       14 bytes
  9564 ;; Hardware stack levels used:    1
  9565 ;; Hardware stack levels required when called:    4
  9566 ;; This function calls:
  9567 ;;		Nothing
  9568 ;; This function is called by:
  9569 ;;		_Data_Toseg
  9570 ;;		_HEFLASH_checkData
  9571 ;; This function uses a non-reentrant model
  9572 ;;
  9573                           
  9574                           
  9575                           ;psect for function ___lldiv
  9576  0EA0                     ___lldiv:	
  9577                           
  9578                           ;incstack = 0
  9579                           ; Regs used in ___lldiv: [wreg+status,2+status,0]
  9580  0EA0  3000               	movlw	0
  9581  0EA1  0020               	movlb	0	; select bank0
  9582  0EA2  00B3               	movwf	___lldiv@quotient+3
  9583  0EA3  3000               	movlw	0
  9584  0EA4  00B2               	movwf	___lldiv@quotient+2
  9585  0EA5  3000               	movlw	0
  9586  0EA6  00B1               	movwf	___lldiv@quotient+1
  9587  0EA7  3000               	movlw	0
  9588  0EA8  00B0               	movwf	___lldiv@quotient
  9589  0EA9  082B               	movf	___lldiv@divisor+3,w
  9590  0EAA  042A               	iorwf	___lldiv@divisor+2,w
  9591  0EAB  0429               	iorwf	___lldiv@divisor+1,w
  9592  0EAC  0428               	iorwf	___lldiv@divisor,w
  9593  0EAD  1903               	skipnz
  9594  0EAE  2EEA               	goto	l2087
  9595  0EAF  01B4               	clrf	___lldiv@counter
  9596  0EB0  0AB4               	incf	___lldiv@counter,f
  9597  0EB1                     l2073:	
  9598  0EB1  1BAB               	btfsc	___lldiv@divisor+3,7
  9599  0EB2  2EBF               	goto	l2075
  9600  0EB3  3001               	movlw	1
  9601  0EB4                     u1415:	
  9602  0EB4  35A8               	lslf	___lldiv@divisor,f
  9603  0EB5  0DA9               	rlf	___lldiv@divisor+1,f
  9604  0EB6  0DAA               	rlf	___lldiv@divisor+2,f
  9605  0EB7  0DAB               	rlf	___lldiv@divisor+3,f
  9606  0EB8  0B89               	decfsz	9,f
  9607  0EB9  2EB4               	goto	u1415
  9608  0EBA  3001               	movlw	1
  9609  0EBB  00F5               	movwf	??___lldiv
  9610  0EBC  0875               	movf	??___lldiv,w
  9611  0EBD  07B4               	addwf	___lldiv@counter,f
  9612  0EBE  2EB1               	goto	l2073
  9613  0EBF                     l2075:	
  9614  0EBF  3001               	movlw	1
  9615  0EC0                     u1435:	
  9616  0EC0  35B0               	lslf	___lldiv@quotient,f
  9617  0EC1  0DB1               	rlf	___lldiv@quotient+1,f
  9618  0EC2  0DB2               	rlf	___lldiv@quotient+2,f
  9619  0EC3  0DB3               	rlf	___lldiv@quotient+3,f
  9620  0EC4  0B89               	decfsz	9,f
  9621  0EC5  2EC0               	goto	u1435
  9622  0EC6  082B               	movf	___lldiv@divisor+3,w
  9623  0EC7  022F               	subwf	___lldiv@dividend+3,w
  9624  0EC8  1D03               	skipz
  9625  0EC9  2ED4               	goto	u1445
  9626  0ECA  082A               	movf	___lldiv@divisor+2,w
  9627  0ECB  022E               	subwf	___lldiv@dividend+2,w
  9628  0ECC  1D03               	skipz
  9629  0ECD  2ED4               	goto	u1445
  9630  0ECE  0829               	movf	___lldiv@divisor+1,w
  9631  0ECF  022D               	subwf	___lldiv@dividend+1,w
  9632  0ED0  1D03               	skipz
  9633  0ED1  2ED4               	goto	u1445
  9634  0ED2  0828               	movf	___lldiv@divisor,w
  9635  0ED3  022C               	subwf	___lldiv@dividend,w
  9636  0ED4                     u1445:	
  9637  0ED4  1C03               	skipc
  9638  0ED5  2EDF               	goto	l2083
  9639  0ED6  0828               	movf	___lldiv@divisor,w
  9640  0ED7  02AC               	subwf	___lldiv@dividend,f
  9641  0ED8  0829               	movf	___lldiv@divisor+1,w
  9642  0ED9  3BAD               	subwfb	___lldiv@dividend+1,f
  9643  0EDA  082A               	movf	___lldiv@divisor+2,w
  9644  0EDB  3BAE               	subwfb	___lldiv@dividend+2,f
  9645  0EDC  082B               	movf	___lldiv@divisor+3,w
  9646  0EDD  3BAF               	subwfb	___lldiv@dividend+3,f
  9647  0EDE  1430               	bsf	___lldiv@quotient,0
  9648  0EDF                     l2083:	
  9649  0EDF  3001               	movlw	1
  9650  0EE0                     u1455:	
  9651  0EE0  36AB               	lsrf	___lldiv@divisor+3,f
  9652  0EE1  0CAA               	rrf	___lldiv@divisor+2,f
  9653  0EE2  0CA9               	rrf	___lldiv@divisor+1,f
  9654  0EE3  0CA8               	rrf	___lldiv@divisor,f
  9655  0EE4  0B89               	decfsz	9,f
  9656  0EE5  2EE0               	goto	u1455
  9657  0EE6  3001               	movlw	1
  9658  0EE7  02B4               	subwf	___lldiv@counter,f
  9659  0EE8  1D03               	btfss	3,2
  9660  0EE9  2EBF               	goto	l2075
  9661  0EEA                     l2087:	
  9662  0EEA  0833               	movf	___lldiv@quotient+3,w
  9663  0EEB  00AB               	movwf	?___lldiv+3
  9664  0EEC  0832               	movf	___lldiv@quotient+2,w
  9665  0EED  00AA               	movwf	?___lldiv+2
  9666  0EEE  0831               	movf	___lldiv@quotient+1,w
  9667  0EEF  00A9               	movwf	?___lldiv+1
  9668  0EF0  0830               	movf	___lldiv@quotient,w
  9669  0EF1  00A8               	movwf	?___lldiv
  9670  0EF2  0008               	return
  9671  0EF3                     __end_of___lldiv:	
  9672                           
  9673                           	psect	text26
  9674  0EF3                     __ptext26:	
  9675 ;; *************** function _HEFLASH_writeBlock *****************
  9676 ;; Defined at:
  9677 ;;		line 17 in file "HEFlash.c"
  9678 ;; Parameters:    Size  Location     Type
  9679 ;;  radd            1    wreg     unsigned char 
  9680 ;;  data            1    5[BANK0 ] PTR unsigned char 
  9681 ;;		 -> HEFBufferData(32), 
  9682 ;;  count           1    6[BANK0 ] unsigned char 
  9683 ;; Auto vars:     Size  Location     Type
  9684 ;;  radd            1    9[BANK0 ] unsigned char 
  9685 ;;  add             2   10[BANK0 ] unsigned int 
  9686 ;; Return value:  Size  Location     Type
  9687 ;;                  1    wreg      unsigned char 
  9688 ;; Registers used:
  9689 ;;		wreg, fsr1l, fsr1h, status,2, status,0, pclath, cstack
  9690 ;; Tracked objects:
  9691 ;;		On entry : 0/0
  9692 ;;		On exit  : 0/0
  9693 ;;		Unchanged: 0/0
  9694 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9695 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9696 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9697 ;;      Temps:          0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9698 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9699 ;;Total ram usage:        7 bytes
  9700 ;; Hardware stack levels used:    1
  9701 ;; Hardware stack levels required when called:    6
  9702 ;; This function calls:
  9703 ;;		_FLASH_erase
  9704 ;;		_FLASH_write
  9705 ;; This function is called by:
  9706 ;;		_Data_Toseg
  9707 ;;		_HEFLASH_checkData
  9708 ;;		_main
  9709 ;; This function uses a non-reentrant model
  9710 ;;
  9711                           
  9712                           
  9713                           ;psect for function _HEFLASH_writeBlock
  9714  0EF3                     _HEFLASH_writeBlock:	
  9715                           
  9716                           ;incstack = 0
  9717                           ; Regs used in _HEFLASH_writeBlock: [wreg+fsr1l+fsr1h+status,2+status,0+pclath+cstack]
  9718                           ;HEFLASH_writeBlock@radd stored from wreg
  9719  0EF3  0020               	movlb	0	; select bank0
  9720  0EF4  00A9               	movwf	HEFLASH_writeBlock@radd
  9721                           
  9722                           ;HEFlash.c: 20: unsigned add = radd * 32 + 0x1F80;
  9723  0EF5  0829               	movf	HEFLASH_writeBlock@radd,w
  9724  0EF6  00A7               	movwf	??_HEFLASH_writeBlock
  9725  0EF7  01A8               	clrf	??_HEFLASH_writeBlock+1
  9726  0EF8  3005               	movlw	5
  9727  0EF9                     u1315:	
  9728  0EF9  35A7               	lslf	??_HEFLASH_writeBlock,f
  9729  0EFA  0DA8               	rlf	??_HEFLASH_writeBlock+1,f
  9730  0EFB  0B89               	decfsz	9,f
  9731  0EFC  2EF9               	goto	u1315
  9732  0EFD  0827               	movf	??_HEFLASH_writeBlock,w
  9733  0EFE  3E80               	addlw	128
  9734  0EFF  00AA               	movwf	HEFLASH_writeBlock@add
  9735  0F00  301F               	movlw	31
  9736  0F01  3D28               	addwfc	??_HEFLASH_writeBlock+1,w
  9737  0F02  00AB               	movwf	HEFLASH_writeBlock@add+1
  9738                           
  9739                           ;HEFlash.c: 23: if ( ( count > 32) || (radd >= (0x1FFF-0x1F80+1)/32))
  9740  0F03  3021               	movlw	33
  9741  0F04  0226               	subwf	HEFLASH_writeBlock@count,w
  9742  0F05  1803               	skipnc
  9743  0F06  0008               	return
  9744  0F07  3004               	movlw	4
  9745  0F08  0229               	subwf	HEFLASH_writeBlock@radd,w
  9746  0F09  1803               	btfsc	3,0
  9747  0F0A  0008               	return
  9748                           
  9749                           ;HEFlash.c: 27: FLASH_erase( add);
  9750                           
  9751                           ;HEFlash.c: 24: return -1;
  9752                           ;	Return value of _HEFLASH_writeBlock is never used
  9753  0F0B  082B               	movf	HEFLASH_writeBlock@add+1,w
  9754  0F0C  00F4               	movwf	FLASH_erase@address+1
  9755  0F0D  082A               	movf	HEFLASH_writeBlock@add,w
  9756  0F0E  00F3               	movwf	FLASH_erase@address
  9757  0F0F  318C  2478  318E   	fcall	_FLASH_erase
  9758  0F12                     l2027:	
  9759                           ;HEFlash.c: 30: while( count > 1)
  9760                           
  9761  0F12  3002               	movlw	2
  9762  0F13  0020               	movlb	0	; select bank0
  9763  0F14  0226               	subwf	HEFLASH_writeBlock@count,w
  9764  0F15  1C03               	btfss	3,0
  9765  0F16  2F37               	goto	l2029
  9766                           
  9767                           ;HEFlash.c: 31: {
  9768                           ;HEFlash.c: 33: FLASH_write( add++, (unsigned) *data++, 1);
  9769  0F17  0020               	movlb	0	; select bank0
  9770  0F18  082B               	movf	HEFLASH_writeBlock@add+1,w
  9771  0F19  00A1               	movwf	FLASH_write@address+1
  9772  0F1A  082A               	movf	HEFLASH_writeBlock@add,w
  9773  0F1B  00A0               	movwf	FLASH_write@address
  9774  0F1C  0825               	movf	HEFLASH_writeBlock@data,w
  9775  0F1D  0086               	movwf	6
  9776  0F1E  0187               	clrf	7
  9777  0F1F  0801               	movf	1,w
  9778  0F20  00A7               	movwf	??_HEFLASH_writeBlock
  9779  0F21  01A8               	clrf	??_HEFLASH_writeBlock+1
  9780  0F22  0827               	movf	??_HEFLASH_writeBlock,w
  9781  0F23  00A2               	movwf	FLASH_write@data
  9782  0F24  0828               	movf	??_HEFLASH_writeBlock+1,w
  9783  0F25  00A3               	movwf	FLASH_write@data+1
  9784  0F26  01A4               	clrf	FLASH_write@latch
  9785  0F27  0AA4               	incf	FLASH_write@latch,f
  9786  0F28  318D  25C9  318E   	fcall	_FLASH_write
  9787  0F2B  3001               	movlw	1
  9788  0F2C  0020               	movlb	0	; select bank0
  9789  0F2D  00A7               	movwf	??_HEFLASH_writeBlock
  9790  0F2E  0827               	movf	??_HEFLASH_writeBlock,w
  9791  0F2F  07A5               	addwf	HEFLASH_writeBlock@data,f
  9792  0F30  3001               	movlw	1
  9793  0F31  07AA               	addwf	HEFLASH_writeBlock@add,f
  9794  0F32  3000               	movlw	0
  9795  0F33  3DAB               	addwfc	HEFLASH_writeBlock@add+1,f
  9796                           
  9797                           ;HEFlash.c: 34: count--;
  9798  0F34  3001               	movlw	1
  9799  0F35  02A6               	subwf	HEFLASH_writeBlock@count,f
  9800  0F36  2F12               	goto	l2027
  9801  0F37                     l2029:	
  9802                           
  9803                           ;HEFlash.c: 35: }
  9804                           ;HEFlash.c: 39: FLASH_write( add, (unsigned) *data, 0);
  9805  0F37  082B               	movf	HEFLASH_writeBlock@add+1,w
  9806  0F38  00A1               	movwf	FLASH_write@address+1
  9807  0F39  082A               	movf	HEFLASH_writeBlock@add,w
  9808  0F3A  00A0               	movwf	FLASH_write@address
  9809  0F3B  0825               	movf	HEFLASH_writeBlock@data,w
  9810  0F3C  0086               	movwf	6
  9811  0F3D  0187               	clrf	7
  9812  0F3E  0801               	movf	1,w
  9813  0F3F  00A7               	movwf	??_HEFLASH_writeBlock
  9814  0F40  01A8               	clrf	??_HEFLASH_writeBlock+1
  9815  0F41  0827               	movf	??_HEFLASH_writeBlock,w
  9816  0F42  00A2               	movwf	FLASH_write@data
  9817  0F43  0828               	movf	??_HEFLASH_writeBlock+1,w
  9818  0F44  00A3               	movwf	FLASH_write@data+1
  9819  0F45  01A4               	clrf	FLASH_write@latch
  9820  0F46  318D  25C9         	fcall	_FLASH_write
  9821                           
  9822                           ;HEFlash.c: 44: return PMCON1bits.WRERR;
  9823                           ;	Return value of _HEFLASH_writeBlock is never used
  9824  0F48  0023               	movlb	3	; select bank3
  9825  0F49  0815               	movf	21,w	;volatile
  9826  0F4A  0008               	return
  9827  0F4B                     __end_of_HEFLASH_writeBlock:	
  9828                           
  9829                           	psect	text27
  9830  0DC9                     __ptext27:	
  9831 ;; *************** function _FLASH_write *****************
  9832 ;; Defined at:
  9833 ;;		line 73 in file "Flash.c"
  9834 ;; Parameters:    Size  Location     Type
  9835 ;;  address         2    0[BANK0 ] unsigned int 
  9836 ;;  data            2    2[BANK0 ] unsigned int 
  9837 ;;  latch           1    4[BANK0 ] unsigned char 
  9838 ;; Auto vars:     Size  Location     Type
  9839 ;;  temp            1    3[COMMON] unsigned char 
  9840 ;; Return value:  Size  Location     Type
  9841 ;;                  1    wreg      void 
  9842 ;; Registers used:
  9843 ;;		wreg, status,2, status,0, pclath, cstack
  9844 ;; Tracked objects:
  9845 ;;		On entry : 0/0
  9846 ;;		On exit  : 0/0
  9847 ;;		Unchanged: 0/0
  9848 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9849 ;;      Params:         0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9850 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9851 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9852 ;;      Totals:         1       5       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9853 ;;Total ram usage:        6 bytes
  9854 ;; Hardware stack levels used:    1
  9855 ;; Hardware stack levels required when called:    5
  9856 ;; This function calls:
  9857 ;;		__unlock
  9858 ;; This function is called by:
  9859 ;;		_HEFLASH_writeBlock
  9860 ;; This function uses a non-reentrant model
  9861 ;;
  9862                           
  9863                           
  9864                           ;psect for function _FLASH_write
  9865  0DC9                     _FLASH_write:	
  9866                           
  9867                           ;Flash.c: 76: char temp = INTCONbits.GIE;
  9868                           
  9869                           ;incstack = 0
  9870                           ; Regs used in _FLASH_write: [wreg+status,2+status,0+pclath+cstack]
  9871  0DC9  3000               	movlw	0
  9872  0DCA  1B8B               	btfsc	11,7	;volatile
  9873  0DCB  3001               	movlw	1
  9874  0DCC  00F3               	movwf	FLASH_write@temp
  9875                           
  9876                           ;Flash.c: 77: INTCONbits.GIE = 0;
  9877  0DCD  138B               	bcf	11,7	;volatile
  9878                           
  9879                           ;Flash.c: 80: PMADR = address;
  9880  0DCE  0020               	movlb	0	; select bank0
  9881  0DCF  0821               	movf	FLASH_write@address+1,w
  9882  0DD0  0023               	movlb	3	; select bank3
  9883  0DD1  0092               	movwf	18	;volatile
  9884  0DD2  0020               	movlb	0	; select bank0
  9885  0DD3  0820               	movf	FLASH_write@address,w
  9886  0DD4  0023               	movlb	3	; select bank3
  9887  0DD5  0091               	movwf	17	;volatile
  9888                           
  9889                           ;Flash.c: 81: PMDAT = data;
  9890  0DD6  0020               	movlb	0	; select bank0
  9891  0DD7  0823               	movf	FLASH_write@data+1,w
  9892  0DD8  0023               	movlb	3	; select bank3
  9893  0DD9  0094               	movwf	20	;volatile
  9894  0DDA  0020               	movlb	0	; select bank0
  9895  0DDB  0822               	movf	FLASH_write@data,w
  9896  0DDC  0023               	movlb	3	; select bank3
  9897  0DDD  0093               	movwf	19	;volatile
  9898                           
  9899                           ;Flash.c: 82: PMCON1bits.LWLO = latch;
  9900  0DDE  0020               	movlb	0	; select bank0
  9901  0DDF  0C24               	rrf	FLASH_write@latch,w
  9902  0DE0  0023               	movlb	3	; select bank3
  9903  0DE1  1C03               	skipc
  9904  0DE2  1295               	bcf	21,5	;volatile
  9905  0DE3  1803               	skipnc
  9906  0DE4  1695               	bsf	21,5	;volatile
  9907                           
  9908                           ;Flash.c: 83: PMCON1bits.CFGS = 0;
  9909  0DE5  1315               	bcf	21,6	;volatile
  9910                           
  9911                           ;Flash.c: 84: PMCON1bits.FREE = 0;
  9912  0DE6  1215               	bcf	21,4	;volatile
  9913                           
  9914                           ;Flash.c: 85: PMCON1bits.WREN = 1;
  9915  0DE7  1515               	bsf	21,2	;volatile
  9916                           
  9917                           ;Flash.c: 88: _unlock();
  9918  0DE8  318B  23DF  318D   	fcall	__unlock
  9919                           
  9920                           ;Flash.c: 91: if ( temp)
  9921  0DEB  0873               	movf	FLASH_write@temp,w
  9922  0DEC  1903               	btfsc	3,2
  9923  0DED  0008               	return
  9924                           
  9925                           ;Flash.c: 92: INTCONbits.GIE = 1;
  9926  0DEE  178B               	bsf	11,7	;volatile
  9927  0DEF  0008               	return
  9928  0DF0                     __end_of_FLASH_write:	
  9929                           
  9930                           	psect	text28
  9931  0C78                     __ptext28:	
  9932 ;; *************** function _FLASH_erase *****************
  9933 ;; Defined at:
  9934 ;;		line 97 in file "Flash.c"
  9935 ;; Parameters:    Size  Location     Type
  9936 ;;  address         2    3[COMMON] unsigned int 
  9937 ;; Auto vars:     Size  Location     Type
  9938 ;;  temp            1    5[COMMON] unsigned char 
  9939 ;; Return value:  Size  Location     Type
  9940 ;;                  1    wreg      void 
  9941 ;; Registers used:
  9942 ;;		wreg, status,2, status,0, pclath, cstack
  9943 ;; Tracked objects:
  9944 ;;		On entry : 0/0
  9945 ;;		On exit  : 0/0
  9946 ;;		Unchanged: 0/0
  9947 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
  9948 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9949 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9950 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9951 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
  9952 ;;Total ram usage:        3 bytes
  9953 ;; Hardware stack levels used:    1
  9954 ;; Hardware stack levels required when called:    5
  9955 ;; This function calls:
  9956 ;;		__unlock
  9957 ;; This function is called by:
  9958 ;;		_HEFLASH_writeBlock
  9959 ;; This function uses a non-reentrant model
  9960 ;;
  9961                           
  9962                           
  9963                           ;psect for function _FLASH_erase
  9964  0C78                     _FLASH_erase:	
  9965                           
  9966                           ;Flash.c: 100: char temp = INTCONbits.GIE;
  9967                           
  9968                           ;incstack = 0
  9969                           ; Regs used in _FLASH_erase: [wreg+status,2+status,0+pclath+cstack]
  9970  0C78  3000               	movlw	0
  9971  0C79  1B8B               	btfsc	11,7	;volatile
  9972  0C7A  3001               	movlw	1
  9973  0C7B  00F5               	movwf	FLASH_erase@temp
  9974                           
  9975                           ;Flash.c: 101: INTCONbits.GIE = 0;
  9976  0C7C  138B               	bcf	11,7	;volatile
  9977                           
  9978                           ;Flash.c: 105: PMADR = address;
  9979  0C7D  0874               	movf	FLASH_erase@address+1,w
  9980  0C7E  0023               	movlb	3	; select bank3
  9981  0C7F  0092               	movwf	18	;volatile
  9982  0C80  0873               	movf	FLASH_erase@address,w
  9983  0C81  0091               	movwf	17	;volatile
  9984                           
  9985                           ;Flash.c: 106: PMCON1bits.CFGS = 0;
  9986  0C82  1315               	bcf	21,6	;volatile
  9987                           
  9988                           ;Flash.c: 107: PMCON1bits.FREE = 1;
  9989  0C83  1615               	bsf	21,4	;volatile
  9990                           
  9991                           ;Flash.c: 108: PMCON1bits.WREN = 1;
  9992  0C84  1515               	bsf	21,2	;volatile
  9993                           
  9994                           ;Flash.c: 111: _unlock();
  9995  0C85  318B  23DF  318C   	fcall	__unlock
  9996                           
  9997                           ;Flash.c: 114: PMCON1bits.WREN = 0;
  9998  0C88  0023               	movlb	3	; select bank3
  9999  0C89  1115               	bcf	21,2	;volatile
 10000                           
 10001                           ;Flash.c: 115: if ( temp)
 10002  0C8A  0875               	movf	FLASH_erase@temp,w
 10003  0C8B  1903               	btfsc	3,2
 10004  0C8C  0008               	return
 10005                           
 10006                           ;Flash.c: 116: INTCONbits.GIE = 1;
 10007  0C8D  178B               	bsf	11,7	;volatile
 10008  0C8E  0008               	return
 10009  0C8F                     __end_of_FLASH_erase:	
 10010                           
 10011                           	psect	text29
 10012  0BDF                     __ptext29:	
 10013 ;; *************** function __unlock *****************
 10014 ;; Defined at:
 10015 ;;		line 58 in file "Flash.c"
 10016 ;; Parameters:    Size  Location     Type
 10017 ;;		None
 10018 ;; Auto vars:     Size  Location     Type
 10019 ;;		None
 10020 ;; Return value:  Size  Location     Type
 10021 ;;                  1    wreg      void 
 10022 ;; Registers used:
 10023 ;;		None
 10024 ;; Tracked objects:
 10025 ;;		On entry : 0/0
 10026 ;;		On exit  : 0/0
 10027 ;;		Unchanged: 0/0
 10028 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10029 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10030 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10031 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10032 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10033 ;;Total ram usage:        0 bytes
 10034 ;; Hardware stack levels used:    1
 10035 ;; Hardware stack levels required when called:    4
 10036 ;; This function calls:
 10037 ;;		Nothing
 10038 ;; This function is called by:
 10039 ;;		_FLASH_write
 10040 ;;		_FLASH_erase
 10041 ;; This function uses a non-reentrant model
 10042 ;;
 10043                           
 10044                           
 10045                           ;psect for function __unlock
 10046  0BDF                     __unlock:	
 10047                           
 10048                           ;incstack = 0
 10049                           ; Regs used in __unlock: []
 10050  0BDF  0023               	banksel	406	;# 
 10051  0BE0  3055               	movlw	85	;# 
 10052  0BE1  0096               	movwf	22	;# 
 10053  0BE2  30AA               	movlw	170	;# 
 10054  0BE3  0096               	movwf	22	;# 
 10055  0BE4  1495               	bsf	21,1	; set WR bit ;# 
 10056  0BE5  0000               	nop	;# 
 10057  0BE6  0000               	nop	;# 
 10058  0BE7  0008               	return
 10059  0BE8                     __end_of__unlock:	
 10060                           
 10061                           	psect	intentry
 10062  0004                     __pintentry:	
 10063 ;; *************** function _INTERRUPT_InterruptManager *****************
 10064 ;; Defined at:
 10065 ;;		line 52 in file "mcc_generated_files/interrupt_manager.c"
 10066 ;; Parameters:    Size  Location     Type
 10067 ;;		None
 10068 ;; Auto vars:     Size  Location     Type
 10069 ;;		None
 10070 ;; Return value:  Size  Location     Type
 10071 ;;                  1    wreg      void 
 10072 ;; Registers used:
 10073 ;;		wreg, status,2, status,0, pclath, cstack
 10074 ;; Tracked objects:
 10075 ;;		On entry : 0/0
 10076 ;;		On exit  : 0/0
 10077 ;;		Unchanged: 0/0
 10078 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10079 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10080 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10081 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10082 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10083 ;;Total ram usage:        1 bytes
 10084 ;; Hardware stack levels used:    1
 10085 ;; Hardware stack levels required when called:    3
 10086 ;; This function calls:
 10087 ;;		_INT_ISR
 10088 ;;		_PIN_MANAGER_IOC
 10089 ;;		_TMR0_ISR
 10090 ;;		_TMR1_ISR
 10091 ;;		_TMR3_ISR
 10092 ;; This function is called by:
 10093 ;;		Interrupt level 1
 10094 ;; This function uses a non-reentrant model
 10095 ;;
 10096                           
 10097  0004                     _INTERRUPT_InterruptManager:	
 10098                           
 10099                           ;incstack = 0
 10100  0004  147E               	bsf	126,0	;set compiler interrupt flag (level 1)
 10101                           
 10102                           ; Regs used in _INTERRUPT_InterruptManager: [wreg+status,2+status,0+pclath+cstack]
 10103  0005  3180               	pagesel	$
 10104  0006  0020               	movlb	0	; select bank0
 10105  0007  087F               	movf	127,w
 10106  0008  00F2               	movwf	??_INTERRUPT_InterruptManager
 10107                           
 10108                           ;interrupt_manager.c: 55: if(INTCONbits.TMR0IE == 1 && INTCONbits.TMR0IF == 1)
 10109  0009  1A8B               	btfsc	11,5	;volatile
 10110  000A  1D0B               	btfss	11,2	;volatile
 10111  000B  2810               	goto	i1l162
 10112                           
 10113                           ;interrupt_manager.c: 56: {
 10114                           ;interrupt_manager.c: 57: TMR0_ISR();
 10115  000C  318B  23CA  3180   	fcall	_TMR0_ISR
 10116                           
 10117                           ;interrupt_manager.c: 58: }
 10118  000F  2832               	goto	i1l174
 10119  0010                     i1l162:	
 10120                           
 10121                           ;interrupt_manager.c: 59: else if(INTCONbits.INTE == 1 && INTCONbits.INTF == 1)
 10122  0010  1A0B               	btfsc	11,4	;volatile
 10123  0011  1C8B               	btfss	11,1	;volatile
 10124  0012  2817               	goto	i1l164
 10125                           
 10126                           ;interrupt_manager.c: 60: {
 10127                           ;interrupt_manager.c: 61: INT_ISR();
 10128  0013  318B  23A2  3180   	fcall	_INT_ISR
 10129                           
 10130                           ;interrupt_manager.c: 62: }
 10131  0016  2832               	goto	i1l174
 10132  0017                     i1l164:	
 10133                           
 10134                           ;interrupt_manager.c: 63: else if(INTCONbits.IOCIE == 1 && INTCONbits.IOCIF == 1)
 10135  0017  198B               	btfsc	11,3	;volatile
 10136  0018  1C0B               	btfss	11,0	;volatile
 10137  0019  281E               	goto	i1l166
 10138                           
 10139                           ;interrupt_manager.c: 64: {
 10140                           ;interrupt_manager.c: 65: PIN_MANAGER_IOC();
 10141  001A  318B  239F  3180   	fcall	_PIN_MANAGER_IOC
 10142                           
 10143                           ;interrupt_manager.c: 66: }
 10144  001D  2832               	goto	i1l174
 10145  001E                     i1l166:	
 10146                           
 10147                           ;interrupt_manager.c: 67: else if(INTCONbits.PEIE == 1)
 10148  001E  1F0B               	btfss	11,6	;volatile
 10149  001F  2832               	goto	i1l174
 10150                           
 10151                           ;interrupt_manager.c: 68: {
 10152                           ;interrupt_manager.c: 69: if(PIE5bits.TMR3IE == 1 && PIR5bits.TMR3IF == 1)
 10153  0020  0021               	movlb	1	; select bank1
 10154  0021  1F14               	btfss	20,6	;volatile
 10155  0022  282A               	goto	i1l169
 10156  0023  0020               	movlb	0	; select bank0
 10157  0024  1F14               	btfss	20,6	;volatile
 10158  0025  282A               	goto	i1l169
 10159                           
 10160                           ;interrupt_manager.c: 70: {
 10161                           ;interrupt_manager.c: 71: TMR3_ISR();
 10162  0026  318C  240A  3180   	fcall	_TMR3_ISR
 10163                           
 10164                           ;interrupt_manager.c: 72: }
 10165  0029  2832               	goto	i1l174
 10166  002A                     i1l169:	
 10167                           
 10168                           ;interrupt_manager.c: 73: else if(PIE1bits.TMR1IE == 1 && PIR1bits.TMR1IF == 1)
 10169  002A  0021               	movlb	1	; select bank1
 10170  002B  1C10               	btfss	16,0	;volatile
 10171  002C  2832               	goto	i1l174
 10172  002D  0020               	movlb	0	; select bank0
 10173  002E  1C10               	btfss	16,0	;volatile
 10174  002F  2832               	goto	i1l174
 10175                           
 10176                           ;interrupt_manager.c: 74: {
 10177                           ;interrupt_manager.c: 75: TMR1_ISR();
 10178  0030  318B  23FE         	fcall	_TMR1_ISR
 10179  0032                     i1l174:	
 10180                           ;interrupt_manager.c: 82: else
 10181                           ;interrupt_manager.c: 83: {
 10182                           
 10183                           ;interrupt_manager.c: 80: }
 10184                           ;interrupt_manager.c: 81: }
 10185                           
 10186                           ;interrupt_manager.c: 77: else
 10187                           ;interrupt_manager.c: 78: {
 10188                           
 10189                           ;interrupt_manager.c: 76: }
 10190                           
 10191  0032  0872               	movf	??_INTERRUPT_InterruptManager,w
 10192  0033  0020               	movlb	0	; select bank0
 10193  0034  00FF               	movwf	127
 10194  0035  107E               	bcf	126,0	;clear compiler interrupt flag (level 1)
 10195  0036  0009               	retfie
 10196  0037                     __end_of_INTERRUPT_InterruptManager:	
 10197                           
 10198                           	psect	text31
 10199  0C0A                     __ptext31:	
 10200 ;; *************** function _TMR3_ISR *****************
 10201 ;; Defined at:
 10202 ;;		line 160 in file "mcc_generated_files/tmr3.c"
 10203 ;; Parameters:    Size  Location     Type
 10204 ;;		None
 10205 ;; Auto vars:     Size  Location     Type
 10206 ;;		None
 10207 ;; Return value:  Size  Location     Type
 10208 ;;                  1    wreg      void 
 10209 ;; Registers used:
 10210 ;;		wreg, status,2, status,0, pclath, cstack
 10211 ;; Tracked objects:
 10212 ;;		On entry : 0/0
 10213 ;;		On exit  : 0/0
 10214 ;;		Unchanged: 0/0
 10215 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10216 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10217 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10218 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10219 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10220 ;;Total ram usage:        0 bytes
 10221 ;; Hardware stack levels used:    1
 10222 ;; Hardware stack levels required when called:    2
 10223 ;; This function calls:
 10224 ;;		_TMR3_CallBack
 10225 ;;		_TMR3_WriteTimer
 10226 ;; This function is called by:
 10227 ;;		_INTERRUPT_InterruptManager
 10228 ;; This function uses a non-reentrant model
 10229 ;;
 10230                           
 10231                           
 10232                           ;psect for function _TMR3_ISR
 10233  0C0A                     _TMR3_ISR:	
 10234                           
 10235                           ;tmr3.c: 164: PIR5bits.TMR3IF = 0;
 10236                           
 10237                           ;incstack = 0
 10238                           ; Regs used in _TMR3_ISR: [wreg+status,2+status,0+pclath+cstack]
 10239  0C0A  0020               	movlb	0	; select bank0
 10240  0C0B  1314               	bcf	20,6	;volatile
 10241                           
 10242                           ;tmr3.c: 165: TMR3_WriteTimer(timer3ReloadVal);
 10243  0C0C  0861               	movf	_timer3ReloadVal+1,w	;volatile
 10244  0C0D  00F1               	movwf	TMR3_WriteTimer@timerVal+1
 10245  0C0E  0860               	movf	_timer3ReloadVal,w	;volatile
 10246  0C0F  00F0               	movwf	TMR3_WriteTimer@timerVal
 10247  0C10  318C  2433  318C   	fcall	_TMR3_WriteTimer
 10248                           
 10249                           ;tmr3.c: 169: TMR3_CallBack();
 10250  0C13  318C  2416         	fcall	_TMR3_CallBack
 10251  0C15  0008               	return
 10252  0C16                     __end_of_TMR3_ISR:	
 10253                           
 10254                           	psect	text32
 10255  0C33                     __ptext32:	
 10256 ;; *************** function _TMR3_WriteTimer *****************
 10257 ;; Defined at:
 10258 ;;		line 123 in file "mcc_generated_files/tmr3.c"
 10259 ;; Parameters:    Size  Location     Type
 10260 ;;  timerVal        2    0[COMMON] unsigned int 
 10261 ;; Auto vars:     Size  Location     Type
 10262 ;;		None
 10263 ;; Return value:  Size  Location     Type
 10264 ;;                  1    wreg      void 
 10265 ;; Registers used:
 10266 ;;		wreg, status,2
 10267 ;; Tracked objects:
 10268 ;;		On entry : 0/0
 10269 ;;		On exit  : 0/0
 10270 ;;		Unchanged: 0/0
 10271 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10272 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10273 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10274 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10275 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10276 ;;Total ram usage:        2 bytes
 10277 ;; Hardware stack levels used:    1
 10278 ;; This function calls:
 10279 ;;		Nothing
 10280 ;; This function is called by:
 10281 ;;		_TMR3_ISR
 10282 ;;		_TMR3_Reload
 10283 ;; This function uses a non-reentrant model
 10284 ;;
 10285                           
 10286                           
 10287                           ;psect for function _TMR3_WriteTimer
 10288  0C33                     _TMR3_WriteTimer:	
 10289                           
 10290                           ;tmr3.c: 125: if (T3CONbits.T3SYNC == 1)
 10291                           
 10292                           ;incstack = 0
 10293                           ; Regs used in _TMR3_WriteTimer: [wreg+status,2]
 10294  0C33  0029               	movlb	9	; select bank9
 10295  0C34  1D15               	btfss	21,2	;volatile
 10296  0C35  2C3D               	goto	i1l1965
 10297                           
 10298                           ;tmr3.c: 126: {
 10299                           ;tmr3.c: 128: T3CONbits.TMR3ON = 0;
 10300  0C36  1015               	bcf	21,0	;volatile
 10301                           
 10302                           ;tmr3.c: 131: TMR3H = (timerVal >> 8);
 10303  0C37  0871               	movf	TMR3_WriteTimer@timerVal+1,w
 10304  0C38  0094               	movwf	20	;volatile
 10305                           
 10306                           ;tmr3.c: 132: TMR3L = timerVal;
 10307  0C39  0870               	movf	TMR3_WriteTimer@timerVal,w
 10308  0C3A  0093               	movwf	19	;volatile
 10309                           
 10310                           ;tmr3.c: 135: T3CONbits.TMR3ON =1;
 10311  0C3B  1415               	bsf	21,0	;volatile
 10312                           
 10313                           ;tmr3.c: 136: }
 10314  0C3C  0008               	return
 10315  0C3D                     i1l1965:	
 10316                           
 10317                           ;tmr3.c: 137: else
 10318                           ;tmr3.c: 138: {
 10319                           ;tmr3.c: 140: TMR3H = (timerVal >> 8);
 10320  0C3D  0871               	movf	TMR3_WriteTimer@timerVal+1,w
 10321  0C3E  0094               	movwf	20	;volatile
 10322                           
 10323                           ;tmr3.c: 141: TMR3L = timerVal;
 10324  0C3F  0870               	movf	TMR3_WriteTimer@timerVal,w
 10325  0C40  0093               	movwf	19	;volatile
 10326  0C41  0008               	return
 10327  0C42                     __end_of_TMR3_WriteTimer:	
 10328                           
 10329                           	psect	text33
 10330  0C16                     __ptext33:	
 10331 ;; *************** function _TMR3_CallBack *****************
 10332 ;; Defined at:
 10333 ;;		line 172 in file "mcc_generated_files/tmr3.c"
 10334 ;; Parameters:    Size  Location     Type
 10335 ;;		None
 10336 ;; Auto vars:     Size  Location     Type
 10337 ;;		None
 10338 ;; Return value:  Size  Location     Type
 10339 ;;                  1    wreg      void 
 10340 ;; Registers used:
 10341 ;;		wreg, status,2, status,0, pclath, cstack
 10342 ;; Tracked objects:
 10343 ;;		On entry : 0/0
 10344 ;;		On exit  : 0/0
 10345 ;;		Unchanged: 0/0
 10346 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10347 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10348 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10349 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10350 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10351 ;;Total ram usage:        0 bytes
 10352 ;; Hardware stack levels used:    1
 10353 ;; Hardware stack levels required when called:    1
 10354 ;; This function calls:
 10355 ;;		Absolute function
 10356 ;;		_TMR3_DefaultInterruptHandler
 10357 ;;		_bsp_TimerInterruptISRCallback
 10358 ;; This function is called by:
 10359 ;;		_TMR3_ISR
 10360 ;; This function uses a non-reentrant model
 10361 ;;
 10362                           
 10363                           
 10364                           ;psect for function _TMR3_CallBack
 10365  0C16                     _TMR3_CallBack:	
 10366                           
 10367                           ;tmr3.c: 175: bsp_TimerInterruptISRCallback();
 10368                           
 10369                           ;incstack = 0
 10370                           ; Regs used in _TMR3_CallBack: [wreg+status,2+status,0+pclath+cstack]
 10371  0C16  3186  268E  318C   	fcall	_bsp_TimerInterruptISRCallback
 10372                           
 10373                           ;tmr3.c: 176: if(TMR3_InterruptHandler)
 10374  0C19  0020               	movlb	0	; select bank0
 10375  0C1A  085E               	movf	_TMR3_InterruptHandler,w
 10376  0C1B  045F               	iorwf	_TMR3_InterruptHandler+1,w
 10377  0C1C  1903               	btfsc	3,2
 10378  0C1D  0008               	return
 10379                           
 10380                           ;tmr3.c: 177: {
 10381                           ;tmr3.c: 178: TMR3_InterruptHandler();
 10382  0C1E  085F               	movf	_TMR3_InterruptHandler+1,w
 10383  0C1F  008A               	movwf	10
 10384  0C20  085E               	movf	_TMR3_InterruptHandler,w
 10385  0C21  000A               	callw
 10386  0C22  318C               	pagesel	$
 10387  0C23  0008               	return
 10388  0C24                     __end_of_TMR3_CallBack:	
 10389                           
 10390                           	psect	text34
 10391  068E                     __ptext34:	
 10392 ;; *************** function _bsp_TimerInterruptISRCallback *****************
 10393 ;; Defined at:
 10394 ;;		line 37 in file "bsp_counter.c"
 10395 ;; Parameters:    Size  Location     Type
 10396 ;;		None
 10397 ;; Auto vars:     Size  Location     Type
 10398 ;;		None
 10399 ;; Return value:  Size  Location     Type
 10400 ;;                  1    wreg      void 
 10401 ;; Registers used:
 10402 ;;		wreg, status,2, status,0
 10403 ;; Tracked objects:
 10404 ;;		On entry : 0/0
 10405 ;;		On exit  : 0/0
 10406 ;;		Unchanged: 0/0
 10407 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10408 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10409 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10410 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10411 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10412 ;;Total ram usage:        0 bytes
 10413 ;; Hardware stack levels used:    1
 10414 ;; This function calls:
 10415 ;;		Nothing
 10416 ;; This function is called by:
 10417 ;;		_TMR3_CallBack
 10418 ;; This function uses a non-reentrant model
 10419 ;;
 10420                           
 10421                           
 10422                           ;psect for function _bsp_TimerInterruptISRCallback
 10423  068E                     _bsp_TimerInterruptISRCallback:	
 10424                           
 10425                           ;bsp_counter.c: 39: if(0 == gBoxCntStruct.TimeCntStartFlag && 0 == gBoxCntStruct.TimeCnt
      +                          EndFlag)
 10426                           
 10427                           ;incstack = 0
 10428                           ; Regs used in _bsp_TimerInterruptISRCallback: [wreg+status,2+status,0]
 10429  068E  0020               	movlb	0	; select bank0
 10430  068F  0842               	movf	_gBoxCntStruct,w
 10431  0690  1903               	btfsc	3,2
 10432  0691  0843               	movf	_gBoxCntStruct+1,w
 10433  0692  1903               	btfsc	3,2
 10434  0693  0008               	return
 10435                           
 10436                           ;bsp_counter.c: 42: }
 10437                           ;bsp_counter.c: 44: if(1 == gBoxCntStruct.TimeCntStartFlag)
 10438                           
 10439                           ;bsp_counter.c: 40: {
 10440                           ;bsp_counter.c: 41: return;
 10441  0694  0342               	decf	_gBoxCntStruct,w
 10442  0695  1D03               	btfss	3,2
 10443  0696  2EC0               	goto	i1l1761
 10444                           
 10445                           ;bsp_counter.c: 45: {
 10446                           ;bsp_counter.c: 46: gBoxCntStruct.SingleTimeCnt++;
 10447  0697  3001               	movlw	1
 10448  0698  07C7               	addwf	_gBoxCntStruct+5,f
 10449  0699  3000               	movlw	0
 10450  069A  3DC8               	addwfc	_gBoxCntStruct+6,f
 10451  069B  3000               	movlw	0
 10452  069C  3DC9               	addwfc	_gBoxCntStruct+7,f
 10453  069D  3000               	movlw	0
 10454  069E  3DCA               	addwfc	_gBoxCntStruct+8,f
 10455                           
 10456                           ;bsp_counter.c: 47: if(500 < gBoxCntStruct.SingleTimeCnt)
 10457  069F  084A               	movf	_gBoxCntStruct+8,w
 10458  06A0  1D03               	btfss	3,2
 10459  06A1  2EAB               	goto	i1l1749
 10460  06A2  0849               	movf	_gBoxCntStruct+7,w
 10461  06A3  1D03               	btfss	3,2
 10462  06A4  2EAB               	goto	i1l1749
 10463  06A5  30F5               	movlw	245
 10464  06A6  0247               	subwf	_gBoxCntStruct+5,w
 10465  06A7  3001               	movlw	1
 10466  06A8  3B48               	subwfb	_gBoxCntStruct+6,w
 10467  06A9  1C03               	btfss	3,0
 10468  06AA  0008               	return
 10469  06AB                     i1l1749:	
 10470                           
 10471                           ;bsp_counter.c: 48: {
 10472                           ;bsp_counter.c: 50: gBoxCntStruct.JamFlag = 1;
 10473  06AB  01C5               	clrf	_gBoxCntStruct+3
 10474  06AC  0AC5               	incf	_gBoxCntStruct+3,f
 10475                           
 10476                           ;bsp_counter.c: 51: gBoxCntStruct.AlarmFlag = 1;
 10477  06AD  01C4               	clrf	_gBoxCntStruct+2
 10478  06AE  0AC4               	incf	_gBoxCntStruct+2,f
 10479                           
 10480                           ;bsp_counter.c: 52: gBoxCntStruct.JamCnt ++;
 10481  06AF  3001               	movlw	1
 10482  06B0  07D1               	addwf	_gBoxCntStruct+15,f
 10483  06B1  3000               	movlw	0
 10484  06B2  3DD2               	addwfc	_gBoxCntStruct+16,f
 10485                           
 10486                           ;bsp_counter.c: 53: gBoxCntStruct.SingleTimeCnt = 0;
 10487  06B3  3000               	movlw	0
 10488  06B4  00CA               	movwf	_gBoxCntStruct+8
 10489  06B5  3000               	movlw	0
 10490  06B6  00C9               	movwf	_gBoxCntStruct+7
 10491  06B7  3000               	movlw	0
 10492  06B8  00C8               	movwf	_gBoxCntStruct+6
 10493  06B9  3000               	movlw	0
 10494  06BA  00C7               	movwf	_gBoxCntStruct+5
 10495                           
 10496                           ;bsp_counter.c: 54: gBoxCntStruct.TimeCntEndFlag = 0;
 10497  06BB  01C3               	clrf	_gBoxCntStruct+1
 10498                           
 10499                           ;bsp_counter.c: 55: gBoxCntStruct.TimeCntStartFlag = 0;
 10500  06BC  01C2               	clrf	_gBoxCntStruct
 10501                           
 10502                           ;bsp_counter.c: 56: gBoxCntStruct.DisplayReflashFlag = 1;
 10503  06BD  01C6               	clrf	_gBoxCntStruct+4
 10504  06BE  0AC6               	incf	_gBoxCntStruct+4,f
 10505                           
 10506                           ;bsp_counter.c: 57: }
 10507                           ;bsp_counter.c: 58: return;
 10508  06BF  0008               	return
 10509  06C0                     i1l1761:	
 10510                           
 10511                           ;bsp_counter.c: 59: }
 10512                           ;bsp_counter.c: 63: if(1 == gBoxCntStruct.TimeCntEndFlag)
 10513  06C0  0343               	decf	_gBoxCntStruct+1,w
 10514  06C1  1D03               	btfss	3,2
 10515  06C2  0008               	return
 10516                           
 10517                           ;bsp_counter.c: 64: {
 10518                           ;bsp_counter.c: 65: gBoxCntStruct.TimeCntEndFlag = 0;
 10519  06C3  01C3               	clrf	_gBoxCntStruct+1
 10520                           
 10521                           ;bsp_counter.c: 66: gBoxCntStruct.TimeCntStartFlag = 0;
 10522  06C4  01C2               	clrf	_gBoxCntStruct
 10523                           
 10524                           ;bsp_counter.c: 68: if(100 > gBoxCntStruct.SingleTimeCnt)
 10525  06C5  084A               	movf	_gBoxCntStruct+8,w
 10526  06C6  1D03               	btfss	3,2
 10527  06C7  2EDB               	goto	i1l448
 10528  06C8  0849               	movf	_gBoxCntStruct+7,w
 10529  06C9  1D03               	btfss	3,2
 10530  06CA  2EDB               	goto	i1l448
 10531  06CB  0848               	movf	_gBoxCntStruct+6,w
 10532  06CC  1D03               	btfss	3,2
 10533  06CD  2EDB               	goto	i1l448
 10534  06CE  3064               	movlw	100
 10535  06CF  0247               	subwf	_gBoxCntStruct+5,w
 10536  06D0  1803               	btfsc	3,0
 10537  06D1  2EDB               	goto	i1l448
 10538                           
 10539                           ;bsp_counter.c: 69: {
 10540                           ;bsp_counter.c: 70: gBoxCntStruct.SingleTimeCnt = 0;
 10541  06D2  3000               	movlw	0
 10542  06D3  00CA               	movwf	_gBoxCntStruct+8
 10543  06D4  3000               	movlw	0
 10544  06D5  00C9               	movwf	_gBoxCntStruct+7
 10545  06D6  3000               	movlw	0
 10546  06D7  00C8               	movwf	_gBoxCntStruct+6
 10547  06D8  3000               	movlw	0
 10548  06D9  00C7               	movwf	_gBoxCntStruct+5
 10549                           
 10550                           ;bsp_counter.c: 71: return;
 10551  06DA  0008               	return
 10552  06DB                     i1l448:	
 10553                           
 10554                           ;bsp_counter.c: 72: }
 10555                           ;bsp_counter.c: 73: gBoxCntStruct.DisplayReflashFlag = 1;
 10556  06DB  01C6               	clrf	_gBoxCntStruct+4
 10557  06DC  0AC6               	incf	_gBoxCntStruct+4,f
 10558                           
 10559                           ;bsp_counter.c: 83: if(140 < gBoxCntStruct.SingleTimeCnt && 283 > gBoxCntStruct.SingleTi
      +                          meCnt)
 10560  06DD  084A               	movf	_gBoxCntStruct+8,w
 10561  06DE  1D03               	btfss	3,2
 10562  06DF  2EEA               	goto	i1l1773
 10563  06E0  0849               	movf	_gBoxCntStruct+7,w
 10564  06E1  1D03               	btfss	3,2
 10565  06E2  2EEA               	goto	i1l1773
 10566  06E3  0848               	movf	_gBoxCntStruct+6,w
 10567  06E4  1D03               	btfss	3,2
 10568  06E5  2EEA               	goto	i1l1773
 10569  06E6  308D               	movlw	141
 10570  06E7  0247               	subwf	_gBoxCntStruct+5,w
 10571  06E8  1C03               	btfss	3,0
 10572  06E9  2F0B               	goto	i1l1779
 10573  06EA                     i1l1773:	
 10574  06EA  084A               	movf	_gBoxCntStruct+8,w
 10575  06EB  1D03               	btfss	3,2
 10576  06EC  2F0B               	goto	i1l1779
 10577  06ED  0849               	movf	_gBoxCntStruct+7,w
 10578  06EE  1D03               	btfss	3,2
 10579  06EF  2F0B               	goto	i1l1779
 10580  06F0  301B               	movlw	27
 10581  06F1  0247               	subwf	_gBoxCntStruct+5,w
 10582  06F2  3001               	movlw	1
 10583  06F3  3B48               	subwfb	_gBoxCntStruct+6,w
 10584  06F4  1803               	btfsc	3,0
 10585  06F5  2F0B               	goto	i1l1779
 10586                           
 10587                           ;bsp_counter.c: 84: {
 10588                           ;bsp_counter.c: 85: gBoxCntStruct.MiddleBoxCnt++;
 10589  06F6  3001               	movlw	1
 10590  06F7  07CD               	addwf	_gBoxCntStruct+11,f
 10591  06F8  3000               	movlw	0
 10592  06F9  3DCE               	addwfc	_gBoxCntStruct+12,f
 10593                           
 10594                           ;bsp_counter.c: 86: gBoxCntStruct.BoxSum++;
 10595  06FA  3001               	movlw	1
 10596  06FB  07D3               	addwf	_gBoxCntStruct+17,f
 10597  06FC  3000               	movlw	0
 10598  06FD  3DD4               	addwfc	_gBoxCntStruct+18,f
 10599  06FE  3000               	movlw	0
 10600  06FF  3DD5               	addwfc	_gBoxCntStruct+19,f
 10601  0700  3000               	movlw	0
 10602  0701  3DD6               	addwfc	_gBoxCntStruct+20,f
 10603                           
 10604                           ;bsp_counter.c: 87: gBoxCntStruct.SingleTimeCnt = 0;
 10605  0702  3000               	movlw	0
 10606  0703  00CA               	movwf	_gBoxCntStruct+8
 10607  0704  3000               	movlw	0
 10608  0705  00C9               	movwf	_gBoxCntStruct+7
 10609  0706  3000               	movlw	0
 10610  0707  00C8               	movwf	_gBoxCntStruct+6
 10611  0708  3000               	movlw	0
 10612  0709  00C7               	movwf	_gBoxCntStruct+5
 10613                           
 10614                           ;bsp_counter.c: 88: return;
 10615  070A  0008               	return
 10616  070B                     i1l1779:	
 10617                           
 10618                           ;bsp_counter.c: 89: }
 10619                           ;bsp_counter.c: 91: if(283 < gBoxCntStruct.SingleTimeCnt && 424 > gBoxCntStruct.SingleTi
      +                          meCnt)
 10620  070B  084A               	movf	_gBoxCntStruct+8,w
 10621  070C  1D03               	btfss	3,2
 10622  070D  2F17               	goto	i1l1781
 10623  070E  0849               	movf	_gBoxCntStruct+7,w
 10624  070F  1D03               	btfss	3,2
 10625  0710  2F17               	goto	i1l1781
 10626  0711  301C               	movlw	28
 10627  0712  0247               	subwf	_gBoxCntStruct+5,w
 10628  0713  3001               	movlw	1
 10629  0714  3B48               	subwfb	_gBoxCntStruct+6,w
 10630  0715  1C03               	btfss	3,0
 10631  0716  2F38               	goto	i1l1787
 10632  0717                     i1l1781:	
 10633  0717  084A               	movf	_gBoxCntStruct+8,w
 10634  0718  1D03               	btfss	3,2
 10635  0719  2F38               	goto	i1l1787
 10636  071A  0849               	movf	_gBoxCntStruct+7,w
 10637  071B  1D03               	btfss	3,2
 10638  071C  2F38               	goto	i1l1787
 10639  071D  30A8               	movlw	168
 10640  071E  0247               	subwf	_gBoxCntStruct+5,w
 10641  071F  3001               	movlw	1
 10642  0720  3B48               	subwfb	_gBoxCntStruct+6,w
 10643  0721  1803               	btfsc	3,0
 10644  0722  2F38               	goto	i1l1787
 10645                           
 10646                           ;bsp_counter.c: 92: {
 10647                           ;bsp_counter.c: 93: gBoxCntStruct.LargeBoxCnt++;
 10648  0723  3001               	movlw	1
 10649  0724  07CF               	addwf	_gBoxCntStruct+13,f
 10650  0725  3000               	movlw	0
 10651  0726  3DD0               	addwfc	_gBoxCntStruct+14,f
 10652                           
 10653                           ;bsp_counter.c: 94: gBoxCntStruct.BoxSum++;
 10654  0727  3001               	movlw	1
 10655  0728  07D3               	addwf	_gBoxCntStruct+17,f
 10656  0729  3000               	movlw	0
 10657  072A  3DD4               	addwfc	_gBoxCntStruct+18,f
 10658  072B  3000               	movlw	0
 10659  072C  3DD5               	addwfc	_gBoxCntStruct+19,f
 10660  072D  3000               	movlw	0
 10661  072E  3DD6               	addwfc	_gBoxCntStruct+20,f
 10662                           
 10663                           ;bsp_counter.c: 95: gBoxCntStruct.SingleTimeCnt = 0;
 10664  072F  3000               	movlw	0
 10665  0730  00CA               	movwf	_gBoxCntStruct+8
 10666  0731  3000               	movlw	0
 10667  0732  00C9               	movwf	_gBoxCntStruct+7
 10668  0733  3000               	movlw	0
 10669  0734  00C8               	movwf	_gBoxCntStruct+6
 10670  0735  3000               	movlw	0
 10671  0736  00C7               	movwf	_gBoxCntStruct+5
 10672                           
 10673                           ;bsp_counter.c: 96: return ;
 10674  0737  0008               	return
 10675  0738                     i1l1787:	
 10676                           
 10677                           ;bsp_counter.c: 97: }
 10678                           ;bsp_counter.c: 99: if(140 > gBoxCntStruct.SingleTimeCnt)
 10679  0738  084A               	movf	_gBoxCntStruct+8,w
 10680  0739  1D03               	btfss	3,2
 10681  073A  0008               	return
 10682  073B  0849               	movf	_gBoxCntStruct+7,w
 10683  073C  1D03               	btfss	3,2
 10684  073D  0008               	return
 10685  073E  0848               	movf	_gBoxCntStruct+6,w
 10686  073F  1D03               	btfss	3,2
 10687  0740  0008               	return
 10688  0741  308C               	movlw	140
 10689  0742  0247               	subwf	_gBoxCntStruct+5,w
 10690  0743  1803               	btfsc	3,0
 10691  0744  0008               	return
 10692                           
 10693                           ;bsp_counter.c: 100: {
 10694                           ;bsp_counter.c: 101: gBoxCntStruct.SmallBoxCnt++;
 10695  0745  3001               	movlw	1
 10696  0746  07CB               	addwf	_gBoxCntStruct+9,f
 10697  0747  3000               	movlw	0
 10698  0748  3DCC               	addwfc	_gBoxCntStruct+10,f
 10699                           
 10700                           ;bsp_counter.c: 102: gBoxCntStruct.BoxSum++;
 10701  0749  3001               	movlw	1
 10702  074A  07D3               	addwf	_gBoxCntStruct+17,f
 10703  074B  3000               	movlw	0
 10704  074C  3DD4               	addwfc	_gBoxCntStruct+18,f
 10705  074D  3000               	movlw	0
 10706  074E  3DD5               	addwfc	_gBoxCntStruct+19,f
 10707  074F  3000               	movlw	0
 10708  0750  3DD6               	addwfc	_gBoxCntStruct+20,f
 10709                           
 10710                           ;bsp_counter.c: 103: gBoxCntStruct.SingleTimeCnt = 0;
 10711  0751  3000               	movlw	0
 10712  0752  00CA               	movwf	_gBoxCntStruct+8
 10713  0753  3000               	movlw	0
 10714  0754  00C9               	movwf	_gBoxCntStruct+7
 10715  0755  3000               	movlw	0
 10716  0756  00C8               	movwf	_gBoxCntStruct+6
 10717  0757  3000               	movlw	0
 10718  0758  00C7               	movwf	_gBoxCntStruct+5
 10719                           
 10720                           ;bsp_counter.c: 104: return;
 10721  0759  0008               	return
 10722  075A                     __end_of_bsp_TimerInterruptISRCallback:	
 10723                           
 10724                           	psect	text35
 10725  0003                     __ptext35:	
 10726 ;; *************** function _TMR3_DefaultInterruptHandler *****************
 10727 ;; Defined at:
 10728 ;;		line 186 in file "mcc_generated_files/tmr3.c"
 10729 ;; Parameters:    Size  Location     Type
 10730 ;;		None
 10731 ;; Auto vars:     Size  Location     Type
 10732 ;;		None
 10733 ;; Return value:  Size  Location     Type
 10734 ;;                  1    wreg      void 
 10735 ;; Registers used:
 10736 ;;		None
 10737 ;; Tracked objects:
 10738 ;;		On entry : 0/0
 10739 ;;		On exit  : 0/0
 10740 ;;		Unchanged: 0/0
 10741 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10742 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10743 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10744 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10745 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10746 ;;Total ram usage:        0 bytes
 10747 ;; Hardware stack levels used:    1
 10748 ;; This function calls:
 10749 ;;		Nothing
 10750 ;; This function is called by:
 10751 ;;		_TMR3_Initialize
 10752 ;;		_TMR3_CallBack
 10753 ;; This function uses a non-reentrant model
 10754 ;;
 10755                           
 10756                           
 10757                           ;psect for function _TMR3_DefaultInterruptHandler
 10758  0003                     _TMR3_DefaultInterruptHandler:	
 10759                           
 10760                           ;incstack = 0
 10761                           ; Regs used in _TMR3_DefaultInterruptHandler: []
 10762  0003  0008               	return
 10763  0004                     __end_of_TMR3_DefaultInterruptHandler:	
 10764                           
 10765                           	psect	text36
 10766  0BFE                     __ptext36:	
 10767 ;; *************** function _TMR1_ISR *****************
 10768 ;; Defined at:
 10769 ;;		line 157 in file "mcc_generated_files/tmr1.c"
 10770 ;; Parameters:    Size  Location     Type
 10771 ;;		None
 10772 ;; Auto vars:     Size  Location     Type
 10773 ;;		None
 10774 ;; Return value:  Size  Location     Type
 10775 ;;                  1    wreg      void 
 10776 ;; Registers used:
 10777 ;;		wreg, status,2, status,0, pclath, cstack
 10778 ;; Tracked objects:
 10779 ;;		On entry : 0/0
 10780 ;;		On exit  : 0/0
 10781 ;;		Unchanged: 0/0
 10782 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10783 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10784 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10785 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10786 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10787 ;;Total ram usage:        0 bytes
 10788 ;; Hardware stack levels used:    1
 10789 ;; Hardware stack levels required when called:    2
 10790 ;; This function calls:
 10791 ;;		_TMR1_CallBack
 10792 ;;		_TMR1_WriteTimer
 10793 ;; This function is called by:
 10794 ;;		_INTERRUPT_InterruptManager
 10795 ;; This function uses a non-reentrant model
 10796 ;;
 10797                           
 10798                           
 10799                           ;psect for function _TMR1_ISR
 10800  0BFE                     _TMR1_ISR:	
 10801                           
 10802                           ;tmr1.c: 161: PIR1bits.TMR1IF = 0;
 10803                           
 10804                           ;incstack = 0
 10805                           ; Regs used in _TMR1_ISR: [wreg+status,2+status,0+pclath+cstack]
 10806  0BFE  0020               	movlb	0	; select bank0
 10807  0BFF  1010               	bcf	16,0	;volatile
 10808                           
 10809                           ;tmr1.c: 162: TMR1_WriteTimer(timer1ReloadVal);
 10810  0C00  0865               	movf	_timer1ReloadVal+1,w	;volatile
 10811  0C01  00F1               	movwf	TMR1_WriteTimer@timerVal+1
 10812  0C02  0864               	movf	_timer1ReloadVal,w	;volatile
 10813  0C03  00F0               	movwf	TMR1_WriteTimer@timerVal
 10814  0C04  318C  2424  318B   	fcall	_TMR1_WriteTimer
 10815                           
 10816                           ;tmr1.c: 166: TMR1_CallBack();
 10817  0C07  318B  23E8         	fcall	_TMR1_CallBack
 10818  0C09  0008               	return
 10819  0C0A                     __end_of_TMR1_ISR:	
 10820                           
 10821                           	psect	text37
 10822  0C24                     __ptext37:	
 10823 ;; *************** function _TMR1_WriteTimer *****************
 10824 ;; Defined at:
 10825 ;;		line 120 in file "mcc_generated_files/tmr1.c"
 10826 ;; Parameters:    Size  Location     Type
 10827 ;;  timerVal        2    0[COMMON] unsigned int 
 10828 ;; Auto vars:     Size  Location     Type
 10829 ;;		None
 10830 ;; Return value:  Size  Location     Type
 10831 ;;                  1    wreg      void 
 10832 ;; Registers used:
 10833 ;;		wreg, status,2
 10834 ;; Tracked objects:
 10835 ;;		On entry : 0/0
 10836 ;;		On exit  : 0/0
 10837 ;;		Unchanged: 0/0
 10838 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10839 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10840 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10841 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10842 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10843 ;;Total ram usage:        2 bytes
 10844 ;; Hardware stack levels used:    1
 10845 ;; This function calls:
 10846 ;;		Nothing
 10847 ;; This function is called by:
 10848 ;;		_TMR1_ISR
 10849 ;;		_TMR1_Reload
 10850 ;; This function uses a non-reentrant model
 10851 ;;
 10852                           
 10853                           
 10854                           ;psect for function _TMR1_WriteTimer
 10855  0C24                     _TMR1_WriteTimer:	
 10856                           
 10857                           ;tmr1.c: 122: if (T1CONbits.nT1SYNC == 1)
 10858                           
 10859                           ;incstack = 0
 10860                           ; Regs used in _TMR1_WriteTimer: [wreg+status,2]
 10861  0C24  0020               	movlb	0	; select bank0
 10862  0C25  1D18               	btfss	24,2	;volatile
 10863  0C26  2C2E               	goto	i1l1901
 10864                           
 10865                           ;tmr1.c: 123: {
 10866                           ;tmr1.c: 125: T1CONbits.TMR1ON = 0;
 10867  0C27  1018               	bcf	24,0	;volatile
 10868                           
 10869                           ;tmr1.c: 128: TMR1H = (timerVal >> 8);
 10870  0C28  0871               	movf	TMR1_WriteTimer@timerVal+1,w
 10871  0C29  0097               	movwf	23	;volatile
 10872                           
 10873                           ;tmr1.c: 129: TMR1L = timerVal;
 10874  0C2A  0870               	movf	TMR1_WriteTimer@timerVal,w
 10875  0C2B  0096               	movwf	22	;volatile
 10876                           
 10877                           ;tmr1.c: 132: T1CONbits.TMR1ON =1;
 10878  0C2C  1418               	bsf	24,0	;volatile
 10879                           
 10880                           ;tmr1.c: 133: }
 10881  0C2D  0008               	return
 10882  0C2E                     i1l1901:	
 10883                           
 10884                           ;tmr1.c: 134: else
 10885                           ;tmr1.c: 135: {
 10886                           ;tmr1.c: 137: TMR1H = (timerVal >> 8);
 10887  0C2E  0871               	movf	TMR1_WriteTimer@timerVal+1,w
 10888  0C2F  0097               	movwf	23	;volatile
 10889                           
 10890                           ;tmr1.c: 138: TMR1L = timerVal;
 10891  0C30  0870               	movf	TMR1_WriteTimer@timerVal,w
 10892  0C31  0096               	movwf	22	;volatile
 10893  0C32  0008               	return
 10894  0C33                     __end_of_TMR1_WriteTimer:	
 10895                           
 10896                           	psect	text38
 10897  0BE8                     __ptext38:	
 10898 ;; *************** function _TMR1_CallBack *****************
 10899 ;; Defined at:
 10900 ;;		line 169 in file "mcc_generated_files/tmr1.c"
 10901 ;; Parameters:    Size  Location     Type
 10902 ;;		None
 10903 ;; Auto vars:     Size  Location     Type
 10904 ;;		None
 10905 ;; Return value:  Size  Location     Type
 10906 ;;                  1    wreg      void 
 10907 ;; Registers used:
 10908 ;;		wreg, status,2, status,0, pclath, cstack
 10909 ;; Tracked objects:
 10910 ;;		On entry : 0/0
 10911 ;;		On exit  : 0/0
 10912 ;;		Unchanged: 0/0
 10913 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10914 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10915 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10916 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10917 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10918 ;;Total ram usage:        0 bytes
 10919 ;; Hardware stack levels used:    1
 10920 ;; Hardware stack levels required when called:    1
 10921 ;; This function calls:
 10922 ;;		Absolute function
 10923 ;;		_TMR1_DefaultInterruptHandler
 10924 ;; This function is called by:
 10925 ;;		_TMR1_ISR
 10926 ;; This function uses a non-reentrant model
 10927 ;;
 10928                           
 10929                           
 10930                           ;psect for function _TMR1_CallBack
 10931  0BE8                     _TMR1_CallBack:	
 10932                           
 10933                           ;tmr1.c: 172: if(TMR1_InterruptHandler)
 10934                           
 10935                           ;incstack = 0
 10936                           ; Regs used in _TMR1_CallBack: [wreg+status,2+status,0+pclath+cstack]
 10937  0BE8  0020               	movlb	0	; select bank0
 10938  0BE9  0862               	movf	_TMR1_InterruptHandler,w
 10939  0BEA  0463               	iorwf	_TMR1_InterruptHandler+1,w
 10940  0BEB  1903               	btfsc	3,2
 10941  0BEC  0008               	return
 10942                           
 10943                           ;tmr1.c: 173: {
 10944                           ;tmr1.c: 174: TMR1_InterruptHandler();
 10945  0BED  0863               	movf	_TMR1_InterruptHandler+1,w
 10946  0BEE  008A               	movwf	10
 10947  0BEF  0862               	movf	_TMR1_InterruptHandler,w
 10948  0BF0  000A               	callw
 10949  0BF1  318B               	pagesel	$
 10950  0BF2  0008               	return
 10951  0BF3                     __end_of_TMR1_CallBack:	
 10952                           
 10953                           	psect	text39
 10954  0BA1                     __ptext39:	
 10955 ;; *************** function _TMR1_DefaultInterruptHandler *****************
 10956 ;; Defined at:
 10957 ;;		line 182 in file "mcc_generated_files/tmr1.c"
 10958 ;; Parameters:    Size  Location     Type
 10959 ;;		None
 10960 ;; Auto vars:     Size  Location     Type
 10961 ;;		None
 10962 ;; Return value:  Size  Location     Type
 10963 ;;                  1    wreg      void 
 10964 ;; Registers used:
 10965 ;;		None
 10966 ;; Tracked objects:
 10967 ;;		On entry : 0/0
 10968 ;;		On exit  : 0/0
 10969 ;;		Unchanged: 0/0
 10970 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 10971 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10972 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10973 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10974 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 10975 ;;Total ram usage:        0 bytes
 10976 ;; Hardware stack levels used:    1
 10977 ;; This function calls:
 10978 ;;		Nothing
 10979 ;; This function is called by:
 10980 ;;		_TMR1_Initialize
 10981 ;;		_TMR1_CallBack
 10982 ;; This function uses a non-reentrant model
 10983 ;;
 10984                           
 10985                           
 10986                           ;psect for function _TMR1_DefaultInterruptHandler
 10987  0BA1                     _TMR1_DefaultInterruptHandler:	
 10988                           
 10989                           ;incstack = 0
 10990                           ; Regs used in _TMR1_DefaultInterruptHandler: []
 10991  0BA1  0008               	return
 10992  0BA2                     __end_of_TMR1_DefaultInterruptHandler:	
 10993                           
 10994                           	psect	text40
 10995  0BCA                     __ptext40:	
 10996 ;; *************** function _TMR0_ISR *****************
 10997 ;; Defined at:
 10998 ;;		line 112 in file "mcc_generated_files/tmr0.c"
 10999 ;; Parameters:    Size  Location     Type
 11000 ;;		None
 11001 ;; Auto vars:     Size  Location     Type
 11002 ;;		None
 11003 ;; Return value:  Size  Location     Type
 11004 ;;                  1    wreg      void 
 11005 ;; Registers used:
 11006 ;;		wreg, status,2, status,0, pclath, cstack
 11007 ;; Tracked objects:
 11008 ;;		On entry : 0/0
 11009 ;;		On exit  : 0/0
 11010 ;;		Unchanged: 0/0
 11011 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11012 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11013 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11014 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11015 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11016 ;;Total ram usage:        0 bytes
 11017 ;; Hardware stack levels used:    1
 11018 ;; Hardware stack levels required when called:    2
 11019 ;; This function calls:
 11020 ;;		_TMR0_CallBack
 11021 ;; This function is called by:
 11022 ;;		_INTERRUPT_InterruptManager
 11023 ;; This function uses a non-reentrant model
 11024 ;;
 11025                           
 11026                           
 11027                           ;psect for function _TMR0_ISR
 11028  0BCA                     _TMR0_ISR:	
 11029                           
 11030                           ;tmr0.c: 116: INTCONbits.TMR0IF = 0;
 11031                           
 11032                           ;incstack = 0
 11033                           ; Regs used in _TMR0_ISR: [wreg+status,2+status,0+pclath+cstack]
 11034  0BCA  110B               	bcf	11,2	;volatile
 11035                           
 11036                           ;tmr0.c: 118: TMR0 = timer0ReloadVal;
 11037  0BCB  0020               	movlb	0	; select bank0
 11038  0BCC  0868               	movf	_timer0ReloadVal,w	;volatile
 11039  0BCD  0095               	movwf	21	;volatile
 11040                           
 11041                           ;tmr0.c: 122: TMR0_CallBack();
 11042  0BCE  318C  24C0         	fcall	_TMR0_CallBack
 11043  0BD0  0008               	return
 11044  0BD1                     __end_of_TMR0_ISR:	
 11045                           
 11046                           	psect	text41
 11047  0CC0                     __ptext41:	
 11048 ;; *************** function _TMR0_CallBack *****************
 11049 ;; Defined at:
 11050 ;;		line 127 in file "mcc_generated_files/tmr0.c"
 11051 ;; Parameters:    Size  Location     Type
 11052 ;;		None
 11053 ;; Auto vars:     Size  Location     Type
 11054 ;;		None
 11055 ;; Return value:  Size  Location     Type
 11056 ;;                  1    wreg      void 
 11057 ;; Registers used:
 11058 ;;		wreg, status,2, status,0, pclath, cstack
 11059 ;; Tracked objects:
 11060 ;;		On entry : 0/0
 11061 ;;		On exit  : 0/0
 11062 ;;		Unchanged: 0/0
 11063 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11064 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11065 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11066 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11067 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11068 ;;Total ram usage:        1 bytes
 11069 ;; Hardware stack levels used:    1
 11070 ;; Hardware stack levels required when called:    1
 11071 ;; This function calls:
 11072 ;;		Absolute function
 11073 ;;		_TMR0_DefaultInterruptHandler
 11074 ;; This function is called by:
 11075 ;;		_TMR0_ISR
 11076 ;; This function uses a non-reentrant model
 11077 ;;
 11078                           
 11079                           
 11080                           ;psect for function _TMR0_CallBack
 11081  0CC0                     _TMR0_CallBack:	
 11082                           
 11083                           ;tmr0.c: 130: gTimer0AlarmFlashFlag = 1;
 11084                           
 11085                           ;incstack = 0
 11086                           ; Regs used in _TMR0_CallBack: [wreg+status,2+status,0+pclath+cstack]
 11087  0CC0  3001               	movlw	1
 11088  0CC1  00F0               	movwf	??_TMR0_CallBack
 11089  0CC2  0870               	movf	??_TMR0_CallBack,w
 11090  0CC3  00FA               	movwf	_gTimer0AlarmFlashFlag	;volatile
 11091                           
 11092                           ;tmr0.c: 131: gTimer0NormalFalshCnt++;
 11093  0CC4  3001               	movlw	1
 11094  0CC5  00F0               	movwf	??_TMR0_CallBack
 11095  0CC6  0870               	movf	??_TMR0_CallBack,w
 11096  0CC7  07F9               	addwf	_gTimer0NormalFalshCnt,f	;volatile
 11097                           
 11098                           ;tmr0.c: 132: if(gTimer0NormalFalshCnt > 5)
 11099  0CC8  3006               	movlw	6
 11100  0CC9  0279               	subwf	_gTimer0NormalFalshCnt,w	;volatile
 11101  0CCA  1C03               	skipc
 11102  0CCB  2CD1               	goto	i1l1871
 11103                           
 11104                           ;tmr0.c: 133: {
 11105                           ;tmr0.c: 134: gTimer0NormalFalshCnt = 0;
 11106  0CCC  01F9               	clrf	_gTimer0NormalFalshCnt	;volatile
 11107                           
 11108                           ;tmr0.c: 135: gTimer0NormalFlashFlag= 1;
 11109  0CCD  3001               	movlw	1
 11110  0CCE  00F0               	movwf	??_TMR0_CallBack
 11111  0CCF  0870               	movf	??_TMR0_CallBack,w
 11112  0CD0  00F8               	movwf	_gTimer0NormalFlashFlag	;volatile
 11113  0CD1                     i1l1871:	
 11114                           
 11115                           ;tmr0.c: 136: }
 11116                           ;tmr0.c: 138: if(TMR0_InterruptHandler)
 11117  0CD1  0020               	movlb	0	; select bank0
 11118  0CD2  0866               	movf	_TMR0_InterruptHandler,w
 11119  0CD3  0467               	iorwf	_TMR0_InterruptHandler+1,w
 11120  0CD4  1903               	btfsc	3,2
 11121  0CD5  0008               	return
 11122                           
 11123                           ;tmr0.c: 139: {
 11124                           ;tmr0.c: 140: TMR0_InterruptHandler();
 11125  0CD6  0867               	movf	_TMR0_InterruptHandler+1,w
 11126  0CD7  008A               	movwf	10
 11127  0CD8  0866               	movf	_TMR0_InterruptHandler,w
 11128  0CD9  000A               	callw
 11129  0CDA  318C               	pagesel	$
 11130  0CDB  0008               	return
 11131  0CDC                     __end_of_TMR0_CallBack:	
 11132                           
 11133                           	psect	text42
 11134  0BA0                     __ptext42:	
 11135 ;; *************** function _TMR0_DefaultInterruptHandler *****************
 11136 ;; Defined at:
 11137 ;;		line 148 in file "mcc_generated_files/tmr0.c"
 11138 ;; Parameters:    Size  Location     Type
 11139 ;;		None
 11140 ;; Auto vars:     Size  Location     Type
 11141 ;;		None
 11142 ;; Return value:  Size  Location     Type
 11143 ;;                  1    wreg      void 
 11144 ;; Registers used:
 11145 ;;		None
 11146 ;; Tracked objects:
 11147 ;;		On entry : 0/0
 11148 ;;		On exit  : 0/0
 11149 ;;		Unchanged: 0/0
 11150 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11151 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11152 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11153 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11154 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11155 ;;Total ram usage:        0 bytes
 11156 ;; Hardware stack levels used:    1
 11157 ;; This function calls:
 11158 ;;		Nothing
 11159 ;; This function is called by:
 11160 ;;		_TMR0_Initialize
 11161 ;;		_TMR0_CallBack
 11162 ;; This function uses a non-reentrant model
 11163 ;;
 11164                           
 11165                           
 11166                           ;psect for function _TMR0_DefaultInterruptHandler
 11167  0BA0                     _TMR0_DefaultInterruptHandler:	
 11168                           
 11169                           ;incstack = 0
 11170                           ; Regs used in _TMR0_DefaultInterruptHandler: []
 11171  0BA0  0008               	return
 11172  0BA1                     __end_of_TMR0_DefaultInterruptHandler:	
 11173                           
 11174                           	psect	text43
 11175  0B9F                     __ptext43:	
 11176 ;; *************** function _PIN_MANAGER_IOC *****************
 11177 ;; Defined at:
 11178 ;;		line 107 in file "mcc_generated_files/pin_manager.c"
 11179 ;; Parameters:    Size  Location     Type
 11180 ;;		None
 11181 ;; Auto vars:     Size  Location     Type
 11182 ;;		None
 11183 ;; Return value:  Size  Location     Type
 11184 ;;                  1    wreg      void 
 11185 ;; Registers used:
 11186 ;;		None
 11187 ;; Tracked objects:
 11188 ;;		On entry : 0/0
 11189 ;;		On exit  : 0/0
 11190 ;;		Unchanged: 0/0
 11191 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11192 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11193 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11194 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11195 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11196 ;;Total ram usage:        0 bytes
 11197 ;; Hardware stack levels used:    1
 11198 ;; This function calls:
 11199 ;;		Nothing
 11200 ;; This function is called by:
 11201 ;;		_INTERRUPT_InterruptManager
 11202 ;; This function uses a non-reentrant model
 11203 ;;
 11204                           
 11205                           
 11206                           ;psect for function _PIN_MANAGER_IOC
 11207  0B9F                     _PIN_MANAGER_IOC:	
 11208                           
 11209                           ;incstack = 0
 11210                           ; Regs used in _PIN_MANAGER_IOC: []
 11211  0B9F  0008               	return
 11212  0BA0                     __end_of_PIN_MANAGER_IOC:	
 11213                           
 11214                           	psect	text44
 11215  0BA2                     __ptext44:	
 11216 ;; *************** function _INT_ISR *****************
 11217 ;; Defined at:
 11218 ;;		line 37 in file "mcc_generated_files/ext_int.c"
 11219 ;; Parameters:    Size  Location     Type
 11220 ;;		None
 11221 ;; Auto vars:     Size  Location     Type
 11222 ;;		None
 11223 ;; Return value:  Size  Location     Type
 11224 ;;                  1    wreg      void 
 11225 ;; Registers used:
 11226 ;;		wreg, status,2, status,0, pclath, cstack
 11227 ;; Tracked objects:
 11228 ;;		On entry : 0/0
 11229 ;;		On exit  : 0/0
 11230 ;;		Unchanged: 0/0
 11231 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11232 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11233 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11234 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11235 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11236 ;;Total ram usage:        0 bytes
 11237 ;; Hardware stack levels used:    1
 11238 ;; Hardware stack levels required when called:    2
 11239 ;; This function calls:
 11240 ;;		_INT_CallBack
 11241 ;; This function is called by:
 11242 ;;		_INTERRUPT_InterruptManager
 11243 ;; This function uses a non-reentrant model
 11244 ;;
 11245                           
 11246                           
 11247                           ;psect for function _INT_ISR
 11248  0BA2                     _INT_ISR:	
 11249                           
 11250                           ;ext_int.c: 39: (INTCONbits.INTF = 0);
 11251                           
 11252                           ;incstack = 0
 11253                           ; Regs used in _INT_ISR: [wreg+status,2+status,0+pclath+cstack]
 11254  0BA2  108B               	bcf	11,1	;volatile
 11255                           
 11256                           ;ext_int.c: 42: INT_CallBack();
 11257  0BA3  318D  25A2         	fcall	_INT_CallBack
 11258  0BA5  0008               	return
 11259  0BA6                     __end_of_INT_ISR:	
 11260                           
 11261                           	psect	text45
 11262  0DA2                     __ptext45:	
 11263 ;; *************** function _INT_CallBack *****************
 11264 ;; Defined at:
 11265 ;;		line 46 in file "mcc_generated_files/ext_int.c"
 11266 ;; Parameters:    Size  Location     Type
 11267 ;;		None
 11268 ;; Auto vars:     Size  Location     Type
 11269 ;;		None
 11270 ;; Return value:  Size  Location     Type
 11271 ;;                  1    wreg      void 
 11272 ;; Registers used:
 11273 ;;		wreg, status,2, status,0, pclath, cstack
 11274 ;; Tracked objects:
 11275 ;;		On entry : 0/0
 11276 ;;		On exit  : 0/0
 11277 ;;		Unchanged: 0/0
 11278 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11279 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11280 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11281 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11282 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11283 ;;Total ram usage:        1 bytes
 11284 ;; Hardware stack levels used:    1
 11285 ;; Hardware stack levels required when called:    1
 11286 ;; This function calls:
 11287 ;;		Absolute function
 11288 ;;		_INT_DefaultInterruptHandler
 11289 ;; This function is called by:
 11290 ;;		_INT_ISR
 11291 ;; This function uses a non-reentrant model
 11292 ;;
 11293                           
 11294                           
 11295                           ;psect for function _INT_CallBack
 11296  0DA2                     _INT_CallBack:	
 11297                           
 11298                           ;ext_int.c: 49: gInterruptFlag = 1;
 11299                           
 11300                           ;incstack = 0
 11301                           ; Regs used in _INT_CallBack: [wreg+status,2+status,0+pclath+cstack]
 11302  0DA2  3001               	movlw	1
 11303  0DA3  00F0               	movwf	??_INT_CallBack
 11304  0DA4  0870               	movf	??_INT_CallBack,w
 11305  0DA5  0020               	movlb	0	; select bank0
 11306  0DA6  00DD               	movwf	_gInterruptFlag	;volatile
 11307                           
 11308                           ;ext_int.c: 50: if(1 == OPTION_REGbits.INTEDG && 1 == PORTAbits.RA2)
 11309  0DA7  0021               	movlb	1	; select bank1
 11310  0DA8  1F15               	btfss	21,6	;volatile
 11311  0DA9  2DB3               	goto	i1l303
 11312  0DAA  0020               	movlb	0	; select bank0
 11313  0DAB  1D0C               	btfss	12,2	;volatile
 11314  0DAC  2DB3               	goto	i1l303
 11315                           
 11316                           ;ext_int.c: 51: {
 11317                           ;ext_int.c: 52: gBoxCntStruct.TimeCntStartFlag = 1;
 11318  0DAD  01C2               	clrf	_gBoxCntStruct
 11319  0DAE  0AC2               	incf	_gBoxCntStruct,f
 11320                           
 11321                           ;ext_int.c: 53: gBoxCntStruct.TimeCntEndFlag = 0;
 11322  0DAF  01C3               	clrf	_gBoxCntStruct+1
 11323                           
 11324                           ;ext_int.c: 55: (OPTION_REGbits.INTEDG = 0);
 11325  0DB0  0021               	movlb	1	; select bank1
 11326  0DB1  1315               	bcf	21,6	;volatile
 11327                           
 11328                           ;ext_int.c: 56: }
 11329  0DB2  2DBE               	goto	i1l1995
 11330  0DB3                     i1l303:	
 11331                           
 11332                           ;ext_int.c: 57: else if(0 == OPTION_REGbits.INTEDG && 0 == PORTAbits.RA2 )
 11333  0DB3  0021               	movlb	1	; select bank1
 11334  0DB4  1B15               	btfsc	21,6	;volatile
 11335  0DB5  2DBE               	goto	i1l1995
 11336  0DB6  0020               	movlb	0	; select bank0
 11337  0DB7  190C               	btfsc	12,2	;volatile
 11338  0DB8  2DBE               	goto	i1l1995
 11339                           
 11340                           ;ext_int.c: 58: {
 11341                           ;ext_int.c: 59: gBoxCntStruct.TimeCntStartFlag = 0;
 11342  0DB9  01C2               	clrf	_gBoxCntStruct
 11343                           
 11344                           ;ext_int.c: 60: gBoxCntStruct.TimeCntEndFlag = 1;
 11345  0DBA  01C3               	clrf	_gBoxCntStruct+1
 11346  0DBB  0AC3               	incf	_gBoxCntStruct+1,f
 11347                           
 11348                           ;ext_int.c: 61: (OPTION_REGbits.INTEDG = 1);
 11349  0DBC  0021               	movlb	1	; select bank1
 11350  0DBD  1715               	bsf	21,6	;volatile
 11351  0DBE                     i1l1995:	
 11352                           
 11353                           ;ext_int.c: 62: }
 11354                           ;ext_int.c: 63: if(INT_InterruptHandler)
 11355  0DBE  0021               	movlb	1	; select bank1
 11356  0DBF  0866               	movf	_INT_InterruptHandler^(0+128),w
 11357  0DC0  0467               	iorwf	(_INT_InterruptHandler+1)^(0+128),w
 11358  0DC1  1903               	btfsc	3,2
 11359  0DC2  0008               	return
 11360                           
 11361                           ;ext_int.c: 64: {
 11362                           ;ext_int.c: 65: INT_InterruptHandler();
 11363  0DC3  0867               	movf	(_INT_InterruptHandler+1)^(0+128),w
 11364  0DC4  008A               	movwf	10
 11365  0DC5  0866               	movf	_INT_InterruptHandler^(0+128),w
 11366  0DC6  000A               	callw
 11367  0DC7  318D               	pagesel	$
 11368  0DC8  0008               	return
 11369  0DC9                     __end_of_INT_CallBack:	
 11370                           
 11371                           	psect	text46
 11372  0B9E                     __ptext46:	
 11373 ;; *************** function _INT_DefaultInterruptHandler *****************
 11374 ;; Defined at:
 11375 ;;		line 73 in file "mcc_generated_files/ext_int.c"
 11376 ;; Parameters:    Size  Location     Type
 11377 ;;		None
 11378 ;; Auto vars:     Size  Location     Type
 11379 ;;		None
 11380 ;; Return value:  Size  Location     Type
 11381 ;;                  1    wreg      void 
 11382 ;; Registers used:
 11383 ;;		None
 11384 ;; Tracked objects:
 11385 ;;		On entry : 0/0
 11386 ;;		On exit  : 0/0
 11387 ;;		Unchanged: 0/0
 11388 ;; Data sizes:     COMMON   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12
 11389 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11390 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11391 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11392 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0
 11393 ;;Total ram usage:        0 bytes
 11394 ;; Hardware stack levels used:    1
 11395 ;; This function calls:
 11396 ;;		Nothing
 11397 ;; This function is called by:
 11398 ;;		_EXT_INT_Initialize
 11399 ;;		_INT_CallBack
 11400 ;; This function uses a non-reentrant model
 11401 ;;
 11402                           
 11403                           
 11404                           ;psect for function _INT_DefaultInterruptHandler
 11405  0B9E                     _INT_DefaultInterruptHandler:	
 11406                           
 11407                           ;incstack = 0
 11408                           ; Regs used in _INT_DefaultInterruptHandler: []
 11409  0B9E  0008               	return
 11410  0B9F                     __end_of_INT_DefaultInterruptHandler:	
 11411  007E                     btemp	set	126	;btemp
 11412  007E                     int$flags	set	126
 11413  007E                     wtemp0	set	126


Data Sizes:
    Strings     14
    Constant    0
    Data        71
    BSS         65
    Persistent  13
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      6      11
    BANK0            80     34      73
    BANK1            80      0      72
    BANK2            80      0      33
    BANK3            80      0       0
    BANK4            80      0       0
    BANK5            80      0       0
    BANK6            80      0       0
    BANK7            80      0       0
    BANK8            80      0       0
    BANK9            80      0       0
    BANK10           80      0       0
    BANK11           80      0       0
    BANK12           48      0       0

Pointer List with Targets:

    _fassert@expr	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_4(CODE[7]), STR_2(CODE[7]), 

    _fassert@file	PTR const unsigned char  size(2) Largest target is 7
		 -> STR_3(CODE[7]), STR_1(CODE[7]), 

    memset@p1	PTR void  size(1) Largest target is 32
		 -> HEFBufferData(BANK1[32]), 

    memset@p	PTR unsigned char  size(1) Largest target is 32
		 -> HEFBufferData(BANK1[32]), 

    HEFLASH_readBlock@buffer	PTR unsigned char  size(1) Largest target is 32
		 -> HEFBufferData(BANK1[32]), 

    HEFLASH_writeBlock@data	PTR unsigned char  size(1) Largest target is 32
		 -> HEFBufferData(BANK1[32]), 

    sp__memset	PTR void  size(1) Largest target is 32
		 -> HEFBufferData(BANK1[32]), 

    Print@str	PTR unsigned char  size(2) Largest target is 18
		 -> clearDataOk_2(BANK1[11]), clearDataOk_1(BANK2[15]), clearingData(BANK2[18]), display_data_2(BANK1[11]), 
		 -> display_data_1(BANK1[16]), 

    INT_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> INT_DefaultInterruptHandler(), 

    INT_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> INT_DefaultInterruptHandler(), Absolute function(), 

    TMR3_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR3_DefaultInterruptHandler(), 

    TMR3_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR3_DefaultInterruptHandler(), Absolute function(), 

    TMR1_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR1_DefaultInterruptHandler(), 

    TMR1_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR1_DefaultInterruptHandler(), Absolute function(), 

    TMR0_SetInterruptHandler@InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> TMR0_DefaultInterruptHandler(), 

    TMR0_InterruptHandler	PTR FTN()void  size(2) Largest target is 1
		 -> Absolute function(), TMR0_DefaultInterruptHandler(), 


Critical Paths under _main in COMMON

    _main->_LCDSendData
    _main->_memset
    _SYSTEM_Initialize->_TMR0_Initialize
    _TMR3_Initialize->_TMR3_SetInterruptHandler
    _TMR1_Initialize->_TMR1_SetInterruptHandler
    _TMR0_Initialize->_TMR0_SetInterruptHandler
    _EXT_INT_Initialize->_INT_SetInterruptHandler
    _Print->_LCDSendData
    _LCDInit->_LCDSendData
    _HEFLASH_checkData->___lldiv
    _HEFLASH_checkData->___lwdiv
    _HEFLASH_checkData->_memset
    _HEFLASH_readBlock->_FLASH_read
    _Data_Toseg->___lldiv
    _Data_Toseg->___lwdiv
    ___lwdiv->___lwmod
    ___lldiv->___llmod
    _HEFLASH_writeBlock->_FLASH_erase

Critical Paths under _INTERRUPT_InterruptManager in COMMON

    _TMR3_ISR->_TMR3_WriteTimer
    _TMR1_ISR->_TMR1_WriteTimer
    _TMR0_ISR->_TMR0_CallBack
    _INT_ISR->_INT_CallBack

Critical Paths under _main in BANK0

    _main->_HEFLASH_checkData
    _Print->_LCDSendData
    _LCDInit->_LCDSendData
    _HEFLASH_checkData->___lldiv
    _Data_Toseg->___lldiv
    ___lwdiv->___lwmod
    ___lldiv->___llmod
    _HEFLASH_writeBlock->_FLASH_write

Critical Paths under _INTERRUPT_InterruptManager in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _INTERRUPT_InterruptManager in BANK12

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 2     2      0   29344
                                             32 BANK0      2     2      0
                         _Data_Toseg
                  _HEFLASH_checkData
                 _HEFLASH_writeBlock
                            _LCDInit
                        _LCDSendData
                              _Print
                  _SYSTEM_Initialize
                    _bsp_CounterInit
                             _memset
 ---------------------------------------------------------------------------------
 (1) _bsp_CounterInit                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SYSTEM_Initialize                                    0     0      0     344
                 _EXT_INT_Initialize
              _OSCILLATOR_Initialize
             _PIN_MANAGER_Initialize
                    _TMR0_Initialize
                    _TMR1_Initialize
                    _TMR3_Initialize
 ---------------------------------------------------------------------------------
 (2) _TMR3_Initialize                                      0     0      0      86
           _TMR3_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _TMR3_SetInterruptHandler                             2     0      2      86
                                              3 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _TMR1_Initialize                                      0     0      0      86
           _TMR1_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _TMR1_SetInterruptHandler                             2     0      2      86
                                              3 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _TMR0_Initialize                                      1     1      0      86
                                              5 COMMON     1     1      0
           _TMR0_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _TMR0_SetInterruptHandler                             2     0      2      86
                                              3 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (2) _PIN_MANAGER_Initialize                               0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _OSCILLATOR_Initialize                                0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _EXT_INT_Initialize                                   0     0      0      86
            _INT_SetInterruptHandler
 ---------------------------------------------------------------------------------
 (3) _INT_SetInterruptHandler                              2     0      2      86
                                              3 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (1) _Print                                                3     1      2    2722
                                              2 BANK0      3     1      2
                        _LCDSendData
 ---------------------------------------------------------------------------------
 (1) _LCDInit                                              1     1      0    2118
                                              2 BANK0      1     1      0
                        _LCDSendData
 ---------------------------------------------------------------------------------
 (2) _LCDSendData                                          5     2      3    2118
                                              3 COMMON     3     0      3
                                              0 BANK0      2     2      0
 ---------------------------------------------------------------------------------
 (1) _HEFLASH_checkData                                   11    11      0   10961
                                             21 BANK0     11    11      0
                  _HEFLASH_readBlock
                 _HEFLASH_writeBlock
                            ___lldiv
                            ___llmod
                            ___lwdiv
                            ___lwmod
                           __fassert
                             _memset
 ---------------------------------------------------------------------------------
 (1) _memset                                               7     3      4     511
                                              3 COMMON     3     3      0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (2) __fassert                                             6     0      6     384
                                              0 BANK0      6     0      6
 ---------------------------------------------------------------------------------
 (2) _HEFLASH_readBlock                                    7     5      2     599
                                              0 BANK0      7     5      2
                         _FLASH_read
 ---------------------------------------------------------------------------------
 (3) _FLASH_read                                           2     0      2     214
                                              3 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (1) _Data_Toseg                                           5     5      0    9402
                                             21 BANK0      5     5      0
                 _HEFLASH_writeBlock
                            ___lldiv
                            ___llmod
                            ___lwdiv
                            ___lwmod
 ---------------------------------------------------------------------------------
 (2) ___lwmod                                              6     2      4    3928
                                              3 COMMON     2     2      0
                                              0 BANK0      4     0      4
 ---------------------------------------------------------------------------------
 (2) ___lwdiv                                              8     4      4    2705
                                              5 COMMON     1     1      0
                                              4 BANK0      7     3      4
                            ___lwmod (ARG)
 ---------------------------------------------------------------------------------
 (2) ___llmod                                             10     2      8     927
                                              3 COMMON     2     2      0
                                              0 BANK0      8     0      8
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             14     6      8     674
                                              5 COMMON     1     1      0
                                              8 BANK0     13     5      8
                            ___llmod (ARG)
 ---------------------------------------------------------------------------------
 (1) _HEFLASH_writeBlock                                   7     5      2    1168
                                              5 BANK0      7     5      2
                        _FLASH_erase
                        _FLASH_write
 ---------------------------------------------------------------------------------
 (2) _FLASH_write                                          6     1      5     473
                                              3 COMMON     1     1      0
                                              0 BANK0      5     0      5
                            __unlock
 ---------------------------------------------------------------------------------
 (2) _FLASH_erase                                          3     1      2     109
                                              3 COMMON     3     1      2
                            __unlock
 ---------------------------------------------------------------------------------
 (3) __unlock                                              0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (5) _INTERRUPT_InterruptManager                           1     1      0     432
                                              2 COMMON     1     1      0
                            _INT_ISR
                    _PIN_MANAGER_IOC
                           _TMR0_ISR
                           _TMR1_ISR
                           _TMR3_ISR
 ---------------------------------------------------------------------------------
 (6) _TMR3_ISR                                             0     0      0     216
                      _TMR3_CallBack
                    _TMR3_WriteTimer
 ---------------------------------------------------------------------------------
 (7) _TMR3_WriteTimer                                      2     0      2     216
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (7) _TMR3_CallBack                                        0     0      0       0
                   Absolute function *
       _TMR3_DefaultInterruptHandler *
      _bsp_TimerInterruptISRCallback
 ---------------------------------------------------------------------------------
 (8) _bsp_TimerInterruptISRCallback                        0     0      0       0
 ---------------------------------------------------------------------------------
 (8) _TMR3_DefaultInterruptHandler                         0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _TMR1_ISR                                             0     0      0     216
                      _TMR1_CallBack
                    _TMR1_WriteTimer
 ---------------------------------------------------------------------------------
 (7) _TMR1_WriteTimer                                      2     0      2     216
                                              0 COMMON     2     0      2
 ---------------------------------------------------------------------------------
 (7) _TMR1_CallBack                                        0     0      0       0
                   Absolute function *
       _TMR1_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (8) _TMR1_DefaultInterruptHandler                         0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _TMR0_ISR                                             0     0      0       0
                      _TMR0_CallBack
 ---------------------------------------------------------------------------------
 (7) _TMR0_CallBack                                        1     1      0       0
                                              0 COMMON     1     1      0
                   Absolute function *
       _TMR0_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (8) _TMR0_DefaultInterruptHandler                         0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _PIN_MANAGER_IOC                                      0     0      0       0
 ---------------------------------------------------------------------------------
 (6) _INT_ISR                                              0     0      0       0
                       _INT_CallBack
 ---------------------------------------------------------------------------------
 (7) _INT_CallBack                                         1     1      0       0
                                              0 COMMON     1     1      0
                   Absolute function *
        _INT_DefaultInterruptHandler *
 ---------------------------------------------------------------------------------
 (8) _INT_DefaultInterruptHandler                          0     0      0       0
 ---------------------------------------------------------------------------------
 (8) Absolute function(Fake)                               0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 8
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Data_Toseg
     _HEFLASH_writeBlock
       _FLASH_erase
         __unlock
       _FLASH_write
         __unlock
     ___lldiv
       ___llmod (ARG)
     ___llmod
     ___lwdiv
       ___lwmod (ARG)
     ___lwmod
   _HEFLASH_checkData
     _HEFLASH_readBlock
       _FLASH_read
     _HEFLASH_writeBlock
       _FLASH_erase
         __unlock
       _FLASH_write
         __unlock
     ___lldiv
       ___llmod (ARG)
     ___llmod
     ___lwdiv
       ___lwmod (ARG)
     ___lwmod
     __fassert
     _memset
   _HEFLASH_writeBlock
     _FLASH_erase
       __unlock
     _FLASH_write
       __unlock
   _LCDInit
     _LCDSendData
   _LCDSendData
   _Print
     _LCDSendData
   _SYSTEM_Initialize
     _EXT_INT_Initialize
       _INT_SetInterruptHandler
     _OSCILLATOR_Initialize
     _PIN_MANAGER_Initialize
     _TMR0_Initialize
       _TMR0_SetInterruptHandler
     _TMR1_Initialize
       _TMR1_SetInterruptHandler
     _TMR3_Initialize
       _TMR3_SetInterruptHandler
   _bsp_CounterInit
   _memset

 _INTERRUPT_InterruptManager (ROOT)
   _INT_ISR
     _INT_CallBack
       Absolute function(Fake) *
       _INT_DefaultInterruptHandler *
   _PIN_MANAGER_IOC
   _TMR0_ISR
     _TMR0_CallBack
       Absolute function(Fake) *
       _TMR0_DefaultInterruptHandler *
   _TMR1_ISR
     _TMR1_CallBack
       Absolute function(Fake) *
       _TMR1_DefaultInterruptHandler *
     _TMR1_WriteTimer
   _TMR3_ISR
     _TMR3_CallBack
       Absolute function(Fake) *
       _TMR3_DefaultInterruptHandler *
       _bsp_TimerInterruptISRCallback *
     _TMR3_WriteTimer

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             3F0      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
BITCOMMON            E      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
SFR0                 0      0       0       1        0.0%
COMMON               E      6       B       2       78.6%
BITSFR1              0      0       0       2        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR2              0      0       0       3        0.0%
SFR2                 0      0       0       3        0.0%
STACK                0      0       0       3        0.0%
BITBANK0            50      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
SFR3                 0      0       0       4        0.0%
BANK0               50     22      49       5       91.3%
BITSFR4              0      0       0       5        0.0%
SFR4                 0      0       0       5        0.0%
BITBANK1            50      0       0       6        0.0%
BITSFR5              0      0       0       6        0.0%
SFR5                 0      0       0       6        0.0%
BANK1               50      0      48       7       90.0%
BITSFR6              0      0       0       7        0.0%
SFR6                 0      0       0       7        0.0%
BITBANK2            50      0       0       8        0.0%
BITSFR7              0      0       0       8        0.0%
SFR7                 0      0       0       8        0.0%
BANK2               50      0      21       9       41.3%
BITSFR8              0      0       0       9        0.0%
SFR8                 0      0       0       9        0.0%
BITBANK3            50      0       0      10        0.0%
BITSFR9              0      0       0      10        0.0%
SFR9                 0      0       0      10        0.0%
BANK3               50      0       0      11        0.0%
BITSFR10             0      0       0      11        0.0%
SFR10                0      0       0      11        0.0%
BITBANK4            50      0       0      12        0.0%
BITSFR11             0      0       0      12        0.0%
SFR11                0      0       0      12        0.0%
BANK4               50      0       0      13        0.0%
BITSFR12             0      0       0      13        0.0%
SFR12                0      0       0      13        0.0%
BITBANK5            50      0       0      14        0.0%
BITSFR13             0      0       0      14        0.0%
SFR13                0      0       0      14        0.0%
BANK5               50      0       0      15        0.0%
BITSFR14             0      0       0      15        0.0%
SFR14                0      0       0      15        0.0%
BITBANK6            50      0       0      16        0.0%
BITSFR15             0      0       0      16        0.0%
SFR15                0      0       0      16        0.0%
BANK6               50      0       0      17        0.0%
BITSFR16             0      0       0      17        0.0%
SFR16                0      0       0      17        0.0%
BITBANK7            50      0       0      18        0.0%
BITSFR17             0      0       0      18        0.0%
SFR17                0      0       0      18        0.0%
BANK7               50      0       0      19        0.0%
BITSFR18             0      0       0      19        0.0%
SFR18                0      0       0      19        0.0%
BITSFR19             0      0       0      20        0.0%
SFR19                0      0       0      20        0.0%
ABS                  0      0      BD      20        0.0%
BITBANK8            50      0       0      21        0.0%
BITSFR20             0      0       0      21        0.0%
SFR20                0      0       0      21        0.0%
BANK8               50      0       0      22        0.0%
BITSFR21             0      0       0      22        0.0%
SFR21                0      0       0      22        0.0%
BITBANK9            50      0       0      23        0.0%
BITSFR22             0      0       0      23        0.0%
SFR22                0      0       0      23        0.0%
BANK9               50      0       0      24        0.0%
BITSFR23             0      0       0      24        0.0%
SFR23                0      0       0      24        0.0%
BITBANK10           50      0       0      25        0.0%
BITSFR24             0      0       0      25        0.0%
SFR24                0      0       0      25        0.0%
BANK10              50      0       0      26        0.0%
BITSFR25             0      0       0      26        0.0%
SFR25                0      0       0      26        0.0%
BITBANK11           50      0       0      27        0.0%
BITSFR26             0      0       0      27        0.0%
SFR26                0      0       0      27        0.0%
BANK11              50      0       0      28        0.0%
BITSFR27             0      0       0      28        0.0%
SFR27                0      0       0      28        0.0%
BITBANK12           30      0       0      29        0.0%
BITSFR28             0      0       0      29        0.0%
SFR28                0      0       0      29        0.0%
BANK12              30      0       0      30        0.0%
BITSFR29             0      0       0      30        0.0%
SFR29                0      0       0      30        0.0%
BITSFR30             0      0       0      31        0.0%
SFR30                0      0       0      31        0.0%
DATA                 0      0      BD      31        0.0%
BITSFR31             0      0       0      32        0.0%
SFR31                0      0       0      32        0.0%


Microchip Technology PIC Macro Assembler V1.45 build -152302408 
Symbol Table                                                                                   Fri Apr 13 09:40:16 2018

                             __CFG_CP$OFF 0000                  __size_of_bsp_CounterInit 001D  
                            ?_LCDSendData 0073                           _timer0ReloadVal 0068  
                             __CFG_LVP$ON 0000                                       l370 0FEE  
                                     l372 0FF0                           _timer1ReloadVal 0064  
                            __CFG_BORV$LO 0000                                       wreg 0009  
                            __CFG_IESO$ON 0000                         FLASH_read@address 0073  
                         __end_of_LCDInit 07D3                              __CFG_ZCD$OFF 0000  
                                    l2103 0E8C                                      l2027 0F12  
                                    l2107 0E97                                      l2029 0F37  
                                    l2073 0EB1                                      l2083 0EDF  
                                    l2075 0EBF                           _timer3ReloadVal 0060  
                                    l2087 0EEA                                      l2503 0E58  
                                    l2097 0E66                                      l2099 0E74  
                                    l2515 0CE1                                      l2535 0E17  
                                    l2527 0DF9                                      l2551 07DA  
                                    l2703 0566                                      l2529 0E05  
                                    l2553 07E6                                      l2561 07FB  
                                    l2539 0E20                                      l2491 0E3D  
                                    l2643 0096                                      l2731 05C3  
                                    l2557 07F2                                      l2717 058C  
                                    l2725 05B7                                      l2495 0E3F  
                                    l2593 0D36                                      l2729 05BB  
                                    l2677 02D3                                      l2775 063D  
                                    l2769 062E                                      l2787 065F  
                                    l2779 064C                                _Data_Toseg 0306  
                                    STR_1 1000                                      STR_2 1007  
                                    STR_3 1000                                      STR_4 1007  
                                    u1305 0FE9                                      u1315 0EF9  
                                    u2115 0DFC                                      u2205 07EC  
                                    u1245 0F6A                                      _LATA 010C  
                                    _LATB 010D                           __end_of_INT_ISR 0BA6  
                                    u1415 0EB4                                      u2135 0E06  
                                    u2215 07F3                                      u2055 0E2B  
                                    u1255 0F7E                                      _LATC 010E  
                                    u1505 0E82                                      u2145 0E10  
                                    u1265 0F93                                      u1435 0EC0  
                                    u1515 0E8D                                      u2155 0E18  
                                    u1275 0FA6                                      u2420 065D  
                                    u1445 0ED4                                      u2245 04FD  
                                    u1285 0FBA                                      u2350 063B  
                                    u1455 0EE0                                      u1295 0FCF  
                                    u2185 07DD                                      u2507 0769  
                                    u2380 064A                                      u1485 0E69  
                                    u2517 077D                                      u2527 0791  
                                    u2537 07A5                                      u2457 054C  
                                    u2547 0FF2                                      u2467 0570  
                                    u2557 0FFB                                      u2477 05B0  
                                    u2567 006D                                      u2487 0615  
                                    u2497 0D54                __end_of_HEFLASH_writeBlock 0F4B  
                                    _TMR0 0015                                      _WPUA 020C  
                                    _WPUB 020D                                      _WPUC 020E  
                            __CFG_WRT$OFF 0000                             __CFG_FCMEN$ON 0000  
                                    _main 0529                                      fsr0h 0005  
                                    fsr1h 0007                                      indf0 0000  
                                    fsr0l 0004                                      indf1 0001  
                                    fsr1l 0006                                      btemp 007E  
                           __CFG_BOREN$ON 0000       __end_of_INT_DefaultInterruptHandler 0B9F  
             _INT_DefaultInterruptHandler 0B9E                                      start 0037  
                         _TMR3_Initialize 0CA6           __end_of_INT_SetInterruptHandler 0BAC  
              ??_TMR1_SetInterruptHandler 0075                             __CFG_MCLRE$ON 0000  
                          _KeyPushTimeCnt 0057                       __size_of_FLASH_read 000F  
                 __end_of_TMR0_Initialize 0C78                             __CFG_PLLEN$ON 0000  
          ??_TMR0_DefaultInterruptHandler 0070            __size_of_OSCILLATOR_Initialize 0007  
                                   PMCON1 0195                                     PMCON2 0196  
           __end_of_OSCILLATOR_Initialize 0BDF                                     ?_main 0070  
                           __CFG_WDTE$OFF 0000                           __end_of___lldiv 0EF3  
                                   _T1CON 0018                           __end_of___llmod 0EA0  
                                   _T3CON 0495                           __end_of___lwdiv 0E25  
                                   i1l303 0DB3                                     i1l162 0010  
                                   i1l164 0017                                     i1l166 001E  
                                   i1l174 0032                                     i1l169 002A  
                         __end_of___lwmod 0800                                     i1l448 06DB  
                                   _PMADR 0191                                     _PMDAT 0193  
                                   _TMR1H 0017                                     _TMR3H 0494  
                                   _TMR1L 0016                                     _TMR3L 0493  
                                   _PORTC 000E                                     _TRISA 008C  
                                   _TRISB 008D                                     _TRISC 008E  
       __size_of_TMR0_SetInterruptHandler 0006         __size_of_TMR3_SetInterruptHandler 0006  
               ?_TMR0_SetInterruptHandler 0073                 ?_TMR3_SetInterruptHandler 0073  
                                   _Print 0D36                          __end_of_TMR0_ISR 0BD1  
                         __end_of__unlock 0BE8                          __end_of_TMR1_ISR 0C0A  
                        __end_of_TMR3_ISR 0C16            ??_TMR3_DefaultInterruptHandler 0070  
                 __end_of_PIN_MANAGER_IOC 0BA0                   __end_of_TMR1_Initialize 0CA6  
                                   pclath 000A                    HEFLASH_writeBlock@data 0025  
                  HEFLASH_writeBlock@radd 0029                                     status 0003  
                                   wtemp0 007E                            _gInterruptFlag 005D  
                         _TMR1_WriteTimer 0C24                           __initialization 0039  
                            __end_of_main 068E                            __CFG_LPBOR$OFF 0000  
             ?_INTERRUPT_InterruptManager 0070                      __size_of_FLASH_erase 0017  
                                  ??_main 0040                     _TMR3_InterruptHandler 005E  
                    __size_of_FLASH_write 0027                                 ??_LCDInit 0022  
                       ??_bsp_CounterInit 0073                                 ??_INT_ISR 0071  
                    HEFLASH_readBlock@add 0024                                    ?_Print 0022  
                        ___llmod@dividend 0024                                    _ANSELA 018C  
                                  _ANSELB 018D                                    _ANSELC 018E  
                             ?_Data_Toseg 0070                                    _BORCON 0116  
                                  _T1GCON 0019                                    _T3GCON 0496  
                 TMR1_WriteTimer@timerVal 0070                                    _ODCONA 028C  
                                  _ODCONB 028D                                    _ODCONC 028E  
                                  i1l1901 0C2E                                    i1l1761 06C0  
                 __end_of_TMR3_Initialize 0CC0                                    i1l1781 0717  
                                  i1l1773 06EA                                    i1l1749 06AB  
                                  i1l1871 0CD1                                    i1l1787 0738  
                                  i1l1779 070B                                    i1l1965 0C3D  
                                  i1l1995 0DBE                                    _INTPPS 0E10  
                        __end_of__fassert 0BD8                                    _OSCCON 0099  
                   _gTimer0AlarmFlashFlag 007A                           _TMR3_WriteTimer 0C33  
                          __CFG_PWRTE$OFF 0000      __end_of_TMR1_DefaultInterruptHandler 0BA2  
   __size_of_TMR1_DefaultInterruptHandler 0001              _TMR1_DefaultInterruptHandler 0BA1  
                          __CFG_STVREN$ON 0000                        FLASH_write@address 0020  
                               ??___lldiv 0075                                 ??___llmod 0073  
                               ??___lwdiv 0075                                 ??___lwmod 0073  
                        ?_TMR0_Initialize 0070                                    _memset 0CDC  
                               ??__unlock 0073                             ?_INT_CallBack 0070  
                    __size_of_LCDSendData 00B5                                _gEnterFlag 0077  
                 HEFLASH_writeBlock@count 0026                     __end_of_TMR0_CallBack 0CDC  
        __size_of_INT_SetInterruptHandler 0006                              ??_FLASH_read 0075  
 INT_SetInterruptHandler@InterruptHandler 0073  TMR3_SetInterruptHandler@InterruptHandler 0073  
TMR1_SetInterruptHandler@InterruptHandler 0073  TMR0_SetInterruptHandler@InterruptHandler 0073  
                        ?_PIN_MANAGER_IOC 0070                   __end_of_TMR1_WriteTimer 0C33  
                           LCDSendData@RS 0073                     __end_of_TMR1_CallBack 0BF3  
                        ?_TMR1_Initialize 0070                         _SYSTEM_Initialize 0C51  
                 __end_of__initialization 0065                    _gTimer0NormalFlashFlag 0078  
                      ?_SYSTEM_Initialize 0070                     __end_of_TMR3_CallBack 0C24  
                          __pcstackCOMMON 0070                             __end_of_Print 0D58  
                            __pidataBANK1 0D7C                              __pidataBANK2 0D15  
                     ??_SYSTEM_Initialize 0076                                 ?_TMR0_ISR 0070  
                               ?_TMR1_ISR 0070             ?_TMR1_DefaultInterruptHandler 0070  
                               ?_TMR3_ISR 0070                        __end_of_FLASH_read 0C51  
                     __size_of_Data_Toseg 0223                            ??_INT_CallBack 0070  
             __size_of_EXT_INT_Initialize 000B                             __fassert@file 0022  
                           __fassert@line 0020                            _OPTION_REGbits 0095  
                           __fassert@expr 0024                                   ??_Print 0024  
               __end_of_SYSTEM_Initialize 0C63                   __end_of_TMR3_WriteTimer 0C42  
                              __pbssBANK0 0042                                __pbssBANK1 00C6  
                        ?_TMR3_Initialize 0070                   HEFLASH_readBlock@buffer 0026  
                   HEFLASH_readBlock@radd 0020                                __pmaintext 0529  
        __end_of_TMR0_SetInterruptHandler 0BB2                              _clearingData 0120  
                      _HEFLASH_writeBlock 0EF3          __end_of_TMR3_SetInterruptHandler 0BBE  
                              ??_TMR0_ISR 0071                                ??_TMR1_ISR 0072  
                         __CFG_PPS1WAY$ON 0000                                ??_TMR3_ISR 0072  
                              __pintentry 0004                                   ?_memset 0020  
                     ?_HEFLASH_writeBlock 0025                                 ?__fassert 0020  
                                 _LCDInit 075A                           __CFG_WDTCCS$SWC 0000  
                                 _INT_ISR 0BA2                                   _OSCTUNE 0098  
                        ?_TMR1_WriteTimer 0070                      ??_HEFLASH_writeBlock 0027  
                         _KeyClearHEFFlag 005B                           _bsp_CounterInit 0CF8  
                                 ___lldiv 0EA0                                   ___llmod 0E5D  
                                 ___lwdiv 0DF0                                   ___lwmod 07D3  
                         __size_of_memset 001C     __end_of_bsp_TimerInterruptISRCallback 075A  
  __size_of_bsp_TimerInterruptISRCallback 00CC             _bsp_TimerInterruptISRCallback 068E  
                                 __ptext1 0CF8                                   __ptext2 0C51  
                                 __ptext3 0CA6                                   __ptext4 0BB8  
                                 __ptext5 0C8F                                   __ptext6 0BB2  
                                 __ptext7 0C63                                   __ptext8 0BAC  
                                 __ptext9 0D58                                   __unlock 0BDF  
                              ??__fassert 0073            ??_TMR1_DefaultInterruptHandler 0070  
                               _T1CONbits 0018                     _OSCILLATOR_Initialize 0BD8  
                               _T3CONbits 0495         __size_of_TMR1_SetInterruptHandler 0006  
                ??_PIN_MANAGER_Initialize 0073                 ?_TMR1_SetInterruptHandler 0073  
                 _INT_SetInterruptHandler 0BA6                __size_of_SYSTEM_Initialize 0012  
                                 clrloop0 0BBF                              ??_Data_Toseg 0035  
                    end_of_initialization 0065                          ?_TMR3_WriteTimer 0070  
                                 init_ram 0BC4                                   memset@c 0020  
                                 memset@n 0022                                   memset@p 0074  
                                 initloop 0BC5                      __end_of_INT_CallBack 0DC9  
                         ___lldiv@divisor 0028                           ___lldiv@counter 0034  
                           ??_FLASH_erase 0075                             ??_FLASH_write 0073  
                      __end_of_Data_Toseg 0529                  _TMR0_SetInterruptHandler 0BAC  
                               _PORTAbits 000C                  _TMR3_SetInterruptHandler 0BB8  
                        __CFG_FOSC$INTOSC 0000                   __end_of_bsp_CounterInit 0D15  
                           ??_LCDSendData 0020                               _gTimer3Flag 005C  
                       __size_of_TMR0_ISR 0007                         __size_of_TMR1_ISR 000C  
                       __size_of_TMR3_ISR 000C                         _HEFLASH_checkData 0069  
                  ?_OSCILLATOR_Initialize 0070                            __end_of_memset 0CF8  
               ??_INT_SetInterruptHandler 0075                     HEFLASH_writeBlock@add 002A  
                     __end_of_FLASH_erase 0C8F                        ?_HEFLASH_checkData 0070  
                     start_initialization 0039                       __end_of_FLASH_write 0DF0  
          ?_bsp_TimerInterruptISRCallback 0070                  __size_of_TMR0_Initialize 0015  
         __size_of_PIN_MANAGER_Initialize 0024                       ??_HEFLASH_checkData 0035  
                         ___llmod@divisor 0020                           ___llmod@counter 0074  
                __size_of_PIN_MANAGER_IOC 0001              ?_INT_DefaultInterruptHandler 0070  
                           _clearDataOk_1 0132                             _clearDataOk_2 00B0  
                       _HEFLASH_readBlock 0E25                  __size_of_TMR1_Initialize 0017  
                      ?_HEFLASH_readBlock 0020                    __size_of_TMR0_CallBack 001C  
               __end_of_HEFLASH_checkData 0306                               __pdataBANK1 00A0  
                             __pdataBANK2 0120                                  ??_memset 0073  
              __end_of_EXT_INT_Initialize 0BFE                    __size_of_TMR1_CallBack 000B  
                   _gTimer0NormalFalshCnt 0079                                 _gExitFlag 0076  
                     ??_HEFLASH_readBlock 0022                                  ?_LCDInit 0070  
                             __pbssCOMMON 0076                       __end_of_LCDSendData 1000  
                               ___latbits 0002                         __size_of__fassert 0007  
                                ?_INT_ISR 0070                             __pcstackBANK0 0020  
                  __size_of_TMR3_CallBack 000E                     __size_of_INT_CallBack 0027  
                   _TMR0_InterruptHandler 0066                                 __pnvBANK0 005E  
                               __pnvBANK1 00E6                 __end_of_HEFLASH_readBlock 0E5D  
                        ?_bsp_CounterInit 0070                          ___lwdiv@dividend 0026  
                  _PIN_MANAGER_Initialize 0D58                    HEFLASH_readBlock@count 0021  
           ??_INT_DefaultInterruptHandler 0070                  __size_of_TMR3_Initialize 001A  
        __end_of_TMR1_SetInterruptHandler 0BB8                                  ?___lldiv 0028  
                                ?___llmod 0020                                  ?___lwdiv 0024  
                                ?___lwmod 0020                               _FLASH_erase 0C78  
                             _FLASH_write 0DC9              ??_INTERRUPT_InterruptManager 0072  
                                ?__unlock 0070                              _INT_CallBack 0DA2  
                          __size_of_Print 0022                          ___lwdiv@quotient 0029  
                           _TMR0_CallBack 0CC0                             _gBoxCntStruct 0042  
                           _TMR1_CallBack 0BE8                         ??_TMR0_Initialize 0075  
                                _LATAbits 010C                                  _LATBbits 010D  
                                _LATCbits 010E               __size_of_HEFLASH_writeBlock 0058  
                               clear_ram0 0BBE                                  _PIE1bits 0090  
                                _PIE5bits 0094                  __size_of_TMR1_WriteTimer 000F  
     __size_of_INTERRUPT_InterruptManager 0033                ??_TMR0_SetInterruptHandler 0075  
                                _PIR1bits 0010                ??_TMR3_SetInterruptHandler 0075  
                           _TMR3_CallBack 0C16                                  _PIR5bits 0014  
                         FLASH_erase@temp 0075                      __CFG_WDTCPS$WDTCPS1F 0000  
                                _TMR0_ISR 0BCA                                  _TMR1_ISR 0BFE  
                                _TMR3_ISR 0C0A                __size_of_HEFLASH_checkData 029D  
                       ??_PIN_MANAGER_IOC 0070                             _HEFBufferData 00C6  
                             _LCDSendData 0F4B                         ??_TMR1_Initialize 0075  
    __size_of_INT_DefaultInterruptHandler 0001                          __size_of_LCDInit 0079  
                        __size_of_INT_ISR 0004                            ?_TMR0_CallBack 0070  
                          ?_TMR1_CallBack 0070                __size_of_HEFLASH_readBlock 0038  
                          ?_TMR3_CallBack 0070                  __size_of_TMR3_WriteTimer 000F  
                                Print@str 0022                          FLASH_write@latch 0024  
                 ??_OSCILLATOR_Initialize 0073                          __size_of___lldiv 0053  
                        __size_of___llmod 0043                          __size_of___lwdiv 0035  
                        __size_of___lwmod 002D                         ??_TMR3_Initialize 0075  
                _TMR1_SetInterruptHandler 0BB2                                  __fassert 0BD1  
                   _TMR1_InterruptHandler 0062                          __size_of__unlock 0009  
                         ___lwdiv@divisor 0024                           ___lwdiv@counter 0028  
                                __ptext10 0BD8                                  __ptext11 0BF3  
                                __ptext20 0C42                                  __ptext12 0BA6  
                                __ptext21 0306                                  __ptext13 0D36  
                              _T1GCONbits 0019                                  __ptext22 07D3  
                                __ptext14 075A                                  __ptext31 0C0A  
                                __ptext23 0DF0                                  __ptext15 0F4B  
                                __ptext40 0BCA                                  __ptext32 0C33  
                                __ptext24 0E5D                                  __ptext16 0069  
                                __ptext41 0CC0                                  __ptext33 0C16  
                                __ptext25 0EA0                                  __ptext17 0CDC  
                                __ptext42 0BA0                                  __ptext34 068E  
                                __ptext26 0EF3                                  __ptext18 0BD1  
                                __ptext43 0B9F                                  __ptext35 0003  
                                __ptext27 0DC9                                  __ptext19 0E25  
                                __ptext44 0BA2                                  __ptext36 0BFE  
                                __ptext28 0C78                                  __ptext45 0DA2  
                                __ptext37 0C24                                  __ptext29 0BDF  
                                __ptext46 0B9E                                  __ptext38 0BE8  
                                __ptext39 0BA1                                _FLASH_read 0C42  
                      FLASH_erase@address 0073                                _T3GCONbits 0496  
                 TMR3_WriteTimer@timerVal 0070                        HEFLASH_checkData@r 003E  
                           __size_of_main 0165      __end_of_TMR0_DefaultInterruptHandler 0BA1  
   __size_of_TMR0_DefaultInterruptHandler 0001              _TMR0_DefaultInterruptHandler 0BA0  
         ??_bsp_TimerInterruptISRCallback 0070                      __CFG_WDTCWS$WDTCWSSW 0000  
                                int$flags 007E        __end_of_INTERRUPT_InterruptManager 0037  
              _INTERRUPT_InterruptManager 0004                         ??_TMR1_WriteTimer 0072  
    __end_of_TMR3_DefaultInterruptHandler 0004     __size_of_TMR3_DefaultInterruptHandler 0001  
            _TMR3_DefaultInterruptHandler 0003                                _INTCONbits 000B  
                         ??_TMR0_CallBack 0070                      _INT_InterruptHandler 00E6  
                         FLASH_write@data 0022                                  memset@p1 0075  
                         FLASH_write@temp 0073                           ??_TMR1_CallBack 0070  
                      _EXT_INT_Initialize 0BF3                                  intlevel1 0000  
                              _PMCON1bits 0195                          ___lwmod@dividend 0022  
                        ___lldiv@dividend 002C                   ?_PIN_MANAGER_Initialize 0070  
                         ??_TMR3_CallBack 0070                         __CFG_CLKOUTEN$OFF 0000  
                     ?_EXT_INT_Initialize 0070             ?_TMR0_DefaultInterruptHandler 0070  
                            ?_FLASH_erase 0073                  ?_INT_SetInterruptHandler 0073  
                            ?_FLASH_write 0020                         ??_TMR3_WriteTimer 0072  
                           __pstringtext1 1000                             __pstringtext2 1007  
                           __pstringtext3 0000                      ??_EXT_INT_Initialize 0075  
                              _OPTION_REG 0095             ?_TMR3_DefaultInterruptHandler 0070  
                          _display_data_1 00A0                            _display_data_2 00BB  
                        ___lldiv@quotient 0030                           ___lwmod@divisor 0020  
                         _TMR0_Initialize 0C63                           ___lwmod@counter 0074  
                        LCDSendData@value 0075                               ?_FLASH_read 0073  
          __end_of_PIN_MANAGER_Initialize 0D7C                           _PIN_MANAGER_IOC 0B9F  
                         _TMR1_Initialize 0C8F  
